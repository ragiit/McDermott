@page "/login"
@using McDermott.Domain.Entities
@using McDermott.Persistence.Context
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject ApplicationDbContext dbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor

<h3>Login</h3>

<EditForm Model="@loginModel" FormName="B" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Email</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<h3>Create New User</h3>



@code { 
    protected override void OnInitialized()
    {  
    }
    // Login form model
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private async Task HandleLogin()
    {
        var user = dbContext.Users.FirstOrDefault(x => x.Email == loginModel.Email);

        if (user != null && user.Password == loginModel.Password) // Basic password validation
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Name),
                    new Claim("TokenExpiration", DateTime.UtcNow.AddSeconds(10).ToString("o")) // Waktu kedaluwarsa token

            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Sign the user in
            await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

            // Redirect after login
            Navigation.NavigateTo("/"); // Navigate after successful login
        }
        else
        {
            // Optionally handle login failure here
            // loginModel.ErrorMessage = "Invalid username or password.";
        }
    }

   
}
