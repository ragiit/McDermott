@page "/Account/Login"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using McHealthCare.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="hold-transition login-page">
    <div class="login-box">
        <div class="card card-outline card-primary">
            <div class="card-header text-center">
                <a href="#" class="h1 no-underline">
                    <img src="https://www.ikariera.cz/uploads/companies/file/28129/22192/17871/c1c103e1-56b0-45cf-b02d-f6acbc7276b8/Logo%20-%20mcdermott_symbol_color%20500x500%2C%2050hrana.png" alt="Logo McHealthCare" style="max-width: 100px; height: auto; vertical-align: middle;"> <!-- Ganti url_ke_gambar_anda dengan URL gambar Anda -->
                </a>
            </div>
            <div class="card-body">
                <h5 class="text-center mt-2"><b>Welcome</b></h5>
                <p class="text-center mt-1 mb-2">Please login using your account to continue</p>
                <EditForm Model="Input" Context="Ctx" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <DxFormLayout CssClass="col-md">
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Email" ColSpanMd="12" BeginRow="true">
                            <DxMaskedInput @bind-Value="Input.Email"
                                           NullText="mail@domain.com"
                                           ShowValidationIcon="true"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           InputId="EmailId"
                                           MaskMode="MaskMode.RegEx">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-envelope" />
                                </Buttons>
                                <ChildContent>
                                    <DxRegExMaskProperties MaskAutoCompleteMode="@MaskAutoCompleteMode.Strong"
                                                           Placeholder="@('_')"
                                                           PlaceholdersVisible="true" />
                                </ChildContent>
                            </DxMaskedInput>
                            <ValidationMessage For="@(()=>Input.Email)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Password" ColSpanMd="12" BeginRow="true">
                            <DxTextBox @bind-Text="@Input.Password"
                                       InputId="PasswordId"
                                       ShowValidationIcon="true"
                                       NullText="Password" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       Password="true">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-lock" />
                                </Buttons>
                            </DxTextBox>
                            <ValidationMessage For="@(()=>Input.Password)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Horizontal" Caption="Remember Me" ColSpanMd="12" BeginRow="true">
                            <DxCheckBox @bind-Checked="@Input.RememberMe" />
                            <ValidationMessage For="@(()=>Input.RememberMe)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                            <div class="row">
                                <div class="col-12">
                                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Contained" CssClass="rounded-button w-100 mt-3" IconCssClass="fa-solid fa-right-to-bracket" Text="LOGIN" SubmitFormOnClick="true" />
                                </div>
                            </div>
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@* <h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div> *@

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
        catch { }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}