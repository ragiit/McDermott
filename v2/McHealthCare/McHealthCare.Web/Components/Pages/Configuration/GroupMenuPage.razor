@page "/configuration/groups"
@page "/configuration/groups/{PageMode}"
@page "/configuration/groups/{PageMode}/{Id:guid?}"
@using static McHealthCare.Extentions.EnumHelper

<PageTitle>McHealthCare - Groups</PageTitle>

<InputFile id="fileInput" style="display:none" OnChange="@ImportExcelFileGroup" accept=".xlsx" multiple="false"></InputFile>
<InputFile id="fileInput2" style="display:none" OnChange="@ImportExcelFileGroupMenu" accept=".xlsx" multiple="false"></InputFile>

<div class="wrapper">

    <BaseHeaderPage Title="Groups" OnClickBack="@(async () => await BackButton())" ShowBackButton="@(PageMode == EnumPageMode.Create.GetDisplayName() || PageMode == EnumPageMode.Update.GetDisplayName())" />
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                @if (PageMode == EnumPageMode.Create.GetDisplayName() || PageMode == EnumPageMode.Update.GetDisplayName())
                {
                    <DxLoadingPanel @bind-Visible="IsLoading"
                                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                    IsContentBlocked="true"
                                    ApplyBackgroundShading="true"
                                    IndicatorAreaVisible="false"
                                    Text="Fetching Data...">

                        <EditForm Model="@Group" Context="EditFormContext22" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                            <DataAnnotationsValidator />
                            <div class="card">
                                <div class="card-body">
                                    <div class="w-100 row">
                                        <div class="col align-self-center">
                                            <div class="col d-flex justify-content-end p-0">
                                                <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Outline" CssClass="me-1" IconCssClass="fa-solid fa-floppy-disk" Text="Save" SubmitFormOnClick="true"></DxButton>
                                                <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Cancel" Click="CancelItemGroupMenuGrid_Click"></DxButton>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card">
                                <div class="card-header">
                                    <span class="fw-bolder">@(Group.Id == Guid.Empty ? "Add Group" : "Edit Group")</span>
                                </div>
                                <div class="card-body">
                                    <DxFormLayout CssClass="w-100">
                                        <DxFormLayoutItem CaptionPosition="CaptionPosition.Vertical" Caption="Group" CaptionCssClass="normal-caption required-caption" ColSpanMd="12">
                                            <DxTextBox @bind-Text="@Group.Name"
                                                       ShowValidationIcon="true"
                                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                       NullText="Group" />
                                            <ValidationMessage For="@(() => Group.Name)"   />
                                        </DxFormLayoutItem>

                                        @if (Group.Id != Guid.Empty)
                                        {
                                            <DxFormLayoutGroup Caption="Menus" CssClass="mt-3" ColSpanMd="12" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                                                <Items>
                                                    <MyDxGrid @ref="GridGroupMenu"
                                                              Data="GroupMenus"
                                                              @bind-SelectedDataItems="@SelectedDataItemsGroupMenu"
                                                              KeyFieldName="MenuId"
                                                              FocusedRowChanged="@((GridFocusedRowChangedEventArgs args) => FocusedRowVisibleIndex2 = args.VisibleIndex)"
                                                              EditModelSaving="OnSaveGroupMenu"
                                                              DataItemDeleting="OnDeleteGroupMenu">

                                                        <ToolbarTemplate>
                                                            <MyDxToolbarBase TItem="GroupMenuDto"
                                                                             Items="@GroupMenus"
                                                                             SelectedDataItems="@SelectedDataItemsGroupMenu"
                                                                             NewItem_Click="@(async () => await GridGroupMenu.StartEditNewRowAsync())"
                                                                             EditItem_Click="@(async () =>  await GridGroupMenu.StartEditRowAsync(FocusedRowVisibleIndex2))"
                                                                             DeleteItem_Click="@(() => GridGroupMenu.ShowRowDeleteConfirmation(FocusedRowVisibleIndex2))"
                                                                             Refresh_Click="@LoadDataGroupMenu" 
                                                                             Grid="GridGroupMenu"
                                                                             IsImport="true"
                                                                             ImportFile="@(async () => await JsRuntime.InvokeVoidAsync("clickInputFile", "fileInput2"))"
                                                                             ExportToExcel="@(async () => await Helper.GenerateColumnImportTemplateExcelFileAsync(JsRuntime, FileExportService, "group_menu_template.xlsx", ExportFileDatasGroupMenus))" />
                                                        </ToolbarTemplate>

                                                        <Columns>
                                                            <DxGridSelectionColumn Width="15px" />
                                                            <DxGridDataColumn MinWidth="200" FieldName="Menu.Name" Caption="Menu" SortIndex="0" />
                                                        </Columns>
                                                        <EditFormTemplate Context="EditFormContext">
                                                            @{
                                                                var a = (GroupMenuDto)EditFormContext.EditModel;
                                                            }
                                                            <DxFormLayout CssClass="w-100">
                                                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Menu" ColSpanMd="12">
                                                                    <MyDxComboBox Data="@Menus"
                                                                                  NullText="Select Menu..."
                                                                                  @bind-Value="@a.MenuId"
                                                                                  TextFieldName="Name"
                                                                                  ValueFieldName="Id">
                                                                    </MyDxComboBox>
                                                                    <ValidationMessage For="@(()=>a.MenuId)" />
                                                                </DxFormLayoutItem>

                                                            </DxFormLayout>
                                                        </EditFormTemplate>
                                                    </MyDxGrid>
                                                </Items>
                                            </DxFormLayoutGroup>
                                        }
                                    </DxFormLayout>
                                </div>
                            </div>
                        </EditForm>
                    </DxLoadingPanel>
                }
                else
                {
                    <div class="card">
                        <DxLoadingPanel @bind-Visible="PanelVisible"
                                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                        IsContentBlocked="true"
                                        ApplyBackgroundShading="true"
                                        IndicatorAreaVisible="false"
                                        Text="Fetching Data...">
                            <MyDxGrid @ref="Grid"
                                      Data="Groups"
                                      @bind-SelectedDataItems="@SelectedDataItems"
                                      RowDoubleClick="@(async () =>  await Grid.StartEditRowAsync(FocusedRowVisibleIndex))"  
                                      DataItemDeleting="OnDelete"
                                      FocusedRowChanged="@((GridFocusedRowChangedEventArgs args) => FocusedRowVisibleIndex = args.VisibleIndex)"
                                      KeyFieldName="Id">

                                <ToolbarTemplate>
                                    <MyDxToolbarBase TItem="GroupDto"
                                                     Items="@Groups"
                                                     Grid="Grid"
                                                     SelectedDataItems="@SelectedDataItems"
                                                     NewItem_Click="@(async () => InitializeNew())"
                                                     EditItem_Click="@(async () =>  await InitializeEdit())"
                                                     DeleteItem_Click="@(() => Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex))"
                                                     Refresh_Click="@(async () => await LoadData())"
                                                     IsImport="true"
                                                     ImportFile="@(async () => await JsRuntime.InvokeVoidAsync("clickInputFile", "fileInput"))"
                                                     ExportToExcel="@(async () => await Helper.GenerateColumnImportTemplateExcelFileAsync(JsRuntime, FileExportService, "group_template.xlsx", ExportFileDatasGroup))" />
                                    
                                </ToolbarTemplate>

                                <Columns>
                                    <DxGridSelectionColumn Width="15px" /> 
                                    <DxGridDataColumn MinWidth="200" FieldName="Name" /> 
                                </Columns>
                            </MyDxGrid>
                        </DxLoadingPanel>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
