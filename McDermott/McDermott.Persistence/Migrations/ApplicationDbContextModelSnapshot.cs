// <auto-generated />
using System;
using McDermott.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace McDermott.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActiveComponentMedicamentGroupDetail", b =>
                {
                    b.Property<long>("ActiveComponentId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicamentGroupDetailsId")
                        .HasColumnType("bigint");

                    b.HasKey("ActiveComponentId", "MedicamentGroupDetailsId");

                    b.HasIndex("MedicamentGroupDetailsId");

                    b.ToTable("ActiveComponentMedicamentGroupDetail", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Accident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccidentLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaOfYard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfFirstTreatment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfOccurrence")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeCauseOfInjury1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCauseOfInjury9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("EstimatedDisability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("NatureOfInjury1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureOfInjury8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartOfBody9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RibbonSpecialCase")
                        .HasColumnType("bit");

                    b.Property<long>("SafetyPersonnelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SelectedEmployeeCauseOfInjury1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury11")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury12")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury13")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury14")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedEmployeeCauseOfInjury9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedNatureOfInjury8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody10")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody11")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody12")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedPartOfBody9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedTreatment7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Treatment1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatment7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SafetyPersonnelId");

                    b.ToTable("Accidents", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ActiveComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("AmountOfComponent")
                        .HasColumnType("int");

                    b.Property<long?>("ConcoctionLineId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MedicamentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcoctionLineId");

                    b.HasIndex("MedicamentId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("UomId");

                    b.ToTable("ActiveComponents", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Allergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KdAllergy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "kdAllergy");

                    b.Property<string>("NmAllergy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "nmAllergy");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Allergies", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Awareness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KdSadar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "kdSadar");

                    b.Property<string>("NmSadar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "nmSadar");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Awarenesses", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.AwarenessEduCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AwarenessEduCategories", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.BpjsClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BpjsClassifications", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HealthCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.BuildingLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocationId");

                    b.ToTable("BuildingLocations", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Cities_Name");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ClassType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClassTypes", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VAT")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Zip")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Concoction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ConcoctionQty")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DrugDosageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugFormId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugRouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("MedicamenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MedicamentGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PharmacyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PractitionerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugDosageId");

                    b.HasIndex("DrugFormId");

                    b.HasIndex("DrugRouteId");

                    b.HasIndex("MedicamentGroupId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PractitionerId");

                    b.ToTable("Concoctions", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ConcoctionLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveComponentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AvaliableQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConcoctionId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Dosage")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentDosage")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentUnitOfDosage")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConcoctionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UomId");

                    b.ToTable("ConcoctionLines", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Counter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QueueDisplayId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceKId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("QueueDisplayId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceKId");

                    b.ToTable("Counters", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.CronisCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CronisCategories", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Degrees", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ParentDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DetailQueueDisplay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("KioskQueueId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NumberQueue")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServicekId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DetailQueueDisplays", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CronisCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiseaseCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CronisCategoryId");

                    b.HasIndex("DiseaseCategoryId");

                    b.ToTable("Diagnoses", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DiseaseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("ParentDiseaseCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentDiseaseCategoryId");

                    b.ToTable("DiseaseCategories", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Districts_Name");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("PhysicionId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhysicionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhysicionId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorSchedules", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("DoctorScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UpdateToBpjs")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorScheduleDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DoctorScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorScheduleSlots", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugDosage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Days")
                        .HasColumnType("real");

                    b.Property<long?>("DrugRouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalQtyPerDay")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugRouteId");

                    b.ToTable("DrugDosages", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FormDrugs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DrugRoutes", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EducationProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attendance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EventCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("EventLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTMLContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HTMLMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("EducationPrograms", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Smpt_Debug")
                        .HasColumnType("bit");

                    b.Property<string>("Smtp_Encryption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_Host")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Smtp_Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_Port")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_User")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ById")
                        .HasColumnType("bigint");

                    b.Property<string>("Cc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("DocumentContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("EmailFromId")
                        .HasColumnType("bigint");

                    b.Property<string>("From")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplayTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Schendule")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("To")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ToPartnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TypeEmail")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ById");

                    b.HasIndex("EmailFromId");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InverseRelationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InverseRelationId");

                    b.ToTable("Families", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanCPPT", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DiagnosisId")
                        .HasColumnType("bigint");

                    b.Property<long>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NursingDiagnosesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Planning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subjective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("NursingDiagnosesId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralConsultanCPPTs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abdomen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AbdomenCircumference")
                        .HasColumnType("bigint");

                    b.Property<string>("AlcoholEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlcoholEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AlcoholNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlcoholPositive")
                        .HasColumnType("bit");

                    b.Property<bool?>("AmphetaminesNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AmphetaminesPositive")
                        .HasColumnType("bit");

                    b.Property<bool?>("BenzodiazepinesNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("BenzodiazepinesPositive")
                        .HasColumnType("bit");

                    b.Property<long?>("Bp")
                        .HasColumnType("bigint");

                    b.Property<string>("Cardiovascular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ChestCircumference")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CocaineMetabolitesNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("CocaineMetabolitesPositive")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEximinedbyDoctor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateMedialHistory")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DrugNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugPositive")
                        .HasColumnType("bit");

                    b.Property<string>("ECGAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EarNoseThroat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnteringConfinedSpaceCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExaminedPhysicianId")
                        .HasColumnType("bigint");

                    b.Property<string>("Extremities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eye")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("HR")
                        .HasColumnType("bigint");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAsthmaOrLungAilment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBackPainOrLimitationOfMobility")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClaustrophobia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfinedSpace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefectiveSenseOfSmell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiabetesOrHypoglycemia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEyesightProblem")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFaintingSpellOrSeizureOrEpilepsy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstTimeEnteringConfinedSpace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearingDisorder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeartDiseaseOrDisorder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHighBloodPressure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLowerLimbsDeformity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMeniereDiseaseOrVertigo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNormalRestingECG")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherECG")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherExaminationECG")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSinusBradycardia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSinusRhythm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSinusTachycardia")
                        .HasColumnType("bit");

                    b.Property<string>("LabEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LabResulLabExaminationtId")
                        .HasColumnType("bigint");

                    b.Property<string>("LabResulLabExaminationtIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LabTestId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("MethamphetaminesNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("MethamphetaminesPositive")
                        .HasColumnType("bit");

                    b.Property<string>("Musculoskeletal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neurologic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OpiatesNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("OpiatesPositive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherExaminationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherExaminationRemarkECG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherExaminationTypeECG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PractitionerAlcoholEximinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PractitionerDrugEximinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PractitionerECGId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PractitionerLabEximinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PractitionerRadiologyEximinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Pulse")
                        .HasColumnType("bigint");

                    b.Property<string>("RadiologyEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadiologyEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommended")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendeds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemarksMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Respiratory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespiratoryFitTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RespiratoryRate")
                        .HasColumnType("bigint");

                    b.Property<long?>("SignatureEmployeeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("SignatureEmployeeImagesMedicalHistory")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SignatureEmployeeImagesMedicalHistoryBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SignatureEximinedDoctor")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SignatureEximinedDoctorBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("SpirometryTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool?>("THCCannabinoidMarijuanaNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("THCCannabinoidMarijuanaPositive")
                        .HasColumnType("bit");

                    b.Property<long?>("Temperature")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Wt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("LabResulLabExaminationtId");

                    b.HasIndex("LabTestId");

                    b.HasIndex("PractitionerAlcoholEximinationId");

                    b.HasIndex("PractitionerDrugEximinationId");

                    b.HasIndex("PractitionerECGId");

                    b.HasIndex("PractitionerLabEximinationId");

                    b.HasIndex("PractitionerRadiologyEximinationId");

                    b.ToTable("GeneralConsultanMedicalSupports", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupportLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralConsultanMedicalSupportId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanMedicalSupportId");

                    b.HasIndex("UserById");

                    b.ToTable("GeneralConsultanMedicalSupportLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccidentExaminationBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccidentExaminationDocs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdmissionQueue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AwarenessId")
                        .HasColumnType("bigint");

                    b.Property<double>("BMIIndex")
                        .HasColumnType("float");

                    b.Property<string>("BMIIndexString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMIState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicVisitTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Diastole")
                        .HasColumnType("bigint");

                    b.Property<long>("DiastolicBP")
                        .HasColumnType("bigint");

                    b.Property<long>("E")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDateSickLeave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndMaternityLeave")
                        .HasColumnType("datetime2");

                    b.Property<string>("HPHT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HPL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HR")
                        .HasColumnType("bigint");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("HomeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageToBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InsurancePolicyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAccident")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlertInformationSpecialCase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBatam")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaternity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaternityLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMcu")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutsideBatam")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSarana")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSickLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTelemedicine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaccination")
                        .HasColumnType("bit");

                    b.Property<long?>("KioskQueueId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LILA")
                        .HasColumnType("int");

                    b.Property<string>("LinkMeet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("M")
                        .HasColumnType("bigint");

                    b.Property<string>("Markers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("McuExaminationBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("McuExaminationDocs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedexType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PPKRujukanCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PPKRujukanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PainScale")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PatientNextVisitSchedule")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PratitionerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PregnancyStatusA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PregnancyStatusG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PregnancyStatusP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("RR")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReferDateVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalKhususCategoryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalKhususCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisParentSpesialisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisParentSpesialisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisParentSubSpesialisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisParentSubSpesialisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisSaranaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferVerticalSpesialisSaranaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceAnc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskOfFalling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskOfFallingDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScrinningTriageScale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpO2")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDateSickLeave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartMaternityLeave")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StatusMCU")
                        .HasColumnType("int");

                    b.Property<long>("Systolic")
                        .HasColumnType("bigint");

                    b.Property<long>("Temp")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeMedical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("V")
                        .HasColumnType("bigint");

                    b.Property<long>("WaistCircumference")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<TimeSpan?>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AwarenessId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("KioskQueueId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PratitionerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ServiceId");

                    b.ToTable("GeneralConsultanServices", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanServiceAnc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("HPHT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HPL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LILA")
                        .HasColumnType("int");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PregnancyStatusA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PregnancyStatusG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PregnancyStatusP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("PatientId");

                    b.ToTable("GeneralConsultanServiceAncs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanServiceAncDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BB")
                        .HasColumnType("int");

                    b.Property<string>("Complaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DJJ")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FetusPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GeneralConsultanServiceAncId")
                        .HasColumnType("bigint");

                    b.Property<string>("InspectionInitials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<int>("KU")
                        .HasColumnType("int");

                    b.Property<int>("Suhu")
                        .HasColumnType("int");

                    b.Property<int>("TD")
                        .HasColumnType("int");

                    b.Property<int>("TFU")
                        .HasColumnType("int");

                    b.Property<int>("TT")
                        .HasColumnType("int");

                    b.Property<string>("Trimester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UK")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceAncId");

                    b.ToTable("GeneralConsultanServiceAncDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultantClinicalAssesment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AwarenessId")
                        .HasColumnType("bigint");

                    b.Property<double>("BMIIndex")
                        .HasColumnType("float");

                    b.Property<string>("BMIIndexString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMIState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClinicVisitTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Diastole")
                        .HasColumnType("bigint");

                    b.Property<long>("DiastolicBP")
                        .HasColumnType("bigint");

                    b.Property<long>("E")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("HR")
                        .HasColumnType("bigint");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<long>("M")
                        .HasColumnType("bigint");

                    b.Property<long>("PainScale")
                        .HasColumnType("bigint");

                    b.Property<long>("RR")
                        .HasColumnType("bigint");

                    b.Property<long>("Sistole")
                        .HasColumnType("bigint");

                    b.Property<long>("SpO2")
                        .HasColumnType("bigint");

                    b.Property<long>("Systolic")
                        .HasColumnType("bigint");

                    b.Property<long>("Temp")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("V")
                        .HasColumnType("bigint");

                    b.Property<long>("WaistCircumference")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AwarenessId");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.ToTable("GeneralConsultantClinicalAssesments", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProcedureRoomId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("ProcedureRoomId");

                    b.HasIndex("UserById");

                    b.ToTable("GeneralConsultanServiceLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultationServiceLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("UserById");

                    b.ToTable("GeneralConsultationServiceLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("NumberPurchase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SchenduleDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SourceId");

                    b.ToTable("GoodsReceipts", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceiptDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GoodsReceiptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Qty")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceiptId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("GoodsReceiptDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceiptLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GoodsReceiptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("GoodsReceiptId");

                    b.HasIndex("SourceId");

                    b.HasIndex("UserById");

                    b.ToTable("GoodsReceiptLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefaultData")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GroupMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultData")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsImport")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpdate")
                        .HasColumnType("bit");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuId");

                    b.ToTable("GroupMenus", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("HealthCenters", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Insurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdminFeeMax")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBPJS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBPJSKesehatan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBPJSTK")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("Presentase")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Insurances", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InsurancePolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Aktif")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "aktif");

                    b.Property<bool>("AsuransiCob")
                        .HasColumnType("bit");

                    b.Property<string>("AsuransiKdAsuransi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AsuransiNmAsuransi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AsuransiNoAsuransi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GolDarah")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "golDarah");

                    b.Property<string>("HubunganKeluarga")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hubunganKeluarga");

                    b.Property<long>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<string>("JnsKelasKode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JnsKelasNama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JnsPesertaKode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JnsPesertaNama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KdProviderGigiKdProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KdProviderGigiNmProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KdProviderPstKdProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KdProviderPstNmProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KetAktif")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ketAktif");

                    b.Property<string>("Nama")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "nama");

                    b.Property<string>("NoHP")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "noHP");

                    b.Property<string>("NoKTP")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "noKTP");

                    b.Property<string>("NoKartu")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "noKartu");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PstPrb")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "pstPrb");

                    b.Property<string>("PstProl")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "pstProl");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "sex");

                    b.Property<DateTime?>("TglAkhirBerlaku")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "tglAkhirBerlaku");

                    b.Property<DateTime?>("TglLahir")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "tglLahir");

                    b.Property<DateTime?>("TglMulaiAktif")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "tglMulaiAktif");

                    b.Property<int>("Tunggakan")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "tunggakan");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("NoKartu")
                        .IsUnique()
                        .HasFilter("[NoKartu] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("InsurancePolicies", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("InventoryAdjusments", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusmentDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("InventoryAdjusmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeoriticalQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionStockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAdjusmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockProductId");

                    b.HasIndex("TransactionStockId");

                    b.ToTable("InventoryAdjusmentDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusmentLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InventoryAdjusmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAdjusmentId");

                    b.HasIndex("UserById");

                    b.ToTable("InventoryAdjusmentLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("JobPositions", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Kiosk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BPJS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("StageBpjs")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Kiosks", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("KioskConfigs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClassTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("KioskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QueueNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("QueueStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueueStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceKId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("KioskId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceKId");

                    b.ToTable("KioskQueues", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabResultDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralConsultanMedicalSupportId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LabUomId")
                        .HasColumnType("bigint");

                    b.Property<string>("NormalRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultValueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanMedicalSupportId");

                    b.HasIndex("LabUomId");

                    b.ToTable("LabResultDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SampleTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SampleTypeId");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabTestDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LabTestId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LabUomId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalRangeFemale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalRangeMale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultValueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LabTestId");

                    b.HasIndex("LabUomId");

                    b.ToTable("LabTestDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabUom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LabUoms", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Locations", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ParentLocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentLocationId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Maintenance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Recurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("RepeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("RepeatWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RequestById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ResponsibleById")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isCorrective")
                        .HasColumnType("bit");

                    b.Property<bool?>("isExternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("isInternal")
                        .HasColumnType("bit");

                    b.Property<bool?>("isPreventive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RequestById");

                    b.HasIndex("ResponsibleById");

                    b.ToTable("Maintenances", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MaintenanceProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<long?>("MaintenanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("ProductId");

                    b.ToTable("MaintenanceProducts", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MaintenanceRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MaintenanceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("SequenceProduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceId");

                    b.HasIndex("ProductId");

                    b.ToTable("MaintenanceRecords", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Medicament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveComponentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Cronies")
                        .HasColumnType("bit");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Food")
                        .HasColumnType("bit");

                    b.Property<long?>("FormId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FrequencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("MontlyMax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Pharmacologi")
                        .HasColumnType("bit");

                    b.Property<bool?>("PregnancyWarning")
                        .HasColumnType("bit");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SignaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Weather")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SignaId");

                    b.HasIndex("UomId");

                    b.ToTable("Medicaments", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MedicamentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FormDrugId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsConcoction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhycisianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UoMId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormDrugId");

                    b.HasIndex("PhycisianId");

                    b.HasIndex("UoMId");

                    b.ToTable("MedicamentGroups", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MedicamentGroupDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveComponentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowSubtitation")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Days")
                        .HasColumnType("bigint");

                    b.Property<long?>("Dosage")
                        .HasColumnType("bigint");

                    b.Property<long?>("FrequencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentId")
                        .HasColumnType("bigint");

                    b.Property<string>("MedicaneDosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicaneName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicaneUnitDosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("QtyByDay")
                        .HasColumnType("bigint");

                    b.Property<long?>("SignaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TotalQty")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitOfDosageId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("MedicamentGroupId");

                    b.HasIndex("MedicamentId");

                    b.HasIndex("SignaId");

                    b.HasIndex("UnitOfDosageId");

                    b.ToTable("MedicamentGroupDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultData")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Menus_Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.NursingDiagnoses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NursingDiagnoses", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Occupational", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Occupationals", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ParticipanEdu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EducationProgramId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducationProgramId");

                    b.HasIndex("PatientId");

                    b.ToTable("ParticipanEdus", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientAllergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FarmacologiCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Farmacology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Food")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Weather")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PatientAllergies", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientFamilyRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFamilyRelations", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Pharmacy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFarmacologi")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFood")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeather")
                        .HasColumnType("bit");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PractitionerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionLocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MedicamentGroupId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PractitionerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Pharmacies", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PharmacyLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PharmacyId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.Property<int?>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserById");

                    b.ToTable("PharmacyLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActiveComponentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("Dosage")
                        .HasColumnType("bigint");

                    b.Property<string>("DosageFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DrugDosageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugFormId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugRouteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GivenAmount")
                        .HasColumnType("bigint");

                    b.Property<long?>("MedicamentGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("PharmacyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PriceUnit")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SignaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Stock")
                        .HasColumnType("bigint");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugDosageId");

                    b.HasIndex("DrugFormId");

                    b.HasIndex("DrugRouteId");

                    b.HasIndex("MedicamentGroupId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SignaId");

                    b.ToTable("Prescriptions", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code_Test")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Procedures", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BpjsClassificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HighAlert")
                        .HasColumnType("bit");

                    b.Property<string>("HospitalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOralMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTopicalMedication")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextCalibrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PurchaseUomId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TraceAbility")
                        .HasColumnType("bit");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("YearOfPurchase")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BpjsClassificationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("PurchaseUomId");

                    b.HasIndex("UomId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostingMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InventoryValuation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Provinces_Name");

                    b.ToTable("Provinces", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.QueueDisplay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CounterIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QueueDisplays", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Religions", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ReorderingRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<float>("MaximumQuantity")
                        .HasColumnType("real");

                    b.Property<float>("MinimumQuantity")
                        .HasColumnType("real");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("ReorderingRules", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.SampleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SampleTypes", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsKiosk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaternity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMcu")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTelemedicine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaccination")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Quota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServicedId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.SickLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GeneralConsultansId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeLeave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultansId");

                    b.ToTable("SickLeaves", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Signa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Signas", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specialities", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockOutLines", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CutStock")
                        .HasColumnType("bigint");

                    b.Property<long?>("LinesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionStockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LinesId");

                    b.HasIndex("TransactionStockId");

                    b.ToTable("StockOutLines", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockOutPrescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CutStock")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionStockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("StockProductId");

                    b.HasIndex("TransactionStockId");

                    b.ToTable("StockOutPrescriptions", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Expired")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Qty")
                        .HasColumnType("bigint");

                    b.Property<string>("Referency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusTransaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinanceId");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasFilter("[ProductId] IS NOT NULL");

                    b.HasIndex("SourceId");

                    b.HasIndex("UomId");

                    b.ToTable("StockProducts", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.SystemParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AntreanFKTPBaseURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("KdAplikasi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCareBaseURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCareCodeProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemParameters", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransactionStock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SourcTableId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UomId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Validate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UomId");

                    b.ToTable("TransactionStocks", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<string>("KodeTransaksi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SchenduleDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("StockProductId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("StockRequest")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StockProductId");

                    b.ToTable("TransferStocks", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStockLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DestinationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TransferStockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TransferStockId");

                    b.HasIndex("UserById");

                    b.ToTable("TransferStockLogs", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStockProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QtyStock")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransferStockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferStockId");

                    b.ToTable("TransferStockProduct", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Uom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<float?>("BiggerRatio")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RoundingPrecision")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UomCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UomCategoryId");

                    b.ToTable("Uoms", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.UomCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UomCategories", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BiologicalMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorServiceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomicileAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomicileAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DomicileCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DomicileRtRw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DomicileVillageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileZip")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmergencyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredId")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyMedicalHistoryOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodPatientAllergyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCardAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCardAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IdCardCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdCardRtRw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IdCardVillageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardZip")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployeeRelation")
                        .HasColumnType("bit");

                    b.Property<string>("IsFamilyMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFoodPatientAllergyIds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHr")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMcu")
                        .HasColumnType("bit");

                    b.Property<string>("IsMedicationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNurse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPharmacologyPatientAllergyIds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPharmacy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhysicion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameDomicileAddress")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeatherPatientAllergyIds")
                        .HasColumnType("bit");

                    b.Property<long?>("JobPositionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Legacy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherNIK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoBpjsKs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoBpjsTk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoRm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Npwp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OccupationalId")
                        .HasColumnType("bigint");

                    b.Property<string>("Oracle")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastMedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAllergyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PharmacologyPatientAllergyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicanCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReligionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SAP")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SipExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("SipFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StrExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherPatientAllergyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DomicileCityId");

                    b.HasIndex("DomicileCountryId");

                    b.HasIndex("DomicileDistrictId");

                    b.HasIndex("DomicileProvinceId");

                    b.HasIndex("DomicileVillageId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IdCardCityId");

                    b.HasIndex("IdCardCountryId");

                    b.HasIndex("IdCardDistrictId");

                    b.HasIndex("IdCardProvinceId");

                    b.HasIndex("IdCardVillageId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("Legacy")
                        .IsUnique()
                        .HasFilter("[Legacy] IS NOT NULL");

                    b.HasIndex("NIP")
                        .IsUnique()
                        .HasFilter("[NIP] IS NOT NULL");

                    b.HasIndex("OccupationalId");

                    b.HasIndex("Oracle")
                        .IsUnique()
                        .HasFilter("[Oracle] IS NOT NULL");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SAP")
                        .IsUnique()
                        .HasFilter("[SAP] IS NOT NULL");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.VaccinationPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<long?>("EducatorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextDoseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SalesPersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EducatorId");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("VaccinationPlans", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Village", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Villages_Name");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Villages", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AwarenessEduCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwarenessEduCategoryId");

                    b.ToTable("WellnessPrograms", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WellnessProgramDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("WellnessProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("WellnessProgramDetailId");

                    b.HasIndex("WellnessProgramId");

                    b.ToTable("WellnessProgramAttendances", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WellnessProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WellnessProgramId");

                    b.ToTable("WellnessProgramDetails", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramParticipant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WellnessProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("WellnessProgramId");

                    b.ToTable("wellnessProgramParticipants", (string)null);
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WellnessProgramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WellnessProgramId");

                    b.ToTable("WellnessProgramSessions", (string)null);
                });

            modelBuilder.Entity("ActiveComponentMedicamentGroupDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.ActiveComponent", null)
                        .WithMany()
                        .HasForeignKey("ActiveComponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.MedicamentGroupDetail", null)
                        .WithMany()
                        .HasForeignKey("MedicamentGroupDetailsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Accident", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("Accidents")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "SafetyPersonnel")
                        .WithMany()
                        .HasForeignKey("SafetyPersonnelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("Project");

                    b.Navigation("SafetyPersonnel");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ActiveComponent", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.ConcoctionLine", null)
                        .WithMany("ActiveComponent")
                        .HasForeignKey("ConcoctionLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Medicament", null)
                        .WithMany("ActiveComponent")
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Prescription", null)
                        .WithMany("ActiveComponent")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany("ActiveComponents")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("Buildings")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.BuildingLocation", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Building", "Building")
                        .WithMany("BuildingLocations")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany("BuildingLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Company", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Companies")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Concoction", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugDosage", "DrugDosage")
                        .WithMany()
                        .HasForeignKey("DrugDosageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DrugForm", "DrugForm")
                        .WithMany()
                        .HasForeignKey("DrugFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DrugRoute", "DrugRoute")
                        .WithMany()
                        .HasForeignKey("DrugRouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.MedicamentGroup", "MedicamentGroup")
                        .WithMany()
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DrugDosage");

                    b.Navigation("DrugForm");

                    b.Navigation("DrugRoute");

                    b.Navigation("MedicamentGroup");

                    b.Navigation("Pharmacy");

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ConcoctionLine", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Concoction", "Concoction")
                        .WithMany()
                        .HasForeignKey("ConcoctionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Concoction");

                    b.Navigation("Product");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Counter", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.QueueDisplay", null)
                        .WithMany("Counter")
                        .HasForeignKey("QueueDisplayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "ServiceK")
                        .WithMany()
                        .HasForeignKey("ServiceKId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Physician");

                    b.Navigation("Service");

                    b.Navigation("ServiceK");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Department", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Diagnosis", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.CronisCategory", "CronisCategory")
                        .WithMany()
                        .HasForeignKey("CronisCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DiseaseCategory", "DiseaseCategory")
                        .WithMany()
                        .HasForeignKey("DiseaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CronisCategory");

                    b.Navigation("DiseaseCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DiseaseCategory", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DiseaseCategory", "ParentDiseaseCategory")
                        .WithMany()
                        .HasForeignKey("ParentDiseaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDiseaseCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.District", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Physicion")
                        .WithMany()
                        .HasForeignKey("PhysicionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Physicion");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleSlot", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Physician");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugDosage", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugRoute", "DrugRoute")
                        .WithMany("DrugDosages")
                        .HasForeignKey("DrugRouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DrugRoute");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EducationProgram", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.AwarenessEduCategory", "EventCategory")
                        .WithMany()
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "By")
                        .WithMany()
                        .HasForeignKey("ById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.EmailSetting", "EmailFrom")
                        .WithMany()
                        .HasForeignKey("EmailFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("By");

                    b.Navigation("EmailFrom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Family", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Family", "InverseRelation")
                        .WithMany()
                        .HasForeignKey("InverseRelationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InverseRelation");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanCPPT", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultanCPPTs")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.NursingDiagnoses", "NursingDiagnoses")
                        .WithMany()
                        .HasForeignKey("NursingDiagnosesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Diagnosis");

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("NursingDiagnoses");

                    b.Navigation("User");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultanMedicalSupports")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("McDermott.Domain.Entities.LabTestDetail", "LabResulLabExaminationt")
                        .WithMany()
                        .HasForeignKey("LabResulLabExaminationtId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.LabTest", "LabTest")
                        .WithMany("GeneralConsultanMedicalSupports")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.User", "PractitionerAlcoholEximination")
                        .WithMany()
                        .HasForeignKey("PractitionerAlcoholEximinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "PractitionerDrugEximination")
                        .WithMany()
                        .HasForeignKey("PractitionerDrugEximinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "PractitionerECG")
                        .WithMany()
                        .HasForeignKey("PractitionerECGId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "PractitionerLabEximination")
                        .WithMany()
                        .HasForeignKey("PractitionerLabEximinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "PractitionerRadiologyEximination")
                        .WithMany()
                        .HasForeignKey("PractitionerRadiologyEximinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("LabResulLabExaminationt");

                    b.Navigation("LabTest");

                    b.Navigation("PractitionerAlcoholEximination");

                    b.Navigation("PractitionerDrugEximination");

                    b.Navigation("PractitionerECG");

                    b.Navigation("PractitionerLabEximination");

                    b.Navigation("PractitionerRadiologyEximination");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupportLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", "GeneralConsultanMedicalSupport")
                        .WithMany()
                        .HasForeignKey("GeneralConsultanMedicalSupportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneralConsultanMedicalSupport");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Awareness", "AwarenessDto")
                        .WithMany()
                        .HasForeignKey("AwarenessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.KioskQueue", "KioskQueue")
                        .WithMany()
                        .HasForeignKey("KioskQueueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Pratitioner")
                        .WithMany()
                        .HasForeignKey("PratitionerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwarenessDto");

                    b.Navigation("InsurancePolicy");

                    b.Navigation("KioskQueue");

                    b.Navigation("Location");

                    b.Navigation("Patient");

                    b.Navigation("Pratitioner");

                    b.Navigation("Project");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanServiceAnc", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany()
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanServiceAncDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanServiceAnc", "GeneralConsultanServiceAnc")
                        .WithMany()
                        .HasForeignKey("GeneralConsultanServiceAncId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneralConsultanServiceAnc");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultantClinicalAssesment", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Awareness", "Awareness")
                        .WithMany("GeneralConsultantClinicalAssesments")
                        .HasForeignKey("AwarenessId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultantClinicalAssesments")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Awareness");

                    b.Navigation("GeneralConsultanService");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultationLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultationLogs")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", "ProcedureRoom")
                        .WithMany()
                        .HasForeignKey("ProcedureRoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("ProcedureRoom");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultationServiceLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany()
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceipt", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destination");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceiptDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany("goodsReceiptDetails")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany("GoodsReceiptDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.StockProduct", "Stock")
                        .WithMany("GoodsReceiptDetail")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GoodsReceipt");

                    b.Navigation("Product");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceiptLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.GoodsReceipt", "GoodsReceipt")
                        .WithMany()
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destination");

                    b.Navigation("GoodsReceipt");

                    b.Navigation("Source");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GroupMenu", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Group", "Group")
                        .WithMany("GroupMenus")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Menu", "Menu")
                        .WithMany("GroupMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("HealthCenters")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InsurancePolicy", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusment", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusmentDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.InventoryAdjusment", "InventoryAdjusment")
                        .WithMany("InventoryAdjusmentDetails")
                        .HasForeignKey("InventoryAdjusmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.StockProduct", "StockProduct")
                        .WithMany()
                        .HasForeignKey("StockProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.TransactionStock", "TransactionStock")
                        .WithMany()
                        .HasForeignKey("TransactionStockId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryAdjusment");

                    b.Navigation("Product");

                    b.Navigation("StockProduct");

                    b.Navigation("TransactionStock");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusmentLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.InventoryAdjusment", "InventoryAdjusment")
                        .WithMany()
                        .HasForeignKey("InventoryAdjusmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryAdjusment");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Kiosk", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("Physician");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskQueue", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.ClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Kiosk", "Kiosk")
                        .WithMany()
                        .HasForeignKey("KioskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "ServiceK")
                        .WithMany()
                        .HasForeignKey("ServiceKId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClassType");

                    b.Navigation("Kiosk");

                    b.Navigation("Service");

                    b.Navigation("ServiceK");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabResultDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", "GeneralConsultanMedicalSupport")
                        .WithMany("LabResultDetails")
                        .HasForeignKey("GeneralConsultanMedicalSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.LabUom", "LabUom")
                        .WithMany()
                        .HasForeignKey("LabUomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GeneralConsultanMedicalSupport");

                    b.Navigation("LabUom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabTest", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.SampleType", "SampleType")
                        .WithMany("LabTests")
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SampleType");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabTestDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.LabTest", "LabTest")
                        .WithMany("LabTestDetails")
                        .HasForeignKey("LabTestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("McDermott.Domain.Entities.LabUom", "LabUom")
                        .WithMany()
                        .HasForeignKey("LabUomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LabTest");

                    b.Navigation("LabUom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Locations", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.Locations", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ParentLocation");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "RequestBy")
                        .WithMany()
                        .HasForeignKey("RequestById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "ResponsibleBy")
                        .WithMany()
                        .HasForeignKey("ResponsibleById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("RequestBy");

                    b.Navigation("ResponsibleBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MaintenanceProduct", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Maintenance");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MaintenanceRecord", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Maintenance", "Maintenance")
                        .WithMany()
                        .HasForeignKey("MaintenanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Maintenance");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Medicament", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugForm", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DrugDosage", "Frequency")
                        .WithMany("Medicaments")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany("Medicaments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.DrugRoute", "Route")
                        .WithMany("Medicaments")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.Signa", null)
                        .WithMany("Medicaments")
                        .HasForeignKey("SignaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany("Medicaments")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Form");

                    b.Navigation("Frequency");

                    b.Navigation("Product");

                    b.Navigation("Route");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MedicamentGroup", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugForm", "FormDrug")
                        .WithMany()
                        .HasForeignKey("FormDrugId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Phycisian")
                        .WithMany()
                        .HasForeignKey("PhycisianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "UoM")
                        .WithMany()
                        .HasForeignKey("UoMId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FormDrug");

                    b.Navigation("Phycisian");

                    b.Navigation("UoM");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.MedicamentGroupDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugDosage", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.MedicamentGroup", "MedicamentGroup")
                        .WithMany()
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Medicament")
                        .WithMany()
                        .HasForeignKey("MedicamentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Signa", "Signa")
                        .WithMany()
                        .HasForeignKey("SignaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "UnitOfDosage")
                        .WithMany()
                        .HasForeignKey("UnitOfDosageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Frequency");

                    b.Navigation("Medicament");

                    b.Navigation("MedicamentGroup");

                    b.Navigation("Signa");

                    b.Navigation("UnitOfDosage");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Menu", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ParticipanEdu", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.EducationProgram", "EducationProgram")
                        .WithMany()
                        .HasForeignKey("EducationProgramId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EducationProgram");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientAllergy", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "User")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientFamilyRelation", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("FamilyMember");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Pharmacy", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.MedicamentGroup", "MedicamentGroup")
                        .WithMany()
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Practitioner")
                        .WithMany()
                        .HasForeignKey("PractitionerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("MedicamentGroup");

                    b.Navigation("Patient");

                    b.Navigation("Practitioner");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PharmacyLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Pharmacy");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DrugDosage", "DrugDosage")
                        .WithMany()
                        .HasForeignKey("DrugDosageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DrugForm", "DrugForm")
                        .WithMany()
                        .HasForeignKey("DrugFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DrugRoute", "DrugRoute")
                        .WithMany()
                        .HasForeignKey("DrugRouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.MedicamentGroup", "MedicamentGroup")
                        .WithMany()
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Pharmacy", "Pharmacy")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Signa", "Signa")
                        .WithMany()
                        .HasForeignKey("SignaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DrugDosage");

                    b.Navigation("DrugForm");

                    b.Navigation("DrugRoute");

                    b.Navigation("MedicamentGroup");

                    b.Navigation("Pharmacy");

                    b.Navigation("Product");

                    b.Navigation("Signa");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Product", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.BpjsClassification", "BpjsClassification")
                        .WithMany()
                        .HasForeignKey("BpjsClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "PurchaseUom")
                        .WithMany()
                        .HasForeignKey("PurchaseUomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BpjsClassification");

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");

                    b.Navigation("PurchaseUom");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ReorderingRule", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany("ReorderingRules")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany("ReorderingRules")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Service", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Service", "Serviced")
                        .WithMany()
                        .HasForeignKey("ServicedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Serviced");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.SickLeave", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultans")
                        .WithMany("SickLeaves")
                        .HasForeignKey("GeneralConsultansId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GeneralConsultans");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockOutLines", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.ConcoctionLine", "Lines")
                        .WithMany()
                        .HasForeignKey("LinesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.TransactionStock", "TransactionStock")
                        .WithMany("StockOutLines")
                        .HasForeignKey("TransactionStockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Lines");

                    b.Navigation("TransactionStock");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockOutPrescription", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Prescription", "Prescription")
                        .WithMany("StockOutPrescription")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.StockProduct", null)
                        .WithMany("StockOutPrescriptions")
                        .HasForeignKey("StockProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.TransactionStock", "TransactionStock")
                        .WithMany("StockOutPrescription")
                        .HasForeignKey("TransactionStockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Prescription");

                    b.Navigation("TransactionStock");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockProduct", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Destinance")
                        .WithMany()
                        .HasForeignKey("DestinanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithOne("StockProduct")
                        .HasForeignKey("McDermott.Domain.Entities.StockProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destinance");

                    b.Navigation("Product");

                    b.Navigation("Source");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransactionStock", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStock", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Locations", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.StockProduct", null)
                        .WithMany("TransactionStocks")
                        .HasForeignKey("StockProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destination");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStockLog", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Locations", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("McDermott.Domain.Entities.Locations", "Source")
                        .WithMany("TransferStockLog")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.TransferStock", "TransferStock")
                        .WithMany("TransferStockLog")
                        .HasForeignKey("TransferStockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("McDermott.Domain.Entities.User", "UserBy")
                        .WithMany()
                        .HasForeignKey("UserById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Destination");

                    b.Navigation("Source");

                    b.Navigation("TransferStock");

                    b.Navigation("UserBy");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStockProduct", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.TransferStock", "TransferStock")
                        .WithMany("TransferStockProduct")
                        .HasForeignKey("TransferStockId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("TransferStock");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Uom", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.UomCategory", "UomCategory")
                        .WithMany("Uoms")
                        .HasForeignKey("UomCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UomCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.User", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Degree", "Degree")
                        .WithMany("Users")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("McDermott.Domain.Entities.City", "DomicileCity")
                        .WithMany()
                        .HasForeignKey("DomicileCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "DomicileCountry")
                        .WithMany()
                        .HasForeignKey("DomicileCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.District", "DomicileDistrict")
                        .WithMany()
                        .HasForeignKey("DomicileDistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "DomicileProvince")
                        .WithMany()
                        .HasForeignKey("DomicileProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Village", "DomicileVillage")
                        .WithMany()
                        .HasForeignKey("DomicileVillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.EmailTemplate", null)
                        .WithMany("ToPartner")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.City", "IdCardCity")
                        .WithMany()
                        .HasForeignKey("IdCardCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "IdCardCountry")
                        .WithMany()
                        .HasForeignKey("IdCardCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.District", "IdCardDistrict")
                        .WithMany()
                        .HasForeignKey("IdCardDistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "IdCardProvince")
                        .WithMany()
                        .HasForeignKey("IdCardProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Village", "IdCardVillage")
                        .WithMany()
                        .HasForeignKey("IdCardVillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("Users")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Occupational", "Occupational")
                        .WithMany()
                        .HasForeignKey("OccupationalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("DomicileCity");

                    b.Navigation("DomicileCountry");

                    b.Navigation("DomicileDistrict");

                    b.Navigation("DomicileProvince");

                    b.Navigation("DomicileVillage");

                    b.Navigation("Group");

                    b.Navigation("IdCardCity");

                    b.Navigation("IdCardCountry");

                    b.Navigation("IdCardDistrict");

                    b.Navigation("IdCardProvince");

                    b.Navigation("IdCardVillage");

                    b.Navigation("JobPosition");

                    b.Navigation("Occupational");

                    b.Navigation("Religion");

                    b.Navigation("Speciality");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.VaccinationPlan", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Educator")
                        .WithMany()
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany()
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Educator");

                    b.Navigation("GeneralConsultanService");

                    b.Navigation("Patient");

                    b.Navigation("Physician");

                    b.Navigation("Product");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Village", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Villages")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgram", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.AwarenessEduCategory", "AwarenessEduCategory")
                        .WithMany()
                        .HasForeignKey("AwarenessEduCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AwarenessEduCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramAttendance", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.WellnessProgramDetail", "WellnessProgramDetail")
                        .WithMany()
                        .HasForeignKey("WellnessProgramDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.WellnessProgram", "WellnessProgram")
                        .WithMany()
                        .HasForeignKey("WellnessProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("WellnessProgram");

                    b.Navigation("WellnessProgramDetail");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.WellnessProgram", "WellnessProgram")
                        .WithMany("WellnessProgramDetails")
                        .HasForeignKey("WellnessProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WellnessProgram");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramParticipant", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.WellnessProgram", "WellnessProgram")
                        .WithMany()
                        .HasForeignKey("WellnessProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("WellnessProgram");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgramSession", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.WellnessProgram", "WellnessProgram")
                        .WithMany()
                        .HasForeignKey("WellnessProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WellnessProgram");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Awareness", b =>
                {
                    b.Navigation("GeneralConsultantClinicalAssesments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.Navigation("BuildingLocations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Districts");

                    b.Navigation("HealthCenters");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Company", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("ReorderingRules");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ConcoctionLine", b =>
                {
                    b.Navigation("ActiveComponent");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Degree", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugDosage", b =>
                {
                    b.Navigation("Medicaments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DrugRoute", b =>
                {
                    b.Navigation("DrugDosages");

                    b.Navigation("Medicaments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.Navigation("ToPartner");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", b =>
                {
                    b.Navigation("LabResultDetails");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("GeneralConsultanCPPTs");

                    b.Navigation("GeneralConsultanMedicalSupports");

                    b.Navigation("GeneralConsultantClinicalAssesments");

                    b.Navigation("GeneralConsultationLogs");

                    b.Navigation("SickLeaves");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GoodsReceipt", b =>
                {
                    b.Navigation("goodsReceiptDetails");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMenus");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InventoryAdjusment", b =>
                {
                    b.Navigation("InventoryAdjusmentDetails");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.LabTest", b =>
                {
                    b.Navigation("GeneralConsultanMedicalSupports");

                    b.Navigation("LabTestDetails");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Locations", b =>
                {
                    b.Navigation("BuildingLocations");

                    b.Navigation("ReorderingRules");

                    b.Navigation("TransferStockLog");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Medicament", b =>
                {
                    b.Navigation("ActiveComponent");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Menu", b =>
                {
                    b.Navigation("GroupMenus");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Pharmacy", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Prescription", b =>
                {
                    b.Navigation("ActiveComponent");

                    b.Navigation("StockOutPrescription");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Product", b =>
                {
                    b.Navigation("GoodsReceiptDetail");

                    b.Navigation("Medicaments");

                    b.Navigation("StockProduct");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Companies");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.QueueDisplay", b =>
                {
                    b.Navigation("Counter");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.SampleType", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Signa", b =>
                {
                    b.Navigation("Medicaments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.StockProduct", b =>
                {
                    b.Navigation("GoodsReceiptDetail");

                    b.Navigation("StockOutPrescriptions");

                    b.Navigation("TransactionStocks");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransactionStock", b =>
                {
                    b.Navigation("StockOutLines");

                    b.Navigation("StockOutPrescription");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.TransferStock", b =>
                {
                    b.Navigation("TransferStockLog");

                    b.Navigation("TransferStockProduct");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Uom", b =>
                {
                    b.Navigation("ActiveComponents");

                    b.Navigation("Medicaments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.UomCategory", b =>
                {
                    b.Navigation("Uoms");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.User", b =>
                {
                    b.Navigation("PatientAllergies");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.WellnessProgram", b =>
                {
                    b.Navigation("WellnessProgramDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
