// <auto-generated />
using System;
using McDermott.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace McDermott.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240308100108_AddClassTypeIdd")]
    partial class AddClassTypeIdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("HealthCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthCenterId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.BuildingLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocationId");

                    b.ToTable("BuildingLocations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.ClassType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClassTypes");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VAT")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Zip")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Counter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QueueDisplayId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceKId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("QueueDisplayId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceKId");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.CronisCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CronisCategories");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Degree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ParentDepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DetailQueueDisplay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CounterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("QueueDisplayId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CounterId");

                    b.HasIndex("QueueDisplayId");

                    b.ToTable("DetailQueueDisplays");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CronisCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiseaseCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CronisCategoryId");

                    b.HasIndex("DiseaseCategoryId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DiseaseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ParentCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DiseaseCategories");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhysicionIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("DoctorScheduleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Quota")
                        .HasColumnType("bigint");

                    b.Property<bool>("UpdateToBpjs")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorScheduleId");

                    b.ToTable("DoctorScheduleDetails");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorScheduleId");

                    b.HasIndex("PhysicianId");

                    b.ToTable("DoctorScheduleSlots");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Smpt_Debug")
                        .HasColumnType("bit");

                    b.Property<string>("Smtp_Encryption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_Host")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Smtp_Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_Port")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smtp_User")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ById")
                        .HasColumnType("bigint");

                    b.Property<string>("Cc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplayTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Schendule")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("To")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("ToPartnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ById");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Family", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ChildRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanCPPT", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.ToTable("GeneralConsultanCPPTs");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AlcoholEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlcoholEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AlcoholNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlcoholPositive")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DrugNegative")
                        .HasColumnType("bit");

                    b.Property<bool?>("DrugPositive")
                        .HasColumnType("bit");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("LabEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadiologyEximinationAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RadiologyEximinationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.ToTable("GeneralConsultanMedicalSupports");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdmissionQueue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ClassTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDateSickLeave")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InsurancePolicyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAlertInformationSpecialCase")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSickLeave")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoRM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Payment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PratitionerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduleTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("StagingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDateSickLeave")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeMedical")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("WorkFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("WorkTo")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsurancePolicyId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PratitionerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("GeneralConsultanServices");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultantClinicalAssesment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BMIIndex")
                        .HasColumnType("float");

                    b.Property<string>("BMIIndexString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BMIState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiastolicBP")
                        .HasColumnType("bigint");

                    b.Property<long>("E")
                        .HasColumnType("bigint");

                    b.Property<long?>("GeneralConsultanServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("HR")
                        .HasColumnType("bigint");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<long>("M")
                        .HasColumnType("bigint");

                    b.Property<long>("RBS")
                        .HasColumnType("bigint");

                    b.Property<long>("RR")
                        .HasColumnType("bigint");

                    b.Property<long>("SpO2")
                        .HasColumnType("bigint");

                    b.Property<long>("Systolic")
                        .HasColumnType("bigint");

                    b.Property<long>("Temp")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("V")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GeneralConsultanServiceId");

                    b.ToTable("GeneralConsultantClinicalAssesments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GroupMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Create")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Delete")
                        .HasColumnType("bit");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Import")
                        .HasColumnType("bit");

                    b.Property<long>("MenuId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Read")
                        .HasColumnType("bit");

                    b.Property<bool?>("Update")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuId");

                    b.ToTable("GroupMenus");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("HealthCenters");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Insurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminFee")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdminFeeMax")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBPJS")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("Presentase")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InsurancePolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AgeAtTimeOfService")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CardPrintDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Class")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CurrentAge")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosa")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DinSos")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Doctor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("InsuranceId")
                        .HasColumnType("bigint");

                    b.Property<string>("InsuranceName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InsuranceNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicalRecordNo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NoCard")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NoId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NoSKTM")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NursingClass")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParticipantName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParticipantStatus")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poly")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Prolanis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PronalisPBR")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServicePPKCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServicePPKName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceParticipant")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sex")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime?>("TatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TmtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("UserId");

                    b.ToTable("InsurancePolicies");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Kiosk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BPJS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PhysicianId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("StageBpjs")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Kiosks");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("KioskConfigs");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("KioskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NoQueue")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceKId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KioskId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceKId");

                    b.ToTable("KioskQueues");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ParentMenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.NursingDiagnoses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NursingDiagnoses");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Occupational", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Occupationals");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientAllergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Farmacology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Food")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Weather")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientFamilyRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFamilyRelations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code_Test")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.QueueDisplay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("QueueDisplays");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Religion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsKiosk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Quota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServicedId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServicedId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BiologicalMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DegreeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorServiceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomicileAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomicileAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DomicileCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("DomicileRtRw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DomicileVillageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DomicileZip")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmailTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmergencyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiredId")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("HomePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCardAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCardAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IdCardCityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardCountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("IdCardRtRw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IdCardVillageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCardZip")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployeeRelation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNurse")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPhysicion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUser")
                        .HasColumnType("bit");

                    b.Property<long?>("JobPositionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Legacy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherNIK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoBpjsKs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoBpjsTk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoRm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Npwp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oracle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReligionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SipExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("SipFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SipNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StrExp")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DomicileCityId");

                    b.HasIndex("DomicileCountryId");

                    b.HasIndex("DomicileDistrictId");

                    b.HasIndex("DomicileProvinceId");

                    b.HasIndex("DomicileVillageId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("GenderId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IdCardCityId");

                    b.HasIndex("IdCardCountryId");

                    b.HasIndex("IdCardDistrictId");

                    b.HasIndex("IdCardProvinceId");

                    b.HasIndex("IdCardVillageId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Village", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.HealthCenter", "HealthCenter")
                        .WithMany("Buildings")
                        .HasForeignKey("HealthCenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HealthCenter");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.BuildingLocation", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Building", "Building")
                        .WithMany("BuildingLocations")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Location", "Location")
                        .WithMany("BuildingLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Company", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Companies")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Counter", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.QueueDisplay", null)
                        .WithMany("Counter")
                        .HasForeignKey("QueueDisplayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "ServiceK")
                        .WithMany()
                        .HasForeignKey("ServiceKId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Physician");

                    b.Navigation("Service");

                    b.Navigation("ServiceK");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Department", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Department", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DetailQueueDisplay", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Counter", "Counter")
                        .WithMany()
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.QueueDisplay", "QueueDisplay")
                        .WithMany()
                        .HasForeignKey("QueueDisplayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Counter");

                    b.Navigation("QueueDisplay");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Diagnosis", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.CronisCategory", "CronisKategory")
                        .WithMany()
                        .HasForeignKey("CronisCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.DiseaseCategory", "DiseaseCategory")
                        .WithMany()
                        .HasForeignKey("DiseaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CronisKategory");

                    b.Navigation("DiseaseCategory");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.District", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleDetail", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorSchedule");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.DoctorScheduleSlot", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.DoctorSchedule", "DoctorSchedule")
                        .WithMany()
                        .HasForeignKey("DoctorScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DoctorSchedule");

                    b.Navigation("Physician");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "By")
                        .WithMany()
                        .HasForeignKey("ById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("By");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanCPPT", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultanCPPTs")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralConsultanService");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanMedicalSupport", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultanMedicalSupports")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GeneralConsultanService");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.ClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("InsurancePolicyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Pratitioner")
                        .WithMany()
                        .HasForeignKey("PratitionerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClassType");

                    b.Navigation("Insurance");

                    b.Navigation("InsurancePolicy");

                    b.Navigation("Patient");

                    b.Navigation("Pratitioner");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultantClinicalAssesment", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.GeneralConsultanService", "GeneralConsultanService")
                        .WithMany("GeneralConsultantClinicalAssesments")
                        .HasForeignKey("GeneralConsultanServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GeneralConsultanService");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GroupMenu", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Menu", "Menu")
                        .WithMany("GroupMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("HealthCenters")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.InsurancePolicy", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Kiosk", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("Physician");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.KioskQueue", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Kiosk", "Kiosk")
                        .WithMany()
                        .HasForeignKey("KioskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Service", "ServiceK")
                        .WithMany()
                        .HasForeignKey("ServiceKId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Kiosk");

                    b.Navigation("Service");

                    b.Navigation("ServiceK");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientAllergy", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.PatientFamilyRelation", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.User", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("FamilyMember");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Service", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Service", "Serviced")
                        .WithMany()
                        .HasForeignKey("ServicedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Serviced");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.User", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.Degree", "Degree")
                        .WithMany("Users")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("McDermott.Domain.Entities.City", "DomicileCity")
                        .WithMany()
                        .HasForeignKey("DomicileCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "DomicileCountry")
                        .WithMany()
                        .HasForeignKey("DomicileCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.District", "DomicileDistrict")
                        .WithMany()
                        .HasForeignKey("DomicileDistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "DomicileProvince")
                        .WithMany()
                        .HasForeignKey("DomicileProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Village", "DomicileVillage")
                        .WithMany()
                        .HasForeignKey("DomicileVillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.EmailTemplate", null)
                        .WithMany("ToPartner")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.City", "IdCardCity")
                        .WithMany()
                        .HasForeignKey("IdCardCityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Country", "IdCardCountry")
                        .WithMany()
                        .HasForeignKey("IdCardCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.District", "IdCardDistrict")
                        .WithMany()
                        .HasForeignKey("IdCardDistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Province", "IdCardProvince")
                        .WithMany()
                        .HasForeignKey("IdCardProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Village", "IdCardVillage")
                        .WithMany()
                        .HasForeignKey("IdCardVillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("Users")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("McDermott.Domain.Entities.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Degree");

                    b.Navigation("Department");

                    b.Navigation("DomicileCity");

                    b.Navigation("DomicileCountry");

                    b.Navigation("DomicileDistrict");

                    b.Navigation("DomicileProvince");

                    b.Navigation("DomicileVillage");

                    b.Navigation("Gender");

                    b.Navigation("Group");

                    b.Navigation("IdCardCity");

                    b.Navigation("IdCardCountry");

                    b.Navigation("IdCardDistrict");

                    b.Navigation("IdCardProvince");

                    b.Navigation("IdCardVillage");

                    b.Navigation("JobPosition");

                    b.Navigation("Religion");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Village", b =>
                {
                    b.HasOne("McDermott.Domain.Entities.City", "City")
                        .WithMany("Villages")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("McDermott.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Building", b =>
                {
                    b.Navigation("BuildingLocations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.City", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Districts");

                    b.Navigation("HealthCenters");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Degree", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.EmailTemplate", b =>
                {
                    b.Navigation("ToPartner");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.GeneralConsultanService", b =>
                {
                    b.Navigation("GeneralConsultanCPPTs");

                    b.Navigation("GeneralConsultanMedicalSupports");

                    b.Navigation("GeneralConsultantClinicalAssesments");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.HealthCenter", b =>
                {
                    b.Navigation("Buildings");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.JobPosition", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Location", b =>
                {
                    b.Navigation("BuildingLocations");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Menu", b =>
                {
                    b.Navigation("GroupMenus");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.Province", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Companies");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("McDermott.Domain.Entities.QueueDisplay", b =>
                {
                    b.Navigation("Counter");
                });
#pragma warning restore 612, 618
        }
    }
}
