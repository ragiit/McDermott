========================== Untuk Halaman Razor ==========================

@page "/patient/insurance-policy"
@rendermode InteractiveServer

<PageTitle>McDermott - Master Data Insurance Policy</PageTitle>

@if (IsAccess)
{
    <div class="wrapper">
        <McDermott.Web.Components.Layout.BaseContentHeaderLayout Title="Insurance Policy" />

        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-body">
                                <InputFile id="fileInput" style="display:none" OnChange="@ImportExcelFile" accept=".xlsx" multiple="false"></InputFile>

                                <DxLoadingPanel @bind-Visible="PanelVisible"
                                                IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                                IsContentBlocked="true"
                                                ApplyBackgroundShading="true"
                                                IndicatorAreaVisible="false"
                                                Text="Fetching Data...">
                                    <DxGrid @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
                                            Data="Countries"
                                            PageSize="10"
                                            @bind-SelectedDataItems="@SelectedDataItems"
                                            FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                            KeyFieldName="Id"
                                            CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                                            EditModelSaving="OnSave"
                                            DataItemDeleting="OnDelete"
                                            AllowSelectRowByClick="true"
                                            EditMode="GridEditMode.PopupEditForm"
                                            PopupEditFormCssClass="pw-800"
                                            PagerPosition="GridPagerPosition.Bottom"
                                            PageSizeSelectorVisible="true"
                                            PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                                            PageSizeSelectorAllRowsItemVisible="true"
                                            PagerSwitchToInputBoxButtonCount="10"
                                            FocusedRowEnabled="true"
                                            PagerVisibleNumericButtonCount="10"
                                            FocusedRowChanged="Grid_FocusedRowChanged"
                                            ShowGroupPanel="true"
                                            AutoExpandAllGroupRows="true"
                                            ShowFilterRow="true"
                                            ShowSearchBox="true"
                                            SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                                            KeyboardNavigationEnabled="true">
                                        <ToolbarTemplate>
                                            <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                                <DxToolbarItem Visible="@UserAccessCRUID.Create" Text="New" Click="NewItem_Click" IconCssClass="fa-solid fa-plus" />
                                                <DxToolbarItem Visible="@UserAccessCRUID.Update" Text="Edit" Click="EditItem_Click" IconCssClass="fa-solid fa-pen-to-square" Enabled="SelectedDataItems.Count > 0 && Countries.Count > 0" />
                                                <DxToolbarItem Visible="@UserAccessCRUID.Delete" Text="Delete" Click="DeleteItem_Click" IconCssClass="fa-solid fa-trash" Enabled="SelectedDataItems.Count > 0 && Countries.Count > 0" />
                                                <DxToolbarItem BeginGroup="true" Text="Refresh" Click="Refresh_Click" IconCssClass="fa-solid fa-arrows-rotate" />
                                                <DxToolbarItem Text="Column Chooser" Click="ColumnChooserButton_Click" BeginGroup="true" IconCssClass="fa-solid fa-table-columns" />
                                                <DxToolbarItem Text="Export" BeginGroup="true" IconCssClass="fa-solid fa-file-export">
                                                    <Items>
                                                        <DxToolbarItem Text="To CSV" Click="ExportCsvItem_Click" />
                                                        <DxToolbarItem Text="To XLSX" Click="ExportXlsxItem_Click" />
                                                        <DxToolbarItem Text="To XLS" Click="ExportXlsItem_Click" />
                                                    </Items>
                                                </DxToolbarItem>
                                                <DxToolbarItem Visible="@UserAccessCRUID.Import" Click="@ImportFile" Text="Import" IconCssClass="fa-solid fa-file-import" />
                                            </DxToolbar>
                                        </ToolbarTemplate>
                                        <Columns>
                                            <DxGridSelectionColumn Width="15px" />
                                            <DxGridDataColumn FieldName="Name" SortIndex="0" />
                                            <DxGridDataColumn FieldName="Code" />
                                        </Columns>
                                        <EditFormTemplate Context="EditFormContext">
                                            @{
                                                var a = (CityDto)EditFormContext.EditModel;
                                            }
                                            <DxFormLayout CssClass="w-100">
                                                @* EditText *@
                                                <DxFormLayoutItem CaptionCssClass="required-caption" Caption="Name:" ColSpanMd="12">
                                                    <div class="pop-warning">
                                                        @EditFormContext.GetEditor("Name")
                                                    </div>
                                                </DxFormLayoutItem>


                                                <DxFormLayoutItem Caption="Name:">
                                                    <DxTextBox @bind-Text="@UserForm.Name" 
                                                        ShowValidationIcon="true" 
                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" 
                                                        NullText="Name" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem Caption="Practitioner:">
                                                    <DxCheckBox @bind-Checked="@UserForm.IsDoctor" />
                                                </DxFormLayoutItem>


                                                @* ComboBox *@
                                                <DxFormLayoutItem Caption="Province:" ColSpanMd="12">
                                                    <DxComboBox Data="@Provinces"
                                                                NullText="Select Province..."
                                                                @bind-Value="@a.ProvinceId"
                                                                TextFieldName="Name"
                                                                ValueFieldName="Id">
                                                    </DxComboBox>
                                                </DxFormLayoutItem>

                                                 <DxFormLayoutGroup Caption="User" ColSpanMd="12" Visible="@Convert.ToBoolean(UserForm.IsUser)">
                                                    <Items>
                                                        <DxFormLayoutItem Caption="Password:">
                                                            <DxTextBox Password="true" @bind-Text="@UserForm.Password" NullText="Password" />
                                                        </DxFormLayoutItem>
                                                        <DxFormLayoutItem Caption="Group:">
                                                            <DxComboBox Data="@Groups"
                                                                        NullText="Select Group..."
                                                                        @bind-Value="@UserForm.GroupId"
                                                                        TextFieldName="Name"
                                                                        ValueFieldName="Id">
                                                            </DxComboBox>
                                                        </DxFormLayoutItem>
                                                    </Items>
                                                </DxFormLayoutGroup>
                                            </DxFormLayout>
                                        </EditFormTemplate>
                                    </DxGrid>
                                </DxLoadingPanel>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}

========================== END Halaman Razor ==========================


========================== Untuk File Code CS ==========================
  public partial class InsurancePolicyPage
    {
        private List<CountryDto> Countries = [];
        private List<ProvinceDto> Provinces = [];

        #region Grid Properties

        private GroupMenuDto UserAccessCRUID = new();

        private bool IsAccess = false;
        private bool PanelVisible { get; set; } = true;
        private int FocusedRowVisibleIndex { get; set; }

        public IGrid Grid { get; set; }
        private IReadOnlyList<object> SelectedDataItems { get; set; } = new ObservableRangeCollection<object>();

        #endregion Grid Properties

        #region LoadData

        protected override async Task OnInitializedAsync()
        {
            try
            {
                var result = await NavigationManager.CheckAccessUser(oLocal);
                IsAccess = result.Item1;
                UserAccessCRUID = result.Item2;
            }
            catch { }

            await LoadData();
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);

            if (firstRender)
            {
                try
                {
                    var result = await NavigationManager.CheckAccessUser(oLocal);
                    IsAccess = result.Item1;
                    UserAccessCRUID = result.Item2;
                }
                catch { }
            }
        }

        private async Task LoadData()
        {
            PanelVisible = true;
            SelectedDataItems = new ObservableRangeCollection<object>();
            Countries = await Mediator.Send(new GetCountryQuery());
            PanelVisible = false;
        }

        #endregion LoadData

        #region Grid Function

        private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
        {
            FocusedRowVisibleIndex = args.VisibleIndex;
        }

        private void Grid_CustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
        {
            ((ITextEditSettings)e.EditSettings).ShowValidationIcon = true;
        }

        #region SaveDelete

        private async Task OnDelete(GridDataItemDeletingEventArgs e)
        {
            try
            {
                if (SelectedDataItems is null)
                {
                    await Mediator.Send(new DeleteInsurancePolicyRequest(((InsuranceDto)e.DataItem).Id));
                }
                else
                {
                    await Mediator.Send(new DeleteInsurancePolicyRequest(ids: SelectedDataItems.Adapt<List<InsuranceDto>>().Select(x => x.Id).ToList()));
                }

                await LoadData();
            }
            catch { }
        }

        private async Task OnSave(GridEditModelSavingEventArgs e)
        {
            try
            {
                var editModel = (CountryDto)e.EditModel;

                if (string.IsNullOrWhiteSpace(editModel.Name))
                    return;

                if (editModel.Id == 0)
                    await Mediator.Send(new CreateCountryRequest(editModel));
                else
                    await Mediator.Send(new UpdateCountryRequest(editModel));

                await LoadData();
            }
            catch { }
        }

        #endregion SaveDelete

        #region ToolBar Button

        public async Task ImportExcelFile(InputFileChangeEventArgs e)
        {
            foreach (var file in e.GetMultipleFiles(1))
            {
                try
                {
                    using MemoryStream ms = new();
                    await file.OpenReadStream().CopyToAsync(ms);
                    ms.Position = 0;

                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using ExcelPackage package = new(ms);
                    ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();

                    var headerNames = new List<string>() { "Name", "Code" };

                    if (Enumerable.Range(1, ws.Dimension.End.Column)
                        .Any(i => headerNames[i - 1].Trim().ToLower() != ws.Cells[1, i].Value?.ToString().Trim().ToLower()))
                    {
                        ToastService.ShowInfo("The header must match the grid.");
                        return;
                    }

                    var countries = new List<CountryDto>();

                    for (int row = 2; row <= ws.Dimension.End.Row; row++)
                    {
                        var country = new CountryDto
                        {
                            Name = ws.Cells[row, 1].Value?.ToString()?.Trim(),
                            Code = ws.Cells[row, 2].Value?.ToString()?.Trim()
                        };

                        if (!Countries.Any(x => x.Name.Trim().ToLower() == country.Name.Trim().ToLower()) && !countries.Any(x => x.Name.Trim().ToLower() == country.Name.Trim().ToLower()))
                            countries.Add(country);
                    }

                    await Mediator.Send(new CreateListCountryRequest(countries));

                    await LoadData();
                }
                catch { }
            }
        }

        private async Task Refresh_Click()
        {
            await LoadData();
        }

        private async Task NewItem_Click()
        {
            await Grid.StartEditNewRowAsync();
        }

        private async Task EditItem_Click()
        {
            await Grid.StartEditRowAsync(FocusedRowVisibleIndex);
        }

        private void DeleteItem_Click()
        {
            Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
        }

        private void ColumnChooserButton_Click()
        {
            Grid.ShowColumnChooser();
        }

        private async Task ExportXlsxItem_Click()
        {
            await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
        }

        private async Task ExportXlsItem_Click()
        {
            await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
        }

        private async Task ExportCsvItem_Click()
        {
            await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
        }

        private async Task ImportFile()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile");
        }

        #endregion ToolBar Button



        #endregion Grid Function
    }
}
========================== END File Code CS ==========================

========================== END File Code CS Jika Show custom form baru ==========================
private bool ShowForm { get; set; } = false;

private void NewItem_Click()
{
    InsurancePoliciyForm = new();
    ShowForm = true;
}

private void EditItem_Click()
{
    try
    {
        InsurancePoliciyForm = SelectedDataItems[0].Adapt<InsurancePolicyDto>();
        ShowForm = true;
    }
    catch { }
}
#region Form
    private async Task HandleValidSubmit()
    {
        FormValidationState = true;

        await OnSave();
    }

    private void HandleInvalidSubmit()
    {
        FormValidationState = false;
    }

    private void OnCancel()
    {
        InsurancePoliciyForm = new();
        ShowForm = false;
    }
#endregion
========================== END ==========================

========================== Command Handler ==========================
  #region Get

public class GetInsurancePolicyQuery(Expression<Func<InsurancePolicy, bool>>? predicate = null) : IRequest<List<InsurancePolicyDto>>
{
    public Expression<Func<InsurancePolicy, bool>> Predicate { get; } = predicate;
}

#endregion

#region Create

public class CreateInsurancePolicyRequest(InsurancePolicyDto InsurancePolicyDto) : IRequest<InsurancePolicyDto>
{
    public InsurancePolicyDto InsurancePolicyDto { get; set; } = InsurancePolicyDto;
}

public class CreateListCountryRequest(List<CountryDto> CountryDtos) : IRequest<List<CountryDto>>
{
    public List<CountryDto> CountryDtos { get; set; } = CountryDtos;
}

#endregion

#region Update
public class UpdateInsurancePolicyRequest(InsurancePolicyDto InsurancePolicyDto) : IRequest<bool>
{
    public InsurancePolicyDto InsurancePolicyDto { get; set; } = InsurancePolicyDto;
}

#endregion

#region Delete
public class DeleteInsurancePolicyRequest(int id = 0, List<int>? ids = null) : IRequest<bool>
{
    public int Id { get; set; } = id;
    public List<int> Ids { get; set; } = ids ?? [];
}
#endregion
========================== END Command Handler ==========================

========================== Query Handler ==========================
  #region Get
internal class GetInsurancePolicyQueryHandler(IUnitOfWork unitOfWork) : IRequestHandler<GetInsurancePolicyQuery, List<InsurancePolicyDto>>
{
    private readonly IUnitOfWork _unitOfWork;

    public async Task<List<InsurancePolicyDto>> Handle(GetInsurancePolicyQuery query, CancellationToken cancellationToken)
    {
        try
        {
            var result = await _unitOfWork.Repository<InsurancePolicy>().GetAsync(
                query.Predicate,
                    x => x
                    .Include(z => z.Insurance)
                    .Include(z => z.User), cancellationToken);

            return result.Adapt<List<InsurancePolicyDto>>();
        }
        catch (Exception e)
        {
            return [];
        }
    }
}
#endregion

#region Create
internal class CreateInsurancePolicyHandler(IUnitOfWork unitOfWork) : IRequestHandler<CreateInsurancePolicyRequest, InsurancePolicyDto>
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task<InsurancePolicyDto> Handle(CreateInsurancePolicyRequest request, CancellationToken cancellationToken)
    {
        var result = await _unitOfWork.Repository<InsurancePolicy>().AddAsync(request.InsurancePolicyDto.Adapt<InsurancePolicy>());

        await _unitOfWork.SaveChangesAsync(cancellationToken);

        return result.Adapt<InsurancePolicyDto>();
    }
}

internal class CreateListCountryRequestHandler(IUnitOfWork unitOfWork) : IRequestHandler<CreateListCountryRequest, List<CountryDto>>
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task<List<CountryDto>> Handle(CreateListCountryRequest request, CancellationToken cancellationToken)
    {
        var result = await _unitOfWork.Repository<Country>().AddAsync(request.CountryDtos.Adapt<List<Country>>());

        await _unitOfWork.SaveChangesAsync(cancellationToken);

        return result.Adapt<List<CountryDto>>();
    }
}
#endregion

#region Update
internal class UpdateInsurancePolicyHandler(IUnitOfWork unitOfWork) : IRequestHandler<UpdateInsurancePolicyRequest, bool>
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task<bool> Handle(UpdateInsurancePolicyRequest request, CancellationToken cancellationToken)
    {
        await _unitOfWork.Repository<InsurancePolicy>().UpdateAsync(request.InsurancePolicyDto.Adapt<InsurancePolicy>());
        await _unitOfWork.SaveChangesAsync(cancellationToken);

        return true;
    }
}
#endregion

#region Delete
internal class DeleteInsurancePolicyHandler(IUnitOfWork unitOfWork) : IRequestHandler<DeleteInsurancePolicyRequest, bool>
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task<bool> Handle(DeleteInsurancePolicyRequest request, CancellationToken cancellationToken)
    { 
        if (request.Id > 0)
        {
            await _unitOfWork.Repository<InsurancePolicy>().DeleteAsync(request.Id);
        }
                 
        if (request.Ids.Count > 0)
        {
            await _unitOfWork.Repository<InsurancePolicy>().DeleteAsync(x => request.Ids.Contains(x.Id));
        }

        await _unitOfWork.SaveChangesAsync(cancellationToken);

        return true; 
    }
}
#endregion
========================== END Query Handler ==========================



[RegularExpression(@"^\d+$", ErrorMessage = "The {0} field must contain only numbers.")]
