<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/">

    <link rel="stylesheet" href="css/site.min.css" />
    <link href="McDermott.Web.styles.css" rel="stylesheet">

     <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
     <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">

    @DxResourceManager.RegisterScripts()
    <HeadOutlet @rendermode="InteractiveServer" />

    @*  < link rel="stylesheet" href="bootstrap/bootstrap.min.css" /> *@
    @*     <link rel="stylesheet" href="McDermott.styles.css" />
    <link rel="stylesheet" href="Etiket.css" />
    *@
    <!-- Google Font: Source Sans Pro -->
    @*  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback"> *@
    <!-- Font Awesome -->
    @* <link rel="stylesheet" href="AdminLTE/plugins/fontawesome-free/css/all.min.css"> *@
    <!-- Ionicons -->
    @* <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"> *@

    @* <link rel="stylesheet" href="/css/Ticket.css" /> *@
    @* <link rel="stylesheet" href="_content/DevExpress.Blazor.RichEdit/dx-blazor-richedit.bs5.css" /> *@

    @*...*@
    @* Bootstrap 5 *@
    @* <link href="_content/DevExpress.Blazor.Themes/office-white.bs5.min.css" asp-append-version="true" rel="stylesheet" /> *@

    @* bootstrap-external for Bootstrap 4 *@
    @* <link rel="stylesheet" href="_content/DevExpress.Blazor.Themes/bootstrap-external.bs4.min.css" /> *@
    @*...*@

    @* Blazor Bootstrap *@
  

    @* <link rel="stylesheet" href="app.css" />
    <link rel="icon" type="image/png" href="image/mcdermott_logo.png" />
    <link href="_content/DevExpress.Blazor.RichEdit/dx-blazor-richedit.bs5.css" rel="stylesheet" asp-append-version="true" />

    <link rel="stylesheet" href="AdminLTE/plugins/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
    <link rel="stylesheet" href="AdminLTE/plugins/icheck-bootstrap/icheck-bootstrap.min.css">
    <link rel="stylesheet" href="AdminLTE/plugins/jqvmap/jqvmap.min.css">
    <link rel="stylesheet" href="AdminLTE/dist/css/adminlte.min.css">
    <link rel="stylesheet" href="AdminLTE/plugins/overlayScrollbars/css/OverlayScrollbars.min.css">
    <link rel="stylesheet" href="AdminLTE/plugins/daterangepicker/daterangepicker.css">
    <link rel="stylesheet" href="AdminLTE/plugins/summernote/summernote-bs4.min.css">
    <link rel="stylesheet" href="fontawesome/css/all.css" />
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
    <link href="css/switcher-resources/themes/lumen/bootstrap.min.css" asp-append-version="true" rel="stylesheet" />
    <link rel="stylesheet" href="_content/DevExpress.Blazor.Themes/bootstrap-external.bs5.min.css" /> *@ 
</head>

@* <body class="hold-transition sidebar-mini  layout-fixed hold-transition white-mode sidebar-mini layout-fixed layout-navbar-fixed layout-footer-fixed"> *@
<body class="hold-transition sidebar-mini sidebar-collapse layout-navbar-fixed layout-footer-fixed layout-fixed">
    <Routes @rendermode="InteractiveServer" />

    <script src="_framework/blazor.web.js"></script>

   @*  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script> *@

    <script src="js/site.min.js"></script> 
    <script>
        // Fixed
        function downloadFileFromStream(fileName, streamReference) {
            streamReference.arrayBuffer().then(function (arrayBuffer) {
                const blob = new Blob([arrayBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                const url = URL.createObjectURL(blob);
                const anchorElement = document.createElement('a');
                anchorElement.href = url;
                anchorElement.download = fileName;
                anchorElement.click();
                URL.revokeObjectURL(url);
            });
        }

        window.BlazorDownloadFileExample = (fileName) => {
            const anchor = document.createElement('a');
            anchor.setAttribute('download', fileName);
            anchor.setAttribute('href', URL.createObjectURL(new Blob([], { type: 'application/octet-stream' })));
            anchor.style.display = 'none';
            document.body.appendChild(anchor);
            anchor.click();
            document.body.removeChild(anchor);
        };

        window.BlazorDownloadFile = async (fileName) => {
            const response = await fetch(`/${fileName}`);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const anchor = document.createElement('a');
            anchor.href = url;
            anchor.download = fileName;
            anchor.style.display = 'none';
            document.body.appendChild(anchor);
            anchor.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(anchor);
        };

        // wwwroot/js/fileUtils.js
        window.downloadFile = ({ fileName, content }) => {
            const byteCharacters = atob(content);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);

            const blob = new Blob([byteArray]);

            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = fileName;

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        window.hideSideBarr = function () {
            var l = document.getElementById("hal");
            l.click();
        }

        window.setCookie = function (name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        };

        window.clearAllCookies = function () {
            var cookies = document.cookie.split(";");

            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i];
                var eqPos = cookie.indexOf("=");
                var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
            }
        };

        window.getCookie = function (name) {
            var nameEQ = name + "=";
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = cookies[i];
                while (cookie.charAt(0) == ' ') {
                    cookie = cookie.substring(1, cookie.length);
                }
                if (cookie.indexOf(nameEQ) == 0) {
                    return cookie.substring(nameEQ.length, cookie.length);
                }
            }
            return null;
        };

        window.deleteCookie = function (name) {
            // document.cookie = name + '=; Max-Age=-99999999;';
            document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';

        };

        window.updateCookie = function (name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + value + expires + "; path=/";
        };

        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer]);
            const url = URL.createObjectURL(blob);
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName ?? '';
            anchorElement.click();
            anchorElement.remove();
            URL.revokeObjectURL(url);
        }

        window.clickInputFile = function (key) {
            document.getElementById(key).click();
        }

        window.BlazorHelpers = {
            setTimeout: function (callback, timeout) {
                return setTimeout(callback, timeout);
            }
        };

        window.blazorLocalStorage = {
            getItem: function (key) {
                return localStorage.getItem(key);
            },
            setItem: function (key, value) {
                localStorage.setItem(key, value);
            },
            removeItem: function (key) {
                localStorage.removeItem(key);
            }
        };

        function downloadFileFromStreamApi(fileName, byteBase64) {
            var link = document.createElement('a');
            link.download = fileName;
            link.href = 'data:application/octet-stream;base64,' + byteBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }


        window.saveAsFile = function (fileName, byteBase64) {
            var link = document.createElement('a');
            link.download = fileName;
            link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + byteBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };

        //Print Kiosk
        //Print Kiosk
        function printJS(contentToPrint) {
            var printWindow = window.open('', '_blank');
            printWindow.document.open();
            printWindow.document.write(contentToPrint);
            printWindow.document.close();
            printWindow.focus();
            printWindow.print();
            printWindow.close();
        }

        function printJSX(contentToPrint) {
            var printWindow = window.open('', '_blank');
            if (!printWindow) {
                console.error('Failed to open a new window. Please allow pop-ups for this site.');
                return;
            }
            printWindow.document.open();
            setTimeout(() => {
                printWindow.document.write(contentToPrint);
                printWindow.document.close();
                printWindow.focus();
                printWindow.print();
                printWindow.close();
            }, 500); // Delay of 500ms to ensure window is fully initialized
        }

        function printJS2(contentToPrint) {
            // Create a Blob object with the HTML content
            var blob = new Blob([contentToPrint], { type: 'application/pdf' });

            // Create a link element
            var link = document.createElement('a');

            // Create a URL for the Blob and set it as the href attribute
            link.href = URL.createObjectURL(blob);

            // Set the download attribute with a filename
            link.download = 'document.pdf';

            // Append the link to the body (required for Firefox)
            document.body.appendChild(link);

            // Trigger a click on the link to start the download
            link.click();

            // Remove the link from the document
            document.body.removeChild(link);
        }

        async function generatePdf22(content) {
            const { jsPDF } = window.jspdf;

            // Buat dokumen PDF
            const doc = new jsPDF({
                orientation: 'portrait', // Anda bisa mengatur 'landscape' jika perlu
                unit: 'mm',
                format: 'a4' // Format default, akan diubah nanti
            });

            // Buat elemen sementara untuk menghitung ukuran konten
            const tempDiv = document.createElement('div');
            tempDiv.style.position = 'absolute';
            tempDiv.style.visibility = 'hidden';
            tempDiv.style.width = '100%';
            tempDiv.innerHTML = content;
            document.body.appendChild(tempDiv);

            // Hitung tinggi konten
            const contentHeight = tempDiv.offsetHeight;

            // Hapus elemen sementara
            document.body.removeChild(tempDiv);

            // Set ukuran halaman PDF berdasarkan tinggi konten
            const pageHeight = Math.max(contentHeight, 297); // Minimal A4 height in mm
            doc.internal.pageSize.height = pageHeight;

            // Tambahkan HTML ke dokumen PDF
            doc.html(tempDiv, {
                callback: function (doc) {
                    doc.save("report.pdf");
                },
                x: 10,
                y: 10
            });
        }

        function confirmSendEmail() {
            return confirm('Apakah Anda yakin ingin mengirim email ini?');
        }
        function generatePdf(content) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Tambahkan HTML ke dokumen PDF
            doc.html(content, {
                callback: function (doc) {
                    doc.save("report.pdf");
                },
                x: 10,
                y: 10
            });
        }

        function downloadFileNew(url, filename) {
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

        function downloadBase64File(base64Data, fileName) {
            const link = document.createElement('a');
            link.href = base64Data;
            link.download = fileName;
            link.click();
        }

        function printDocument(base64String) {
            const byteCharacters = atob(base64String);
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            const byteArray = new Uint8Array(byteNumbers);
            const blob = new Blob([byteArray], { type: 'application/octet-stream' });
            const url = URL.createObjectURL(blob);

            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            iframe.contentWindow.location.href = url;

            // Tunggu sebentar agar dokumen selesai dimuat
            setTimeout(() => {
                iframe.contentWindow.print();
                document.body.removeChild(iframe);
                URL.revokeObjectURL(url);
            }, 1000); // Sesuaikan waktu tunggu jika diperlukan
        }

    </script>

     

    @* <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script> *@
    @* <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script> *@
    @* <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script> *@

    @*  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
    .progress {
    height: 40px;
    }

    .progress-bar {
    text-align: center;
    line-height: 40px;
    }

    .step {
    display: none;
    }

    .step.active {
    display: block;
    }
    </style> *@

    @*  <script>
    function nextStep(step) {
    $(".step" + step).removeClass("active");
    $(".progress-bar:nth-child(" + step + ")").css("width", (step * 33.33) + "%");
    $(".step" + (step + 1)).addClass("active");
    }

    function prevStep(step) {
    $(".step" + step).removeClass("active");
    $(".progress-bar:nth-child(" + step + ")").css("width", ((step - 1) * 33.33) + "%");
    $(".step" + (step - 1)).addClass("active");
    }

    function finish() {
    alert("Process completed!");
    }
    </script> *@
    @*<script>
    window.initializeCanvas = (canvasId) => {
    const canvas = document.getElementById(canvasId);
    if (!canvas) {
    console.error("Canvas element not found.");
    return;
    }
    const ctx = canvas.getContext('2d');
    let markerCount = 0;
    let markers = [];

    const img = new Image();
    img.src = '/image/logo.png'; // Replace with the correct image path
    img.onload = () => {
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    redrawMarkers();
    }

    canvas.addEventListener('click', (e) => {
    const x = e.offsetX;
    const y = e.offsetY;

    const clickedMarkerIndex = markers.findIndex(marker => {
    const dx = marker.x - x;
    const dy = marker.y - y;
    return Math.sqrt(dx * dx + dy * dy) < 10; // Adjust radius as needed
    });

    if (clickedMarkerIndex !== -1) {
    markers.splice(clickedMarkerIndex, 1);
    } else {
    markerCount++;
    markers.push({ number: markerCount, x, y });
    }
    redrawMarkers();
    });

    window.resetMarkers = () => {
    markerCount = 0;
    markers = [];
    redrawMarkers();
    }

    function redrawMarkers() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
    markers.forEach(marker => {
    ctx.fillStyle = 'purple';
    ctx.beginPath();
    ctx.arc(marker.x, marker.y, 12, 0, 2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = 'white';
    ctx.font = 'bold 12px Arial';
    ctx.fillText(marker.number, marker.x - 5, marker.y + 5);
    });
    }
    };
    </script> *@

</body>
</html>