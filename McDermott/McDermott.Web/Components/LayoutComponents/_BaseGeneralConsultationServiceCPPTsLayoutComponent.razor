@using System.Linq.Expressions

<DxTabPage CssClass="w-100" Click="(async () => await LoadDataCPPT())" Text="CPPT">
    <div class="w-100 mt-2">
        <div class="card w-100">
            <div class="card-header">
                <span class="fw-bolder">CPPT</span>
            </div>

            <div class="row w-100">
                <div class="col-md-12 w-100">
                    <DxFormLayout CssClass="w-100">
                        <DxLoadingPanel @bind-Visible="IsLoadingz"
                                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                        IsContentBlocked="true"
                                        ApplyBackgroundShading="true"
                                        IndicatorAreaVisible="false"
                                        Text="Fetching Data...">
                            <MyGridPaginate @ref="GridCppt"
                                            Data="GeneralConsultanCPPTs"
                                            @bind-SelectedDataItems="@SelectedDataItemsCPPT"
                                            EditModelSaving="OnSaveCPPT"
                                            DataItemDeleting="OnDeleteCPPT"
                                            Context="exa"
                                            FocusedRowChanged="GridTabCPPT_FocusedRowChanged"
                                            SearchTextChanged="OnSearchBoxChangedGridCPPT"
                                            KeyFieldName="Id">

                                <Columns>
                                    <DxGridDataColumn FieldName="DateTime" Caption="Date" DisplayFormat="@Helper.DefaultFormatDateTime" />
                                    <DxGridDataColumn FieldName="User.Name" Caption="User" />
                                    <DxGridDataColumn FieldName="Subjective" />
                                    <DxGridDataColumn FieldName="Objective" />
                                    <DxGridDataColumn FieldName="NursingDiagnoses.Problem" Caption="Nursing Diagnoses" />
                                    <DxGridDataColumn FieldName="Diagnosis.Name" Caption="Diagnosis" />
                                    <DxGridDataColumn FieldName="Planning" />
                                </Columns>

                                <ToolbarTemplate>
                                    <MyDxToolbarBase TItem="GeneralConsultanCPPTDto"
                                                     Items="@GeneralConsultanCPPTs"
                                                     SelectedDataItems="@SelectedDataItemsCPPT"
                                                     NewItem_Click="@NewItemCPPT_Click"
                                                     EditItem_Click="@EditItemCPPT_Click"
                                                     DeleteItem_Click="@DeleteItemCPPT_Click"
                                                     Refresh_Click="@RefreshCPPT_Click"
                                                     Grid="GridCppt"
                                                     IsImport="false"
                                                     VisibleNew="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)"
                                                     VisibleEdit="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)"
                                                     VisibleDelete="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)" />
                                </ToolbarTemplate>

                                <EditFormTemplate Context="EditFormContext">
                                    @{
                                        var a = (GeneralConsultanCPPTDto)EditFormContext.EditModel;
                                        var userName = string.Empty;
                                        @if (UserLogin is not null && a.Id == 0)
                                        {
                                            a.UserId = UserLogin.Id;
                                            userName = UserLogin.Name;
                                        }
                                        else
                                        {
                                            userName = a.User is not null ? a.User.Name : "-";
                                        }

                                        void OnClickGetObjectives()
                                        {
                                            a.Objective = $"Weight: {GeneralConsultanService.Weight}, Height: {GeneralConsultanService.Height}, RR: {GeneralConsultanService.RR}, SpO2: {GeneralConsultanService.SpO2}, BMIIndex: {Math.Round(GeneralConsultanService.BMIIndex, 2).ToString()}, BMIState: {GeneralConsultanService.BMIState}, Temp: {GeneralConsultanService.Temp}, HR: {GeneralConsultanService.HR}, Systolic: {GeneralConsultanService.Systolic}, DiastolicBP: {GeneralConsultanService.DiastolicBP}, E: {GeneralConsultanService.E}, V: {GeneralConsultanService.V}, M: {GeneralConsultanService.M}";
                                        }
                                    }
                                    <DxFormLayout CssClass="w-100">
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Name" ColSpanMd="12">
                                            <DxTextBox @bind-Text="@userName" ReadOnly="true" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" NullText="Name" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Anamnesa" ColSpanMd="12">
                                            <MyTextBox @bind-Text="@a.Anamnesa"
                                                       NullText="Anamnesa" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Subjective" ColSpanMd="12">
                                            <DxTextBox @bind-Text="@a.Subjective" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" NullText="Name" />
                                        </DxFormLayoutItem>

                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Objective" ColSpanMd="12">
                                            <DxMaskedInput @bind-Value="@a.Objective"
                                                           NullText="Objective">
                                                <Buttons>
                                                    <DxEditorButton CssClass="text-bold btn-primary" Text="Get Objectives" Click="OnClickGetObjectives" />
                                                </Buttons>
                                            </DxMaskedInput>
                                        </DxFormLayoutItem>

                                        @*   @if (IsStatus(EnumStatusGeneralConsultantService.NurseStation))
                                                                                    { *@
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Nursing Diagnoses" ColSpanMd="12">
                                            <MyDxComboBox Data="NursingDiagnoses"
                                                          NullText="Select Nursing Diagnoses"
                                                          TextFieldName="Problem"
                                                          ValueFieldName="Id"
                                                          @oninput="OnInputNursingDiagnoses"
                                                          SelectedItemChanged="((NursingDiagnosesDto e) => SelectedItemChanged(e))"
                                                          @bind-Value="a.NursingDiagnosesId">
                                                <Columns>
                                                    <DxListEditorColumn FieldName="@nameof(NursingDiagnosesDto.Problem)" Caption="Name" />
                                                    <DxListEditorColumn FieldName="@nameof(NursingDiagnosesDto.Code)" Caption="Code" />
                                                </Columns>
                                            </MyDxComboBox>
                                            <ValidationMessage For="@(()=>a.NursingDiagnosesId)" />
                                        </DxFormLayoutItem>

                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Diagnoses" ColSpanMd="12">
                                            <MyDxComboBox Data="Diagnoses"
                                                          NullText="Select Diagnoses"
                                                          TextFieldName="Name"
                                                          ValueFieldName="Id"
                                                          @oninput="OnInputDiagnosis"
                                                          SelectedItemChanged="((DiagnosisDto e) => SelectedItemChanged(e))"
                                                          @bind-Value="a.DiagnosisId">
                                                <Columns>
                                                    <DxListEditorColumn FieldName="@nameof(DiagnosisDto.Name)" Caption="Name" />
                                                    <DxListEditorColumn FieldName="@nameof(DiagnosisDto.Code)" Caption="Code" />
                                                    <DxListEditorColumn FieldName="DiseaseCategory.Name" Caption="Disease Category" />
                                                    <DxListEditorColumn FieldName="CronisCategory.Name" Caption="Cronis Category" />
                                                </Columns>
                                            </MyDxComboBox>
                                            <ValidationMessage For="@(()=>a.DiagnosisId)" />
                                        </DxFormLayoutItem>
                                        @* } *@
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Planning" ColSpanMd="12">
                                            @*  <MyTextBox @bind-Text="@a.Planning"
                                                                                                               NullText="Name" /> *@ 
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Medication Therapy" ColSpanMd="12">
                                            <MyTextBox @bind-Text="@a.MedicationTherapy"
                                                       NullText="Medication Therapy" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Non Medication Therapy" ColSpanMd="12">
                                            <MyTextBox @bind-Text="@a.NonMedicationTherapy"
                                                       NullText="NonMedication Therapy" />
                                        </DxFormLayoutItem>
                                    </DxFormLayout>
                                </EditFormTemplate>
                            </MyGridPaginate>

                            <div class="row">
                                <DxFormLayout>
                                    <div class="col-md-9">
                                        <DxFormLayoutItem>
                                            <DxPager PageCount="totalCountGridCPPT"
                                                     ActivePageIndexChanged="OnPageIndexChangedGridCPPT"
                                                     ActivePageIndex="activePageIndexTotalCountGridCPPT"
                                                     VisibleNumericButtonCount="10"
                                                     SizeMode="SizeMode.Medium"
                                                     NavigationMode="PagerNavigationMode.Auto">
                                            </DxPager>
                                        </DxFormLayoutItem>
                                    </div>
                                    <div class="col-md-3 d-flex justify-content-end">
                                        <DxFormLayoutItem Caption="Page Size:">
                                            <MyDxComboBox Data="(new[] { 10, 25, 50, 100 })"
                                                          NullText="Select Page Size"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                                          SelectedItemChanged="((int e ) => OnpageSizeGridCPPTIndexChangedGridCPPT(e))"
                                                          @bind-Value="pageSizeGridCPPT">
                                            </MyDxComboBox>
                                        </DxFormLayoutItem>
                                    </div>
                                </DxFormLayout>
                            </div>
                        </DxLoadingPanel>

                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="BMHP" ColSpanMd="12">
                            <MyTextBox @bind-Text="@GeneralConsultanService.BMHP"
                                       NullText="BMHP" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </div>
            </div>
        </div>
    </div>

</DxTabPage>

@code {
    [Parameter] public GeneralConsultanServiceDto GeneralConsultanService { get; set; } = new();
    [Parameter] public User UserLogin { get; set; } = new();



    private bool IsStatus(EnumStatusGeneralConsultantService status) => GeneralConsultanService.Status == status;
    private bool IsLoading = false;
    private bool IsLoadingz = false;

    #region CPPT
    private IGrid GridCppt { get; set; }
    private IGrid GridClaim { get; set; }
    private IReadOnlyList<object> SelectedDataItemsCPPT { get; set; } = [];
    private IReadOnlyList<object> SelectedDataItemsClaim { get; set; } = [];

    private int FocusedGridTabCPPTRowVisibleIndex { get; set; }
    private int FocusedGridTabClaimRowVisibleIndex { get; set; }
    private List<DiagnosisDto> Diagnoses = [];
    private List<GeneralConsultanCPPTDto> GeneralConsultanCPPTs = [];
    private List<NursingDiagnosesDto> NursingDiagnoses = [];

    private async Task NewItemCPPT_Click()
    {
        if (NursingDiagnoses.Count == 0)
            await LoadDataNursingDiagnoses();
        if (Diagnoses.Count == 0)
            await LoadDataDiagnoses();

        await GridCppt.StartEditNewRowAsync();
    }

    private async Task RefreshCPPT_Click()
    {
        await LoadDataCPPT();
    }

    #region Searching

    private int pageSizeGridCPPT { get; set; } = 10;
    private int totalCountGridCPPT = 0;
    private int activePageIndexTotalCountGridCPPT { get; set; } = 0;
    private string searchTermGridCPPT { get; set; } = string.Empty;

    private async Task OnSearchBoxChangedGridCPPT(string searchText)
    {
        searchTermGridCPPT = searchText;
        await LoadDataCPPT(0, pageSizeGridCPPT);
    }

    private async Task OnpageSizeGridCPPTIndexChangedGridCPPT(int newpageSizeGridCPPT)
    {
        pageSizeGridCPPT = newpageSizeGridCPPT;
        await LoadDataCPPT(0, newpageSizeGridCPPT);
    }

    private async Task OnPageIndexChangedGridCPPT(int newPageIndex)
    {
        await LoadDataCPPT(newPageIndex, pageSizeGridCPPT);
    }

    #endregion Searching

    private async Task LoadDataCPPT(int pageIndex = 0, int pageSizeGridCPPT = 10)
    {
        try
        {
            IsLoading = true; 
            SelectedDataItemsCPPT = [];
            var ab = await Mediator.Send(new GetGeneralConsultanCPPTsQuery
                {
                    SearchTerm = searchTermGridCPPT ?? "",
                    Predicate = x => x.GeneralConsultanServiceId == GeneralConsultanService.Id,
                    PageIndex = pageIndex,
                    PageSize = pageSizeGridCPPT
                });
            GeneralConsultanCPPTs = ab.Item1;
            totalCountGridCPPT = ab.PageCount;
            activePageIndexTotalCountGridCPPT = pageIndex;
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally
        {
            IsLoading = false; 
        }
    }

    private async Task EditItemCPPT_Click()
    {
        try
        {
            IsLoading = true;
            await GridCppt.StartEditRowAsync(FocusedGridTabCPPTRowVisibleIndex);

            var a = (GridCppt.GetDataItem(FocusedGridTabCPPTRowVisibleIndex) as GeneralConsultanCPPTDto ?? new());
            NursingDiagnoses = (await Mediator.Send(new GetNursingDiagnosesQuery
                {
                    Predicate = x => x.Id == a.NursingDiagnosesId
                })).Item1;
            Diagnoses = (await Mediator.Send(new GetDiagnosisQuery
                {
                    Predicate = x => x.Id == a.DiagnosisId
                })).Item1;

            if (NursingDiagnoses.Count == 0)
                await LoadDataNursingDiagnoses();
            if (Diagnoses.Count == 0)
                await LoadDataDiagnoses();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    private void DeleteItemCPPT_Click()
    {
        GridCppt.ShowRowDeleteConfirmation(FocusedGridTabCPPTRowVisibleIndex);
    }

    private void GridCPPT_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;
    }

    private void GridTabCPPT_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;
    }

    private async Task OnSaveCPPT(GridEditModelSavingEventArgs e)
    {
        try
        {
            IsLoading = true;

            var editModel = (GeneralConsultanCPPTDto)e.EditModel;

            editModel.GeneralConsultanServiceId = GeneralConsultanService.Id;

            editModel.Planning = $"{editModel.MedicationTherapy} {editModel.NonMedicationTherapy}";

            if (editModel.Id == 0)
            {
                await Mediator.Send(new CreateGeneralConsultanCPPTRequest(editModel));
            }
            else
            {
                await Mediator.Send(new UpdateGeneralConsultanCPPTRequest(editModel));
            }

            await LoadDataCPPT(activePageIndexTotalCountGridCPPT, pageSizeGridCPPT);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    private async Task OnDeleteCPPT(GridDataItemDeletingEventArgs e)
    {
        try
        {
            IsLoading = true;
            if (SelectedDataItemsCPPT.Count == 0)
            {
                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(((GeneralConsultanCPPTDto)e.DataItem).Id));
            }
            else
            {
                var selectedGeneralConsultanCPPTs = SelectedDataItemsCPPT.Adapt<List<GeneralConsultanCPPTDto>>();
                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(ids: selectedGeneralConsultanCPPTs.Select(x => x.Id).ToList()));
            }

            await LoadDataCPPT(activePageIndexTotalCountGridCPPT, pageSizeGridCPPT);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #region ComboBox NursingDiagnoses

    private NursingDiagnosesDto SelectedNursingDiagnoses { get; set; } = new();

    private async Task SelectedItemChanged(NursingDiagnosesDto e)
    {
        if (e is null)
        {
            SelectedNursingDiagnoses = new();
            await LoadDataNursingDiagnoses();
        }
        else
            SelectedNursingDiagnoses = e;
    }

    private CancellationTokenSource? _ctsNursingDiagnoses;

    private async Task OnInputNursingDiagnoses(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try
        {
            _ctsNursingDiagnoses?.Cancel();
            _ctsNursingDiagnoses?.Dispose();
            _ctsNursingDiagnoses = new CancellationTokenSource();

            await Task.Delay(Helper.CBX_DELAY, _ctsNursingDiagnoses.Token);

            await LoadDataNursingDiagnoses(e.Value?.ToString() ?? "");
        }
        finally
        {
            _ctsNursingDiagnoses?.Dispose();
            _ctsNursingDiagnoses = null;
        }
    }

    private async Task LoadDataNursingDiagnoses(string? e = "", Expression<Func<NursingDiagnoses, bool>>? predicate = null)
    {
        try
        {
            NursingDiagnoses = await Mediator.QueryGetComboBox<NursingDiagnoses, NursingDiagnosesDto>(e, predicate);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #endregion ComboBox NursingDiagnoses

    #region ComboBox Diagnosis

    private DiagnosisDto SelectedDiagnosis { get; set; } = new();

    private async Task SelectedItemChanged(DiagnosisDto e)
    {
        if (e is null)
        {
            SelectedDiagnosis = new();
            await LoadDataDiagnoses();
        }
        else
            SelectedDiagnosis = e;
    }

    private CancellationTokenSource? _ctsDiagnosis;

    private async Task OnInputDiagnosis(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try
        {
            _ctsDiagnosis?.Cancel();
            _ctsDiagnosis?.Dispose();
            _ctsDiagnosis = new CancellationTokenSource();

            await Task.Delay(Helper.CBX_DELAY, _ctsDiagnosis.Token);

            await LoadDataDiagnoses(e.Value?.ToString() ?? "");
        }
        finally
        {
            _ctsDiagnosis?.Dispose();
            _ctsDiagnosis = null;
        }
    }

    private async Task LoadDataDiagnoses(string? e = "", Expression<Func<Diagnosis, bool>>? predicate = null)
    {
        try
        {
            Diagnoses = await Mediator.QueryGetComboBox<Diagnosis, DiagnosisDto>(e, predicate);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #endregion ComboBox Diagnosis
    #endregion CPPT
}
