@using System.Linq.Expressions

<DxTabPage CssClass="w-100" Click="(async () => await LoadData())" Text="CPPT">
    <div class="w-100 mt-2">
        <div class="card w-100">
            <div class="card-header">
                <span class="fw-bolder">CPPT</span>
            </div>

            <div class="row w-100">
                <div class="col-md-12 w-100">
                    <DxFormLayout CssClass="w-100">

                        <_BaseMyGrid @ref="Grid"
                                     Data="@Data"
                                     @bind-SelectedDataItems="@SelectedDataItems"
                                     EditModelSaving="OnSaveCPPT"
                                     Context="exa"
                                     DataItemDeleting="OnDeleteCPPT"
                                     FocusedRowChanged="Grid_FocusedRowChanged"
                                     KeyFieldName="Id">

                            <Columns>
                                <DxGridDataColumn FieldName="DateTime" Caption="Date" DisplayFormat="@Helper.DefaultFormatDateTime" SortOrder="GridColumnSortOrder.Descending" SortIndex="0" />

                               @*  <DxGridDataColumn MinWidth="200"
                                                  FieldName="DateTime"
                                                  FilterRowOperatorType="GridFilterRowOperatorType.Contains"
                                                  DisplayFormat="ddd, dd MMM yyyy"
                                                  Caption="Date" /> *@

                                <DxGridDataColumn FieldName="User.Name" Caption="User" />
                                <DxGridDataColumn FieldName="Subjective" />
                                <DxGridDataColumn FieldName="Objective" />
                                <DxGridDataColumn FieldName="NursingDiagnoses.Problem" Caption="Nursing Diagnoses" />
                                <DxGridDataColumn FieldName="Diagnosis.Name" Caption="Diagnosis" />
                                <DxGridDataColumn FieldName="Planning" />
                            </Columns>

                            <ToolbarTemplate>
                                <MyDxToolbarBase TItem="GeneralConsultanCPPTDto"
                                                 SelectedDataItems="@SelectedDataItems"
                                                 NewItem_Click="@NewItemCPPT_Click"
                                                 EditItem_Click="@EditItemCPPT_Click"
                                                 DeleteItem_Click="@DeleteItemCPPT_Click"
                                                 Refresh_Click="@RefreshCPPT_Click"
                                                 Grid="Grid"
                                                 IsImport="false"
                                                 VisibleNew="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)"
                                                 VisibleEdit="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)"
                                                 VisibleDelete="IsStatus(EnumStatusGeneralConsultantService.NurseStation) || IsStatus(EnumStatusGeneralConsultantService.Physician)|| IsStatus(EnumStatusGeneralConsultantService.Midwife)" />
                            </ToolbarTemplate>

                            <EditFormTemplate Context="EditFormContext">
                                @{
                                    var a = (GeneralConsultanCPPT)EditFormContext.EditModel;
                                    var userName = string.Empty;
                                    @if (UserLogin is not null && a.Id == 0)
                                    {
                                        a.UserId = UserLogin.Id;
                                        userName = UserLogin.Name;
                                    }
                                    else
                                    {
                                        userName = a.User is not null ? a.User.Name : "-";
                                    }

                                    void OnClickGetObjectives()
                                    {
                                        a.Objective = $"Weight: {GeneralConsultanService.Weight}, Height: {GeneralConsultanService.Height}, RR: {GeneralConsultanService.RR}, SpO2: {GeneralConsultanService.SpO2}, BMIIndex: {Math.Round(GeneralConsultanService.BMIIndex, 2).ToString()}, BMIState: {GeneralConsultanService.BMIState}, Temp: {GeneralConsultanService.Temp}, HR: {GeneralConsultanService.HR}, Systolic: {GeneralConsultanService.Systolic}, DiastolicBP: {GeneralConsultanService.DiastolicBP}, E: {GeneralConsultanService.E}, V: {GeneralConsultanService.V}, M: {GeneralConsultanService.M}";
                                    }
                                }
                                <DxFormLayout CssClass="w-100">
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Name" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@userName" ReadOnly="true" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" NullText="Name" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Anamnesa" ColSpanMd="12">
                                        <MyTextBox @bind-Text="@a.Anamnesa"
                                                   NullText="Anamnesa" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Subjective" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@a.Subjective" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" NullText="Name" />
                                    </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Objective" ColSpanMd="12">
                                        <DxMaskedInput @bind-Value="@a.Objective"
                                                       NullText="Objective">
                                            <Buttons>
                                                <DxEditorButton CssClass="text-bold btn-primary" Text="Get Objectives" Click="OnClickGetObjectives" />
                                            </Buttons>
                                        </DxMaskedInput>
                                    </DxFormLayoutItem>

                                    @*   @if (IsStatus(EnumStatusGeneralConsultantService.NurseStation))
                                                                                    { *@
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Nursing Diagnoses" ColSpanMd="12">
                                        <MyDxComboBox Data="NursingDiagnoses"
                                                      NullText="Select Nursing Diagnoses"
                                                      TextFieldName="Problem"
                                                      ValueFieldName="Id"
                                                      @oninput="OnInputNursingDiagnoses"
                                                      SelectedItemChanged="((NursingDiagnosesDto e) => SelectedItemChanged(e))"
                                                      @bind-Value="a.NursingDiagnosesId">
                                            <Columns>
                                                <DxListEditorColumn FieldName="@nameof(NursingDiagnosesDto.Problem)" Caption="Name" />
                                                <DxListEditorColumn FieldName="@nameof(NursingDiagnosesDto.Code)" Caption="Code" />
                                            </Columns>
                                        </MyDxComboBox>
                                        <ValidationMessage For="@(()=>a.NursingDiagnosesId)" />
                                    </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Diagnoses" ColSpanMd="12">
                                        <MyDxComboBox Data="Diagnoses"
                                                      NullText="Select Diagnoses"
                                                      TextFieldName="Name"
                                                      ValueFieldName="Id"
                                                      @oninput="OnInputDiagnosis"
                                                      SelectedItemChanged="((DiagnosisDto e) => SelectedItemChanged(e))"
                                                      @bind-Value="a.DiagnosisId">
                                            <Columns>
                                                <DxListEditorColumn FieldName="@nameof(DiagnosisDto.Code)" />
                                                <DxListEditorColumn FieldName="@nameof(DiagnosisDto.Name)" Caption="Name" />
                                                <DxListEditorColumn FieldName="CronisCategory.Name" Caption="Chronic Category" />
                                            </Columns>

                                        </MyDxComboBox>
                                        <ValidationMessage For="@(()=>a.DiagnosisId)" />
                                    </DxFormLayoutItem>
                                    @* } *@
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Planning" ColSpanMd="12">
                                        @*  <MyTextBox @bind-Text="@a.Planning"
                                                                                                               NullText="Name" /> *@ 
                                        </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Medication Therapy" ColSpanMd="12">
                                        <MyTextBox @bind-Text="@a.MedicationTherapy"
                                                   NullText="Medication Therapy" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Non Medication Therapy" ColSpanMd="12">
                                        <MyTextBox @bind-Text="@a.NonMedicationTherapy"
                                                   NullText="NonMedication Therapy" />
                                    </DxFormLayoutItem>
                                </DxFormLayout>
                            </EditFormTemplate>

                        </_BaseMyGrid>


                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="BMHP" ColSpanMd="12">
                            <MyTextBox @bind-Text="@GeneralConsultanService.BMHP"
                                       NullText="BMHP" />
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </div>
            </div>
        </div>
    </div>

</DxTabPage>

@code {
    [Parameter] public GeneralConsultanServiceDto GeneralConsultanService { get; set; } = new();
    [Parameter] public User UserLogin { get; set; } = new();



    private bool IsStatus(EnumStatusGeneralConsultantService status) => GeneralConsultanService.Status == status;
    private bool IsLoading = false;
    private bool PanelVisible = false;
    private bool IsLoadingz = false;

    private IGrid Grid { get; set; }
    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];

    private int FocusedGridTabCPPTRowVisibleIndex { get; set; }

    private List<DiagnosisDto> Diagnoses = [];
    private List<GeneralConsultanCPPTDto> GeneralConsultanCPPTs = [];
    private List<NursingDiagnosesDto> NursingDiagnoses = [];

    private async Task NewItemCPPT_Click()
    {
        if (NursingDiagnoses.Count == 0)
            await LoadDataNursingDiagnoses();
        if (Diagnoses.Count == 0)
            await LoadDataDiagnoses();

        await Grid.StartEditNewRowAsync();
    }

    private async Task RefreshCPPT_Click()
    {
        await LoadData();
    }


    private object Data { get; set; }
    private async Task LoadData()
    {
        try
        {
            PanelVisible = true;
            SelectedDataItems = [];
            var dataSource = new GridDevExtremeDataSource<GeneralConsultanCPPT>(await Mediator.Send(new GetQueryGeneralConsultanServiceCPPT()))
                {
                    CustomizeLoadOptions = (loadOptions) =>
                    {
                        loadOptions.PrimaryKey = ["Id"];
                        loadOptions.PaginateViaPrimaryKey = true;
                    }
                };
            Data = dataSource;
            PanelVisible = false;
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }


    private async Task EditItemCPPT_Click()
    {
        try
        {
            await Grid.StartEditRowAsync(FocusedGridTabCPPTRowVisibleIndex);

            var a = (Grid.GetDataItem(FocusedGridTabCPPTRowVisibleIndex) as GeneralConsultanCPPT ?? new());
            NursingDiagnoses = (await Mediator.Send(new GetNursingDiagnosesQuery
                {
                    Predicate = x => x.Id == a.NursingDiagnosesId
                })).Item1;
            Diagnoses = (await Mediator.Send(new GetDiagnosisQuery
                {
                    Predicate = x => x.Id == a.DiagnosisId
                })).Item1;

            if (NursingDiagnoses.Count == 0)
                await LoadDataNursingDiagnoses();
            if (Diagnoses.Count == 0)
                await LoadDataDiagnoses();

            IsLoading = false;
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    private void DeleteItemCPPT_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedGridTabCPPTRowVisibleIndex);
    }

    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;
    }

    private void GridTabCPPT_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;
    }

    private async Task OnSaveCPPT(GridEditModelSavingEventArgs e)
    {
        try
        {
            IsLoading = true;

            var editModel = (GeneralConsultanCPPT)e.EditModel;

            editModel.GeneralConsultanServiceId = GeneralConsultanService.Id;

            editModel.Planning = $"{editModel.MedicationTherapy} {editModel.NonMedicationTherapy}";

            if (editModel.Id == 0)
            {
                await Mediator.Send(new CreateGeneralConsultanCPPTRequest(editModel.Adapt<GeneralConsultanCPPTDto>()));
            }
            else
            {
                await Mediator.Send(new UpdateGeneralConsultanCPPTRequest(editModel.Adapt<GeneralConsultanCPPTDto>()));
            }

            await LoadData();
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    private async Task OnDeleteCPPT(GridDataItemDeletingEventArgs e)
    {
        try
        {
            IsLoading = true;
            if (SelectedDataItems.Count == 0)
            {
                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(((GeneralConsultanCPPT)e.DataItem).Id));
            }
            else
            {
                var selectedGeneralConsultanCPPTs = SelectedDataItems.Adapt<List<GeneralConsultanCPPT>>();
                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(ids: selectedGeneralConsultanCPPTs.Select(x => x.Id).ToList()));
            }

            await LoadData();
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #region ComboBox NursingDiagnoses

    private NursingDiagnosesDto SelectedNursingDiagnoses { get; set; } = new();

    private async Task SelectedItemChanged(NursingDiagnosesDto e)
    {
        if (e is null)
        {
            SelectedNursingDiagnoses = new();
            await LoadDataNursingDiagnoses();
        }
        else
            SelectedNursingDiagnoses = e;
    }

    private CancellationTokenSource? _ctsNursingDiagnoses;

    private async Task OnInputNursingDiagnoses(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try
        {
            _ctsNursingDiagnoses?.Cancel();
            _ctsNursingDiagnoses?.Dispose();
            _ctsNursingDiagnoses = new CancellationTokenSource();

            await Task.Delay(Helper.CBX_DELAY, _ctsNursingDiagnoses.Token);

            await LoadDataNursingDiagnoses(e.Value?.ToString() ?? "");
        }
        finally
        {
            _ctsNursingDiagnoses?.Dispose();
            _ctsNursingDiagnoses = null;
        }
    }

    private async Task LoadDataNursingDiagnoses(string? e = "", Expression<Func<NursingDiagnoses, bool>>? predicate = null)
    {
        try
        {
            NursingDiagnoses = await Mediator.QueryGetComboBox<NursingDiagnoses, NursingDiagnosesDto>(e, predicate);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #endregion ComboBox NursingDiagnoses

    #region ComboBox Diagnosis

    private DiagnosisDto SelectedDiagnosis { get; set; } = new();

    private async Task SelectedItemChanged(DiagnosisDto e)
    {
        if (e is null)
        {
            SelectedDiagnosis = new();
            await LoadDataDiagnoses();
        }
        else
            SelectedDiagnosis = e;
    }

    private CancellationTokenSource? _ctsDiagnosis;

    private async Task OnInputDiagnosis(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        try
        {
            _ctsDiagnosis?.Cancel();
            _ctsDiagnosis?.Dispose();
            _ctsDiagnosis = new CancellationTokenSource();

            await Task.Delay(Helper.CBX_DELAY, _ctsDiagnosis.Token);

            await LoadDataDiagnoses(e.Value?.ToString() ?? "");
        }
        finally
        {
            _ctsDiagnosis?.Dispose();
            _ctsDiagnosis = null;
        }
    }

    private async Task LoadDataDiagnoses(string? e = "", Expression<Func<Diagnosis, bool>>? predicate = null)
    {
        try
        {
            Diagnoses = await Mediator.QueryGetComboBox<Diagnosis, DiagnosisDto>(e, predicate);
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { IsLoading = false; }
    }

    #endregion ComboBox Diagnosis


}
