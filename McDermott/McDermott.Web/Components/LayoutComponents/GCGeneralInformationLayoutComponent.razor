@typeparam TGCForm where TGCForm : GeneralConsultanServiceDto


<div class="w-100">
    <div class="w-100">
        <div class="card">
            <div class="card-header">
                <span class="fw-bolder">General Consultation Service Information</span>
            </div>

            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <DxFormLayout>
                            @if (GeneralConsultanService.Id != 0)
                            {
                                <DxFormLayoutItem ColSpanMd="12">
                                    <h3 class="fw-bolder">@GeneralConsultanService.Reference</h3>
                                </DxFormLayoutItem>
                            }
                        </DxFormLayout>
                    </div>
                    <div class="col-md-6">
                        @{
                            if (GeneralConsultanService.Patient is null)
                            {
                                GeneralConsultanService.Patient = new();
                                ToastService.ShowInfo("GeneralConsultanService.Patient Null");
                            }
                        }
                        <DxFormLayout>
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption normal-caption" Caption="Patient" ColSpanMd="12">
                                <MyDxComboBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              Data="@Patients"
                                              NullText="Select Patient..."
                                              @bind-Value="@GeneralConsultanService.PatientId"
                                              TextFieldName="Name"
                                              SelectedItemChanged="@((UserDto e) => SelectedItemPatientChanged(e))"
                                              ValueFieldName="Id">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.PatientId)"   />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.NoRm)" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />

                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.NoId)" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Current Mobile" ColSpanMd="12">
                                <DxMaskedInput @bind-Value="@UserForm.CurrentMobile"
                                               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                               NullText="Current Mobile"
                                               ReadOnly="@(!(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned) ||
                                  GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.NurseStation) ||
                                  GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician)))" ShowValidationIcon="true">
                                </DxMaskedInput>
                                <ValidationMessage For="@(() => UserForm.CurrentMobile)"   />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                                <Template>
                                    <DxGridLayout>
                                        <Rows>
                                            <DxGridLayoutRow />
                                        </Rows>
                                        <Columns>
                                            <DxGridLayoutColumn Width="90%" />
                                            <DxGridLayoutColumn Width="30%" />
                                        </Columns>
                                        <Items>
                                            <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                <Template>
                                                    <DxSpinEdit MinValue="0" @bind-Value="@GeneralConsultanService.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                                </Template>
                                            </DxGridLayoutItem>
                                            <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                <Template>
                                                    <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                                </Template>
                                            </DxGridLayoutItem>
                                        </Items>
                                    </DxGridLayout>

                                </Template>
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                                <MyDxComboBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              Data="@RegisType"
                                              NullText="Select Registration..."
                                              AllowUserInput="true"
                                              SelectedItemChanged="@((string city) => SelectedItemRegisTypeChanged(city))"
                                              @bind-Value="@GeneralConsultanService.TypeRegistration">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.TypeRegistration)" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" CaptionCssClass="required-caption normal-caption" Caption="Return Status" ColSpanMd="12">
                                <MyDxComboBox Data="@Helper._homeStatusTemps"
                                              NullText="Return Status..."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))"
                                              @bind-Value="@GeneralConsultanService.HomeStatus"
                                              TextFieldName="Name"
                                              ValueFieldName="Code">
                                </MyDxComboBox>
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))" @bind-Checked="@GeneralConsultanService.IsAlertInformationSpecialCase" />
                            </DxFormLayoutItem>
                        </DxFormLayout>
                    </div>
                    <div class="col-md-6">
                        <DxFormLayout>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Patient Type" ColSpanMd="12">
                                <MyDxComboBox Data="@ClassTypes"
                                              NullText="Select Patient Type.."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              TextFieldName="Name" ValueFieldName="Id"
                                              @bind-Value="@GeneralConsultanService.ClassTypeId">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.ClassTypeId)" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Service" ColSpanMd="12">
                                <MyDxComboBox Data="@Services"
                                              NullText="Select Service.."
                                              ReadOnly="@ReadOnlyService"
                                              SelectedItemChanged="@((ServiceDto e) => SelectedItemServiceChanged(e))"
                                              @bind-Value="@GeneralConsultanService.ServiceId" TextFieldName="Name" ValueFieldName="Id">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.ServiceId)" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physicion" ColSpanMd="12">
                                <MyDxComboBox Data="@Physicions"
                                              NullText="Select Physicion..."
                                              @bind-Value="@GeneralConsultanService.PratitionerId"
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              TextFieldName="Name"
                                              ValueFieldName="Id"
                                              InputId="CbDoctoreName">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.PratitionerId)" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Payment Method" ColSpanMd="12">
                                <MyDxComboBox Data="@Payments"
                                              NullText="Payment Method.."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              SelectedItemChanged="@((string e) => SelectedItemPaymentChanged(e))"
                                              @bind-Value="GeneralConsultanService.Payment">

                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.Payment)" />
                            </DxFormLayoutItem>
                            @if (GeneralConsultanService.Payment == "Insurance" || GeneralConsultanService.Payment == "BPJS")
                            {
                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Insurance Policy" ColSpanMd="12">
                                    <MyDxComboBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                                  Data="@InsurancePolicies"
                                                  SelectedItemChanged="@((InsurancePolicyDto? e) => SelectedItemInsurancePolicyChanged(e))"
                                                  @bind-Value="@SelectedInsurancePolicy"
                                                  NullText="Select Insurance Policy..."
                                                  EditFormat="{0} - {1}">
                                        <Columns>
                                            <DxListEditorColumn FieldName="@nameof(InsurancePolicyDto.PolicyNumber)"
                                                                Caption="No Card" />

                                            <DxListEditorColumn FieldName="Insurance.Name"
                                                                Caption="Insurance Company" />
                                        </Columns>
                                    </MyDxComboBox>
                                </DxFormLayoutItem>
                            }
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Registration Date" ColSpanMd="12">
                                <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                            @bind-Date="@GeneralConsultanService.RegistrationDate"
                                            Mask="@DateTimeMask.ShortDate"
                                            NullText="Select Registration Date">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => GeneralConsultanService.RegistrationDate)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Visible="IsVaccinationLocation" CaptionCssClass="normal-caption" Caption="Location" ColSpanMd="12">
                                <MyDxComboBox Data="@Locations"
                                              NullText="Select Location..."
                                              TextFieldName="NameAndParent"
                                              ValueFieldName="Id"
                                              @bind-Value="GeneralConsultanService.LocationId">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.LocationId)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" CaptionCssClass="normal-caption" Caption="Sick Leave" ColSpanMd="12">
                                <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Checked="@GeneralConsultanService.IsSickLeave" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Visible="@(GeneralConsultanService.IsSickLeave && (GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished)))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                                <Template>
                                    <DxGridLayout ColumnSpacing="8px">
                                        <Rows>
                                            <DxGridLayoutRow />
                                        </Rows>
                                        <Columns>
                                            <DxGridLayoutColumn />
                                            <DxGridLayoutColumn />
                                        </Columns>
                                        <Items>
                                            <DxGridLayoutItem Row="0" Column="0">
                                                <Template>
                                                    <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Date="@GeneralConsultanService.StartDateSickLeave" Mask="@DateTimeMask.ShortDate" NullText="Select Start Date" />
                                                </Template>
                                            </DxGridLayoutItem>
                                            <DxGridLayoutItem Row="0" Column="1">
                                                <Template>
                                                    <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Date="@GeneralConsultanService.EndDateSickLeave" Mask="@DateTimeMask.ShortDate" NullText="Select End Date" />
                                                </Template>
                                            </DxGridLayoutItem>
                                        </Items>
                                    </DxGridLayout>
                                </Template>
                            </DxFormLayoutItem>

                            @if (GeneralConsultanService.Patient is not null && GeneralConsultanService.Patient.Gender is not null && GeneralConsultanService.Patient.Gender.Name.Trim().Equals("Female"))
                            {
                                <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" CaptionCssClass="normal-caption" Caption="Maternity Leave" ColSpanMd="12">
                                    <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Checked="@GeneralConsultanService.IsMaternityLeave" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Visible="@(GeneralConsultanService.IsMaternityLeave && (GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished)))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                                    <Template>
                                        <DxGridLayout ColumnSpacing="8px">
                                            <Rows>
                                                <DxGridLayoutRow />
                                            </Rows>
                                            <Columns>
                                                <DxGridLayoutColumn />
                                                <DxGridLayoutColumn />
                                            </Columns>
                                            <Items>
                                                <DxGridLayoutItem Row="0" Column="0">
                                                    <Template>
                                                        <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))"
                                                                    DateChanged="@((DateTime e) => SelectedMaternityStartDateChanged(e))"
                                                                    Date="@GeneralConsultanService.StartMaternityLeave"
                                                                    DateExpression="@(() => GeneralConsultanService.StartMaternityLeave)"
                                                                    Mask="@DateTimeMask.ShortDate"
                                                                    NullText="Select Start Date">
                                                        </DxDateEdit>
                                                    </Template>
                                                </DxGridLayoutItem>
                                                <DxGridLayoutItem Row="0" Column="1">
                                                    <Template>
                                                        <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Date="@GeneralConsultanService.EndMaternityLeave" Mask="@DateTimeMask.ShortDate" NullText="Select End Date" />
                                                    </Template>
                                                </DxGridLayoutItem>
                                            </Items>
                                        </DxGridLayout>
                                    </Template>
                                </DxFormLayoutItem>
                            }

                        </DxFormLayout>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public PatientAllergyDto PatientAllergy { get; set; } = new();
    [Parameter] public InsurancePolicyDto SelectedInsurancePolicy { get; set; } = new();
    [Parameter] public UserDto UserForm { get; set; }
    [Parameter] public TGCForm GeneralConsultanService { get; set; }
    [Parameter] public IEnumerable<UserDto> Patients { get; set; } = [];
    [Parameter] public IEnumerable<string> RegisType { get; set; } = [];
    [Parameter] public IEnumerable<ClassTypeDto> ClassTypes { get; set; } = [];
    [Parameter] public IEnumerable<ServiceDto> Services { get; set; } = [];
    [Parameter] public IEnumerable<UserDto> Physicions { get; set; } = [];
    [Parameter] public IEnumerable<string> Payments { get; set; } = [];
    [Parameter] public IEnumerable<InsurancePolicyDto> InsurancePolicies { get; set; } = [];
    [Parameter] public IEnumerable<AllergyDto> WeatherAllergies { get; set; } = [];
    [Parameter] public IEnumerable<AllergyDto> FoodAllergies { get; set; } = [];
    [Parameter] public IEnumerable<AllergyDto> PharmacologyAllergies { get; set; } = [];
    [Parameter] public IEnumerable<LocationDto> Locations { get; set; } = [];
    [Parameter] public EventCallback<UserDto> CbSelectedItemPatientChanged { get; set; }
    [Parameter] public EventCallback<string> CbSelectedItemRegisTypeChanged { get; set; }
    [Parameter] public EventCallback<ServiceDto> CbSelectedItemServiceChanged { get; set; } 
    [Parameter] public EventCallback<InsurancePolicyDto> CbSelectedItemInsurancePolicyChanged { get; set; }  
    [Parameter] public EventCallback<string> CbSelectedItemPaymentChanged { get; set; }
    [Parameter] public EventCallback<DateTime> CbSelectedMaternityStartDateChanged { get; set; }
    [Parameter] public EventCallback<IEnumerable<AllergyDto>> CbSelectedFoodAllergies { get; set; }
    [Parameter] public EventCallback<IEnumerable<AllergyDto>> CbSelectedPharmacologyAllergies { get; set; }
    [Parameter] public EventCallback<IEnumerable<AllergyDto>> CbSelectedWeatherAllergies { get; set; }

    [Parameter] public bool ReadOnlyService { get; set; } = false;
    [Parameter] public bool IsVaccinationLocation { get; set; } = false;


    private IEnumerable<AllergyDto> _selectedPharmacologyAllergies;
    protected IEnumerable<AllergyDto> SelectedPharmacologyAllergies
    {
        get => _selectedPharmacologyAllergies;
        set
        {
            _selectedPharmacologyAllergies = value;
            // Invoke the callback to notify the parent component
            CbSelectedPharmacologyAllergies.InvokeAsync(value);
        }
    }
    private IEnumerable<AllergyDto> _selectedFoodAllergies;
    protected IEnumerable<AllergyDto> SelectedFoodAllergies
    {
        get => _selectedFoodAllergies;
        set
        {
            _selectedFoodAllergies = value;
            // Invoke the callback to notify the parent component
            CbSelectedFoodAllergies.InvokeAsync(value);
        }
    }
    private IEnumerable<AllergyDto> _selectedWeatherAllergies;
    protected IEnumerable<AllergyDto> SelectedWeatherAllergies
    {
        get => _selectedWeatherAllergies;
        set
        {
            _selectedWeatherAllergies = value;
            // Invoke the callback to notify the parent component
            CbSelectedWeatherAllergies.InvokeAsync(value);
        }
    }
    private async Task SelectedItemInsurancePolicyChanged(InsurancePolicyDto selectedItem)
    {
        SelectedInsurancePolicy = selectedItem;
        await CbSelectedItemInsurancePolicyChanged.InvokeAsync(selectedItem);
    }

    protected void SelectedMaternityStartDateChanged(DateTime selectedItem)
    {
        CbSelectedMaternityStartDateChanged.InvokeAsync(selectedItem);
    }

    protected void SelectedItemPaymentChanged(string selectedItem)
    {
        CbSelectedItemPaymentChanged.InvokeAsync(selectedItem);
    }

    protected void SelectedItemServiceChanged(ServiceDto selectedItem)
    {
        CbSelectedItemServiceChanged.InvokeAsync(selectedItem);
    }

    protected void SelectedItemRegisTypeChanged(string selectedItem)
    {
        CbSelectedItemRegisTypeChanged.InvokeAsync(selectedItem);
    }

    protected void SelectedItemPatientChanged(UserDto selectedItem)
    {
        CbSelectedItemPatientChanged.InvokeAsync(selectedItem);
    }
    private List<string> YesNoOptions =
    [
    "Yes",
        "No"
    ];
    private List<string> RiwayatPenyakitKeluarga =
    [
    "DM",
        "Hipertensi",
        "Cancer",
        "Jantung",
        "TBC",
        "Anemia",
        "Other",
        ];
        }
