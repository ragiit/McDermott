@using Microsoft.AspNetCore.Components
@using DevExpress.Blazor
@using System.Linq.Expressions

<div class="w-100">
    <div class="card">
        <div class="card-header">
            <span class="fw-bolder">@HeaderText</span>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <DxFormLayout>
                        @if (GeneralConsultanService?.Id != 0)
                        {
                            <DxFormLayoutItem ColSpanMd="12">
                                <h3 class="fw-bolder">@GeneralConsultanService.Reference</h3>
                            </DxFormLayoutItem>
                        }
                    </DxFormLayout>
                </div>

                <div class="col-md-6">
                    @{

                        if (GeneralConsultanService.Patient is null)
                        {
                            GeneralConsultanService.Patient = new();
                        }
                        if (GeneralConsultanService.Patient.Occupational is null)
                        {
                            GeneralConsultanService.Patient.Occupational = new();
                        }
                        if (GeneralConsultanService.Patient.Department is null)
                        {
                            GeneralConsultanService.Patient.Department = new();
                        }

                        if (GeneralConsultanService.Patient.Supervisor is null)
                        {
                            GeneralConsultanService.Patient.Supervisor = new();
                        }
                    }
                    <DxFormLayout>
                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="@(IsAccident ? "Employee" : "Patient")" ColSpanMd="12">
                            <MyDxComboBox Data="@Patients"
                                          NullText="@(IsAccident ? "Select Employee" : "Select Patient")"
                                          TextFieldName="Name"
                                          ValueFieldName="Id"
                                          ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                          @oninput="@OnInputPatient"
                                          SelectedItemChanged="@OnSelectedPatientChanged"
                                          @bind-Value="@GeneralConsultanService.PatientId">
                                <Columns>
                                    @if (IsAccident)
                                    {
                                        <DxListEditorColumn FieldName="NIP" Caption="NIP" />
                                    }
                                    else
                                    {
                                        <DxListEditorColumn FieldName="NoRm" Caption="Medical Record" />

                                    }
                                    <DxListEditorColumn FieldName="Name" />
                                    <DxListEditorColumn FieldName="Email" />
                                    <DxListEditorColumn FieldName="MobilePhone" Caption="Mobile Phone" />
                                    <DxListEditorColumn FieldName="Gender" />
                                    <DxListEditorColumn FieldName="DateOfBirth" Caption="Date Of Birth" />
                                </Columns>
                            </MyDxComboBox>
                            <ValidationMessage For="@(() => GeneralConsultanService.PatientId)" />
                        </DxFormLayoutItem>

                        @if (IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Employee Number" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.NIP)" NullText="Employee Number" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Department" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.Department.Name)" NullText="Department" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Supervisor" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.Supervisor.Name)" NullText="Supervisor" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                        }
                        else
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.NoRm)" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                        }

                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                            <DxTextBox @bind-Text="(GeneralConsultanService.Patient.NoId)" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Current Mobile" ColSpanMd="12">
                            <DxMaskedInput @bind-Value="@UserForm.CurrentMobile"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           NullText="Current Mobile"
                                           ReadOnly="ReadOnlyForm()"
                                           ShowValidationIcon="true">
                            </DxMaskedInput>
                            <ValidationMessage For="@(() => UserForm.CurrentMobile)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                            <Template>
                                <DxGridLayout>
                                    <Rows>
                                        <DxGridLayoutRow />
                                    </Rows>
                                    <Columns>
                                        <DxGridLayoutColumn Width="90%" />
                                        <DxGridLayoutColumn Width="30%" />
                                    </Columns>
                                    <Items>
                                        <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                            <Template>
                                                <DxSpinEdit MinValue="0" @bind-Value="@GeneralConsultanService.Patient.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                            </Template>
                                        </DxGridLayoutItem>
                                        <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                            <Template>
                                                <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                            </Template>
                                        </DxGridLayoutItem>
                                    </Items>
                                </DxGridLayout>

                            </Template>
                        </DxFormLayoutItem>

                        @if (IsMaternity)
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Occupational" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.Occupational.Name)" NullText="Occupational" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Address" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.IdCardAddress1)" NullText="Address" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Blood Type" ColSpanMd="12">
                                <DxTextBox @bind-Text="(GeneralConsultanService.Patient.BloodType)" NullText="Blood Type" ReadOnly InputCssClass="fw-normal" />
                            </DxFormLayoutItem>
                        }

                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                            <MyDxComboBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                          Data="@RegisType"
                                          NullText="Select Registration..."
                                          AllowUserInput="true"
                                          @bind-Value="@GeneralConsultanService.TypeRegistration">
                            </MyDxComboBox>
                            <ValidationMessage For="@(() => GeneralConsultanService.TypeRegistration)" />
                        </DxFormLayoutItem>

                        @if (IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Payment Method" ColSpanMd="12">
                                <MyDxComboBox Data="@Payments"
                                              NullText="Payment Method.."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              SelectedItemChanged="@((string e) => SelectedItemPaymentChanged(e))"
                                              @bind-Value="GeneralConsultanService.Payment">

                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.Payment)" />
                            </DxFormLayoutItem>

                            var a = InsurancePolicies.FirstOrDefault(x => x.Id == GeneralConsultanService.InsurancePolicyId);
                            var res = "-";
                            if (a is not null)
                            {
                                res = $"{a.PstProl}/{a.PstPrb}";
                            }

                            @if (GeneralConsultanService.Payment == "Insurance" || GeneralConsultanService.Payment == "BPJS")
                            {
                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Insurance Policy" ColSpanMd="12">
                                    <MyDxComboBox Data="InsurancePolicies"
                                                  ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                                  NullText="Select Insurance Policy"
                                                  TextFieldName="Name"
                                                  EditFormat="{0} - {1}"
                                                  ValueFieldName="Id"
                                                  @oninput="OnInputInsurancePolicy"
                                                  SelectedItemChanged="((InsurancePolicyDto e) => SelectedItemInsurancePolicyChanged(e))"
                                                  @bind-Value="GeneralConsultanService.InsurancePolicyId">
                                        <Columns>
                                            <DxListEditorColumn FieldName="@nameof(InsurancePolicyDto.PolicyNumber)"
                                                                Caption="No Card" />

                                            <DxListEditorColumn FieldName="Insurance.Name"
                                                                Caption="Insurance Company" />
                                        </Columns>
                                    </MyDxComboBox>
                                    <ValidationMessage For="@(()=> GeneralConsultanService.InsurancePolicyId)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="PRB" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@res" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                                </DxFormLayoutItem>
                            }
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Registration Date" ColSpanMd="12">
                                <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                            @bind-Date="@GeneralConsultanService.RegistrationDate"
                                            Mask="@DateTimeMask.ShortDate"
                                            DisplayFormat="@Helper.DefaultFormatDate"
                                            NullText="Select Registration Date">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => GeneralConsultanService.RegistrationDate)" />
                            </DxFormLayoutItem>
                        }

                        @if (!IsAccident)
                        {
                            <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) ||GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Midwife) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" CaptionCssClass="required-caption normal-caption" Caption="Discharge Plan" ColSpanMd="12">
                                <MyDxComboBox Data="@Helper._homeStatusTemps"
                                              NullText="Select Discharge Plan"
                                              ReadOnly="@IsReadOnlyForm"
                                              @bind-Value="@GeneralConsultanService.HomeStatus"
                                              TextFieldName="Name"
                                              ValueFieldName="Code">
                                </MyDxComboBox>
                            </DxFormLayoutItem>
                        }

                        @if (IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))" @bind-Checked="@GeneralConsultanService.IsAlertInformationSpecialCase" />
                            </DxFormLayoutItem>
                        }
                    </DxFormLayout>
                </div>

                <div class="col-md-6">
                    <DxFormLayout>
                        @if (!IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Patient Type" ColSpanMd="12">
                                <MyDxComboBox Data="@ClassTypes"
                                              NullText="Select Patient Type.."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              @bind-Value="@GeneralConsultanService.ClassType">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.ClassType)" />
                            </DxFormLayoutItem>
                        }

                        @if (!IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Service" ColSpanMd="12">
                                <MyDxComboBox Data="Services"
                                              NullText="Select Service"
                                              TextFieldName="Name"
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              ValueFieldName="Id"
                                              @oninput="OnInputService"
                                              SelectedItemChanged="((ServiceDto e) => SelectedItemServiceChanged(e))"
                                              @bind-Value="@GeneralConsultanService.ServiceId">
                                    <Columns>
                                        <DxListEditorColumn FieldName="@nameof(Service.Name)" Caption="Name" />
                                        <DxListEditorColumn FieldName="@nameof(Service.Code)" Caption="Code" />
                                    </Columns>
                                </MyDxComboBox>
                                <ValidationMessage For="@(()=>GeneralConsultanService.ServiceId)" />
                            </DxFormLayoutItem>
                        }

                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physicion" ColSpanMd="12">
                            <MyDxComboBox Data="Physicions"
                                          NullText="Select Physicion"
                                          TextFieldName="Name"
                                          ValueFieldName="Id"
                                          @oninput="OnInputPhysicion"
                                          ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                          SelectedItemChanged="((UserDto e) => SelectedItemPhysicionChanged(e))"
                                          @bind-Value="@GeneralConsultanService.PratitionerId">
                                <Columns>
                                    <DxListEditorColumn FieldName="Name" />
                                    <DxListEditorColumn FieldName="Email" />
                                    <DxListEditorColumn FieldName="MobilePhone" Caption="Mobile Phone" />
                                    <DxListEditorColumn FieldName="Gender" />
                                </Columns>
                            </MyDxComboBox>
                            <ValidationMessage For="@(()=>GeneralConsultanService.PratitionerId)" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Safety Personel" ColSpanMd="12">
                            <MyDxComboBox Data="SafetyPersonels"
                                          NullText="Select Physicion"
                                          TextFieldName="Name"
                                          ValueFieldName="Id"
                                          @oninput="OnInputSafetyPersonel"
                                          ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                          SelectedItemChanged="((UserDto e) => SelectedItemSafetyPersonelChanged(e))"
                                          @bind-Value="@Accident.SafetyPersonnelId">
                                <Columns>
                                    <DxListEditorColumn FieldName="Name" />
                                    <DxListEditorColumn FieldName="Email" />
                                    <DxListEditorColumn FieldName="MobilePhone" Caption="Mobile Phone" />
                                </Columns>
                            </MyDxComboBox>
                            <ValidationMessage For="@(()=>Accident.SafetyPersonnelId)" />
                        </DxFormLayoutItem>

                        @if (IsAccident)
                        {
                            <DxFormLayoutItem Caption="Class" CaptionCssClass="normal-caption" ColSpanMd="12">
                                <MyDxComboBox Data="@ClassType"
                                              ReadOnly="@(Accident.Status.Equals(EnumStatusAccident.Done))"
                                              NullText="Select Class..."
                                              @bind-Value="Accident.EmployeeClass">
                                </MyDxComboBox>
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Sent" ColSpanMd="12">
                                <MyDxComboBox Data="@SentType"
                                              NullText="Select Type..."
                                              ReadOnly="@(Accident.Status.Equals(EnumStatusAccident.Done))"
                                              @bind-Value="Accident.Sent">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => Accident.Sent)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Accident Location" ColSpanMd="12">
                                <MyDxComboBox Data="@AccidentLocations"
                                              ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                              NullText="Select Accident Location..."
                                              ReadOnly="Accident.Status.Equals(EnumStatusAccident.Done)"
                                              @bind-Value="Accident.AccidentLocation">
                                </MyDxComboBox>
                                <ValidationMessage For="@(() => Accident.AccidentLocation)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Date Of Occurrence" ColSpanMd="12">
                                <DxDateEdit ShowValidationIcon="true"
                                            @bind-Date="Accident.DateOfOccurrence"
                                            TimeSectionVisible="true"
                                            ReadOnly="@(Accident.Status.Equals(EnumStatusAccident.Done))"
                                            NullText="Select Date Of Occurrence">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => Accident.DateOfOccurrence)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Date Of First Treatment" ColSpanMd="12">
                                <DxDateEdit ShowValidationIcon="true"
                                            @bind-Date="Accident.DateOfFirstTreatment"
                                            TimeSectionVisible="true"
                                            ReadOnly="@(Accident.Status.Equals(EnumStatusAccident.Done))"
                                            NullText="Select Date Of First Treatment">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => Accident.DateOfFirstTreatment)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem Caption="Area Of Yard" CaptionCssClass="normal-caption" ColSpanMd="12">
                                <DxTextBox ShowValidationIcon="true"
                                           @bind-Text="Accident.AreaOfYard"
                                           ReadOnly="@(Accident.Status.Equals(EnumStatusAccident.Done))"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           NullText="Area Of Yard" />
                                <ValidationMessage For="@(() => Accident.AreaOfYard)" />
                            </DxFormLayoutItem>

                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Project" ColSpanMd="12">
                                <MyDxComboBox Data="Projects"
                                              NullText="Select Project"
                                              TextFieldName="Name"
                                              ValueFieldName="Id"
                                              @oninput="OnInputProject"
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              SelectedItemChanged="((ProjectDto e) => SelectedItemProjectChanged(e))"
                                              @bind-Value="@Accident.ProjectId">
                                    <Columns>
                                        <DxListEditorColumn FieldName="@nameof(ProjectDto.Name)" Caption="Name" />
                                        <DxListEditorColumn FieldName="@nameof(ProjectDto.Code)" Caption="Code" />
                                    </Columns>
                                </MyDxComboBox>
                                <ValidationMessage For="@(()=>Accident.ProjectId)" />
                            </DxFormLayoutItem>

                        }

                        @if (!IsAccident)
                        {
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Payment Method" ColSpanMd="12">
                                <MyDxComboBox Data="@Payments"
                                              NullText="Payment Method.."
                                              ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                              SelectedItemChanged="@((string e) => SelectedItemPaymentChanged(e))"
                                              @bind-Value="GeneralConsultanService.Payment">

                                </MyDxComboBox>
                                <ValidationMessage For="@(() => GeneralConsultanService.Payment)" />
                            </DxFormLayoutItem>

                            var a = InsurancePolicies.FirstOrDefault(x => x.Id == GeneralConsultanService.InsurancePolicyId);
                            var res = "-";
                            if (a is not null)
                            {
                                res = $"{a.PstProl}/{a.PstPrb}";
                            }

                            @if (GeneralConsultanService.Payment == "Insurance" || GeneralConsultanService.Payment == "BPJS")
                            {
                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Insurance Policy" ColSpanMd="12">
                                    <MyDxComboBox Data="InsurancePolicies"
                                                  ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                                  NullText="Select Insurance Policy"
                                                  TextFieldName="Name"
                                                  EditFormat="{0} - {1}"
                                                  ValueFieldName="Id"
                                                  @oninput="OnInputInsurancePolicy"
                                                  SelectedItemChanged="((InsurancePolicyDto e) => SelectedItemInsurancePolicyChanged(e))"
                                                  @bind-Value="GeneralConsultanService.InsurancePolicyId">
                                        <Columns>
                                            <DxListEditorColumn FieldName="@nameof(InsurancePolicyDto.PolicyNumber)"
                                                                Caption="No Card" />

                                            <DxListEditorColumn FieldName="Insurance.Name"
                                                                Caption="Insurance Company" />
                                        </Columns>
                                    </MyDxComboBox>
                                    <ValidationMessage For="@(()=> GeneralConsultanService.InsurancePolicyId)" />
                                </DxFormLayoutItem>


                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="PRB" ColSpanMd="12">
                                    <DxTextBox @bind-Text="@res" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                                </DxFormLayoutItem>
                            }
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Registration Date" ColSpanMd="12">
                                <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                            @bind-Date="@GeneralConsultanService.RegistrationDate"
                                            Mask="@DateTimeMask.ShortDate"
                                            DisplayFormat="@Helper.DefaultFormatDate"
                                            NullText="Select Registration Date">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => GeneralConsultanService.RegistrationDate)" />
                            </DxFormLayoutItem>
                        }

                        @if (IsVaccination)
                        {
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Location" ColSpanMd="12">
                                <MyDxComboBox Data="Locations"
                                              NullText="Select Location"
                                              TextFieldName="Name"
                                              ValueFieldName="Id"
                                              @oninput="OnInputLocation"
                                              SelectedItemChanged="((LocationDto e) => SelectedItemLocationChanged(e))"
                                              @bind-Value="@GeneralConsultanService.LocationId">
                                    <Columns>
                                        <DxListEditorColumn FieldName="Name" Caption="Name" />
                                        <DxListEditorColumn FieldName="ParentLocation.Name" Caption="Parent" />
                                    </Columns>
                                </MyDxComboBox>
                                <ValidationMessage For="@(()=>GeneralConsultanService.LocationId)" />
                            </DxFormLayoutItem>
                        }
                        @if (IsMaternity)
                        {
                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Patient Next Visit Schedule" ColSpanMd="12">
                                <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Planned))"
                                            @bind-Date="@GeneralConsultanService.PatientNextVisitSchedule"
                                            Mask="@DateTimeMask.ShortDate"
                                            DisplayFormat="@Helper.DefaultFormatDate"
                                            NullText="Select Patient Next Visit Schedule">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => GeneralConsultanService.PatientNextVisitSchedule)" />
                            </DxFormLayoutItem>
                        }

                        @if (GeneralConsultanService.AppointmentDate != null)
                        {
                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Follow Up" ColSpanMd="12">
                                <DxDateEdit @bind-Date="@GeneralConsultanService.AppointmentDate"
                                            Mask="@DateTimeMask.ShortDate"
                                            DisplayFormat="@Helper.DefaultFormatDate"
                                            ReadOnly
                                            NullText="Select Follow Up Date">
                                </DxDateEdit>
                                <ValidationMessage For="@(() => GeneralConsultanService.AppointmentDate)" />
                            </DxFormLayoutItem>
                        }

                        <DxFormLayoutItem CaptionCssClass="normal-caption" Visible="@(IsAccident || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" Caption="Sick Leave" ColSpanMd="12">
                            <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Checked="@GeneralConsultanService.IsSickLeave" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Visible="@(GeneralConsultanService.IsSickLeave && (GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished)))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                            <Template>
                                <DxGridLayout ColumnSpacing="8px">
                                    <Rows>
                                        <DxGridLayoutRow />
                                    </Rows>
                                    <Columns>
                                        <DxGridLayoutColumn />
                                        <DxGridLayoutColumn />
                                    </Columns>
                                    <Items>
                                        <DxGridLayoutItem Row="0" Column="0">
                                            <Template>
                                                <DxDateEdit DisplayFormat="@Helper.DefaultFormatDate"
                                                            ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))"
                                                            @bind-Date="@GeneralConsultanService.StartDateSickLeave"
                                                            Mask="@DateTimeMask.ShortDate"
                                                            NullText="Select Start Date" />
                                            </Template>
                                        </DxGridLayoutItem>
                                        <DxGridLayoutItem Row="0" Column="1">
                                            <Template>
                                                <DxDateEdit DisplayFormat="@Helper.DefaultFormatDate"
                                                            ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))"
                                                            @bind-Date="@GeneralConsultanService.EndDateSickLeave"
                                                            Mask="@DateTimeMask.ShortDate"
                                                            NullText="Select End Date" />
                                            </Template>
                                        </DxGridLayoutItem>
                                    </Items>
                                </DxGridLayout>
                            </Template>
                        </DxFormLayoutItem>

                        @if (!IsAccident)
                        {
                            @if (GeneralConsultanService.Patient is not null && GeneralConsultanService.Patient.Gender is not null && GeneralConsultanService.Patient.Gender.Trim().Equals("Female"))
                            {

                                @if (GeneralConsultanService != null && GeneralConsultanService.StartMaternityLeave == null)
                                {
                                    GeneralConsultanService.StartMaternityLeave = DateTime.Now;
                                }

                                <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" CaptionCssClass="normal-caption" Caption="Maternity Leave" ColSpanMd="12">
                                    <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Checked="@GeneralConsultanService.IsMaternityLeave" />
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Visible="@(GeneralConsultanService.IsMaternityLeave && (GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician) || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished)))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                                    <Template>
                                        <DxGridLayout ColumnSpacing="8px">
                                            <Rows>
                                                <DxGridLayoutRow />
                                            </Rows>
                                            <Columns>
                                                <DxGridLayoutColumn />
                                                <DxGridLayoutColumn />
                                            </Columns>
                                            <Items>
                                                <DxGridLayoutItem Row="0" Column="0">
                                                    <Template>
                                                        <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))"
                                                                    Date="@GeneralConsultanService.StartMaternityLeave"
                                                                    DateExpression="@(() => GeneralConsultanService.StartMaternityLeave)"
                                                                    DateChanged="@((DateTime? newValue) => SelectedItemMaternityChanged(newValue))"
                                                                    DisplayFormat="@Helper.DefaultFormatDate"
                                                                    NullText="Select Start Date">
                                                        </DxDateEdit>
                                                    </Template>
                                                </DxGridLayoutItem>
                                                <DxGridLayoutItem Row="0" Column="1">
                                                    <Template>
                                                        <DxDateEdit ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician))" @bind-Date="@GeneralConsultanService.EndMaternityLeave" Mask="@DateTimeMask.ShortDate" NullText="Select End Date" />
                                                    </Template>
                                                </DxGridLayoutItem>
                                            </Items>
                                        </DxGridLayout>
                                    </Template>
                                </DxFormLayoutItem>
                            }
                            <DxFormLayoutItem Visible="@(GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.NurseStation)  || GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Physician)|| GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.Finished))" CaptionCssClass="normal-caption" Caption=" Claim" ColSpanMd="12">
                                <DxCheckBox ReadOnly="@(!GeneralConsultanService.Status.Equals(EnumStatusGeneralConsultantService.NurseStation))" @bind-Checked="@GeneralConsultanService.IsClaim" />
                            </DxFormLayoutItem>

                        }

                        @* <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Conference Link" ColSpanMd="12">
                                                        <a href="@(GeneralConsultanService.LinkMeet)"></a>
                                                        </DxFormLayoutItem> *@
                    </DxFormLayout>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsReadOnlyForm => ReadOnlyForm?.Invoke() ?? true;

    [Parameter] public string HeaderText { get; set; } = "General Consultation Service Information";

    [Parameter] public GeneralConsultanServiceDto GeneralConsultanService { get; set; } = new();
    [Parameter] public UserDto UserForm { get; set; } = new();
    [Parameter] public AccidentDto Accident { get; set; } = new();

    [Parameter] public List<UserDto> Patients { get; set; } = [];
    [Parameter] public List<UserDto> Physicions { get; set; } = [];
    [Parameter] public List<ServiceDto> Services { get; set; } = [];
    [Parameter] public List<LocationDto> Locations { get; set; } = [];
    [Parameter] public List<InsurancePolicyDto> InsurancePolicies { get; set; } = [];
    [Parameter] public List<ProjectDto> Projects { get; set; } = [];
    [Parameter] public List<UserDto> SafetyPersonels { get; set; } = [];

    [Parameter] public EventCallback<ChangeEventArgs> OnInputPatient { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputService { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputPhysicion { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputInsurancePolicy { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputLocation { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputProject { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInputSafetyPersonel { get; set; }

    [Parameter] public EventCallback<UserDto> OnSelectedPatientChanged { get; set; }
    [Parameter] public EventCallback<UserDto> SelectedItemChangedPhysicion { get; set; }
    [Parameter] public EventCallback<ServiceDto> SelectedItemChangedService { get; set; }
    [Parameter] public EventCallback<LocationDto> SelectedItemChangedLocation { get; set; }
    [Parameter] public EventCallback<InsurancePolicyDto> SelectedItemChangedInsurancePolicy { get; set; }
    [Parameter] public EventCallback<DateTime?> SelectedDateMaternityChanged { get; set; }
    [Parameter] public EventCallback<string> SelectedItemPayment { get; set; }
    [Parameter] public EventCallback<ProjectDto> SelectedItemProject { get; set; }
    [Parameter] public EventCallback<UserDto> SelectedItemSafetyPersonel { get; set; }


    [Parameter] public Func<bool> ReadOnlyForm { get; set; }
    [Parameter] public bool IsMaternity { get; set; } = false;
    [Parameter] public bool IsVaccination { get; set; } = false;
    [Parameter] public bool IsAccident { get; set; } = false;

    protected void SelectedItemLocationChanged(LocationDto selectedItem) => SelectedItemChangedLocation.InvokeAsync(selectedItem);
    protected void SelectedItemServiceChanged(ServiceDto selectedItem) => SelectedItemChangedService.InvokeAsync(selectedItem);
    protected void SelectedItemPhysicionChanged(UserDto selectedItem) => SelectedItemChangedPhysicion.InvokeAsync(selectedItem);
    protected void SelectedItemInsurancePolicyChanged(InsurancePolicyDto selectedItem) => SelectedItemChangedInsurancePolicy.InvokeAsync(selectedItem);
    protected void SelectedItemMaternityChanged(DateTime? selectedItem) => SelectedDateMaternityChanged.InvokeAsync(selectedItem);
    protected void SelectedItemPaymentChanged(string selectedItem) => SelectedItemPayment.InvokeAsync(selectedItem);
    protected void SelectedItemProjectChanged(ProjectDto selectedItem) => SelectedItemProject.InvokeAsync(selectedItem);
    protected void SelectedItemSafetyPersonelChanged(UserDto selectedItem) => SelectedItemSafetyPersonel.InvokeAsync(selectedItem);
    // protected void SelectedItemChanged(string selectedItem) => SelectedItem.InvokeAsync(selectedItem);


    protected override async Task OnInitializedAsync()
    {
    }
}
