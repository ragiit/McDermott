@if (IsAccess && UserAccessCRUID is not null && UserAccessCRUID.IsRead)
{
    <div class="wrapper">
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <DxLoadingPanel @bind-Visible="PanelVisible"
                                            IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                            IsContentBlocked="true"
                                            ApplyBackgroundShading="true"
                                            IndicatorAreaVisible="false"
                                            Text="Fetching Data...">

                                <MyGridPaginate @ref="Grid"
                                                Data="InsurancePolicys"
                                                PageSize="10"
                                                @bind-SelectedDataItems="@SelectedDataItems"
                                                DataItemDeleting="OnDelete"
                                                RowDoubleClick="EditItem_Click"
                                                FocusedRowChanged="Grid_FocusedRowChanged"
                                                SearchTextChanged="OnSearchBoxChanged">


                                    <ToolbarTemplate>
                                        <MyDxToolbarBase TItem="InsurancePolicyDto"
                                                         Items="@InsurancePolicys"
                                                         SelectedDataItems="@SelectedDataItems"
                                                         NewItem_Click="@NewItem_Click"
                                                         EditItem_Click="@EditItem_Click"
                                                         DeleteItem_Click="@DeleteItem_Click"
                                                         Refresh_Click="@Refresh_Click"
                                                         IsImport="false"
                                                         Grid="Grid"
                                                         VisibleNew="UserAccessCRUID.IsCreate"
                                                         VisibleEdit="UserAccessCRUID.IsUpdate"
                                                         VisibleDelete="UserAccessCRUID.IsDelete" />
                                    </ToolbarTemplate>

                                    <Columns>
                                        <DxGridSelectionColumn Width="15px" />
                                        <DxGridDataColumn FieldName="User.Name" Caption="Patient" SortIndex="0" />
                                        <DxGridDataColumn FieldName="Insurance.Name" Caption="Insurance Company" />
                                        <DxGridDataColumn FieldName="PolicyNumber" Caption="Policy Number" />
                                        <DxGridDataColumn FieldName="Active" />
                                    </Columns>

                                    <TotalSummary>
                                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                           FieldName="Name"
                                                           Visible="true" />
                                    </TotalSummary>
                                </MyGridPaginate>
                                <div class="row">
                                    <DxFormLayout>
                                        <div class="col-md-8">
                                            <DxFormLayoutItem>
                                                <DxPager PageCount="totalCount"
                                                         ActivePageIndexChanged="OnPageIndexChanged"
                                                         ActivePageIndex="activePageIndex"
                                                         VisibleNumericButtonCount="10"
                                                         SizeMode="SizeMode.Medium"
                                                         NavigationMode="PagerNavigationMode.Auto">
                                                </DxPager>
                                            </DxFormLayoutItem>
                                        </div>
                                        <div class="col-md-4 d-flex justify-content-end">
                                            <DxFormLayoutItem Caption="Page Size:">
                                                <MyDxComboBox Data="(new[] { 10, 25, 50, 100 })"
                                                              NullText="Select Page Size"
                                                              ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                                              SelectedItemChanged="((int e ) => OnPageSizeIndexChanged(e))"
                                                              @bind-Value="pageSize">
                                                </MyDxComboBox>
                                            </DxFormLayoutItem>
                                        </div>
                                    </DxFormLayout>
                                </div>
                            </DxLoadingPanel>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}
else if (UserAccessCRUID is not null && !UserAccessCRUID.IsRead)
{
    <InvalidPermissionPage />
}
else
{
    <LoadingIndicatorLayout />
}

<DxPopup HeaderText="Insurance Policy Detail" @bind-Visible="@IsPopUp" Closed="( () => IsPopUp = false)" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" Width="95%">
    <PopUpInsurancePolicyPatientDetailPage Id="Id" PatientId="PatientId">

    </PopUpInsurancePolicyPatientDetailPage>
</DxPopup>



@code {
    private List<InsurancePolicyDto> InsurancePolicys { get; set; } = [];

    #region Default Grid

    #region UserLoginAndAccessRole

    [Inject]
    public UserInfoService UserInfoService { get; set; }

    private GroupMenuDto UserAccessCRUID = new();
    private User UserLogin { get; set; } = new();
    private bool IsAccess = false;

    private async Task GetUserInfo()
    {
        try
        {
            var user = await UserInfoService.GetUserInfo(ToastService);
            IsAccess = user.Item1;
            UserAccessCRUID = user.Item2;
            UserLogin = user.Item3;
        }
        catch { }
    }

    #endregion UserLoginAndAccessRole

    private string FormUrl = "patient/insurance-policies";
    private bool PanelVisible { get; set; } = true;
    public IGrid Grid { get; set; }
    private int FocusedRowVisibleIndex { get; set; }
    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PanelVisible = true;
            await GetUserInfo();
            await LoadData();
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private async Task OnDelete(GridDataItemDeletingEventArgs e)
    {
        try
        {
            if (SelectedDataItems.Count == 1)
            {
                await Mediator.Send(new DeleteInsurancePolicyRequest(SelectedDataItems[0].Adapt<InsurancePolicyDto>().Id));
            }
            else
            {
                var a = SelectedDataItems.Adapt<List<InsurancePolicyDto>>();
                await Mediator.Send(new DeleteInsurancePolicyRequest(ids: a.Select(x => x.Id).ToList()));
            }
            await LoadData();
        }
        catch { }
    }

    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
    }

    private async Task Refresh_Click()
    {
        await LoadData();
    }

    #region Searching

    private int pageSize { get; set; } = 10;
    private int totalCount = 0;
    private int activePageIndex { get; set; } = 0;
    private string searchTerm { get; set; } = string.Empty;

    private async Task OnSearchBoxChanged(string searchText)
    {
        searchTerm = searchText;
        await LoadData(0, pageSize);
    }

    private async Task OnPageSizeIndexChanged(int newPageSize)
    {
        pageSize = newPageSize;
        await LoadData(0, newPageSize);
    }

    private async Task OnPageIndexChanged(int newPageIndex)
    {
        await LoadData(newPageIndex, pageSize);
    }

    [Parameter] public long PatientId { get; set; }
    private async Task LoadData(int pageIndex = 0, int pageSize = 10)
    {
        try
        {
            PanelVisible = true;
            SelectedDataItems = [];
            var a = await Mediator.Send(new GetInsurancePolicyQuery
                {
                    Predicate = x => x.UserId == PatientId,
                    PageIndex = pageIndex,
                    PageSize = pageSize,
                    SearchTerm = searchTerm,
                });
            InsurancePolicys = a.Item1;
            totalCount = a.PageCount;
            activePageIndex = pageIndex;
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    #endregion Searching

    public long Id { get; set; }
    public bool IsPopUp { get; set; }

    private void NewItem_Click()
    {
        IsPopUp = true;
        Id = 0;
    }

    private void EditItem_Click()
    {
        try
        {
            var InsurancePolicy = SelectedDataItems[0].Adapt<InsurancePolicyDto>();
            IsPopUp = true;
            Id = InsurancePolicy.Id;
            // NavigationManager.NavigateTo($"{FormUrl}/{EnumPageMode.Update.GetDisplayName()}?Id={InsurancePolicy.Id}");
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private void DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

    private void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    #endregion Default Grid
}