@page "/inventory/internal-transfers/{PageMode}"
@rendermode InteractiveServer

<PageTitle>@Helper.APP_NAME - Internal Transfer</PageTitle>

@if (IsAccess && UserAccessCRUID is not null && (UserAccessCRUID.IsCreate || UserAccessCRUID.IsUpdate))
{
    <BaseHeaderPage Title="Internal Transfer" OnClickBack="@(async () => NavigationManager.NavigateTo("inventory/internal-transfers"))" ShowBackButton="true" />

    <div class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <EditForm Model="@postTransferStocks" @onkeypress="@KeyPressHandler" Context="EditFormContext" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <AntiforgeryToken />
                        @if (postTransferStocks.Id != 0)
                        {
                            <div class="row justify-content-end mb-3">
                                <div class="col-auto align-self-end">
                                    <DxTabs RenderMode="TabsRenderMode.AllTabs">
                                        <DxTab Text="Draft" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Draft)"></DxTab>
                                        @if (postTransferStocks.StockRequest == true)
                                        {
                                            <DxTab Text="Request" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Request)"></DxTab>
                                            <DxTab Text="Approve Request" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.ApproveRequest)"></DxTab>
                                            @* <DxTab Text="Waiting" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Waiting)"></DxTab> *@
                                        }
                                        <DxTab Text="Ready" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Ready)"></DxTab>
                                        <DxTab Text="Done" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Done)"></DxTab>
                                        <DxTab Text="Cancel" Enabled="@(postTransferStocks.Status == EnumStatusInternalTransfer.Cancel)"></DxTab>
                                    </DxTabs>
                                </div>
                            </div>
                        }
                        <DxLoadingPanel @bind-Visible="PanelVisible"
                                        IsContentBlocked="true"
                                        ApplyBackgroundShading="true"
                                        IndicatorAreaVisible="true"
                                        Text="Fetching Data...">
                            @if (postTransferStocks.Status != EnumStatusInternalTransfer.Done && postTransferStocks.Status != EnumStatusInternalTransfer.Cancel)
                            {
                                <div class="sticky">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="row justify-content-between">
                                                <div class="col-auto align-self-start">
                                                    @if (getTransferStockProducts.Count > 0)
                                                    {
                                                        @if (postTransferStocks.StockRequest == true)
                                                        {
                                                            <DxButton Text="Request" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Draft && (UserLogin.IsPharmacy == false ))" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="fa-solid fa-clipboard-check" Click="Request"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Draft && (UserLogin.IsPharmacy == false ))" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>

                                                            <DxButton Text="Approve Request" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Request && UserLogin.IsPharmacy == true)" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="fa-solid fa-check" Click="Approv_Check"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Request && UserLogin.IsPharmacy == true)" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>

                                                            <DxButton Text="Ready" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.ApproveRequest && UserLogin.IsPharmacy == true)" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="fa-solid fa-check" Click="Ready"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.ApproveRequest && UserLogin.IsPharmacy == true)" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>

                                                            <DxButton Text="Validate" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Ready)" RenderStyle="ButtonRenderStyle.Primary" Click="validation" IconCssClass="fa-solid fa-check"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Ready)" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>
                                                        }
                                                        else
                                                        {
                                                            <DxButton Text="Ready" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Draft)" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="fa-solid fa-check" Click="Ready"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Draft)" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>

                                                            <DxButton Text="Validate" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Ready)" RenderStyle="ButtonRenderStyle.Primary" Click="validation" IconCssClass="fa-solid fa-check"></DxButton>
                                                            <DxButton Text="Cancel" Visible="@(postTransferStocks.Status == EnumStatusInternalTransfer.Ready)" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-xmark" Click="Cancel"></DxButton>
                                                        }

                                                    }
                                                </div>

                                                <div class="col-auto align-self-start">
                                                    <DxButton RenderStyle="ButtonRenderStyle.Primary" Visible="@(postTransferStocks.Id == 0 || postTransferStocks.Status == EnumStatusInternalTransfer.Draft)" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Save" SubmitFormOnClick="true" Click="OnSave"></DxButton>
                                                    <DxButton RenderStyle="ButtonRenderStyle.Danger" Visible="@(postTransferStocks.Id == 0 || postTransferStocks.Status == EnumStatusInternalTransfer.Draft)" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" CssClass="ml-1" Text="Discard" Click="onDiscard"></DxButton>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="card">
                                <div class="card-header">
                                </div>
                                <div class="card-body">


                                    <DxFormLayout CssClass="mt">
                                        @if (postTransferStocks.Id != 0)
                                        {
                                            <DxFormLayoutItem ColSpanMd="12">
                                                <h3 class="fw-bolder">@postTransferStocks.KodeTransaksi</h3>
                                            </DxFormLayoutItem>
                                        }
                                        <DxFormLayoutItem Caption="Source Location" CssClass="mt-2" CaptionCssClass="normal-caption required-caption" ColSpanMd="12">
                                            <MyDxComboBox Data="@getSource"
                                                          NullText="Select Source"
                                                          @ref="refSourceComboBox"
                                                          @bind-Value="@postTransferStocks.SourceId"
                                                          TextFieldName="Name"
                                                          ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                          ValueFieldName="Id"
                                                          TextChanged="((string e) => OnInputSourceChanged(e))">
                                                <Buttons>
                                                    <DxEditorButton Click="OnSearchSourceIndexDecrement"
                                                                    IconCssClass="fa-solid fa-caret-left"
                                                                    Tooltip="Previous Index" />
                                                    <DxEditorButton Click="OnSearchSource"
                                                                    IconCssClass="fa-solid fa-magnifying-glass"
                                                                    Tooltip="Search" />
                                                    <DxEditorButton Click="OnSearchSourceIndexIncrement"
                                                                    IconCssClass="fa-solid fa-caret-right"
                                                                    Tooltip="Next Index" />
                                                </Buttons>
                                                <Columns>
                                                    <DxListEditorColumn FieldName="@nameof(Locations.Name)" Caption="Name" />
                                                    <DxListEditorColumn FieldName="@nameof(Locations.ParentLocation.Name)" Caption="Parent" />
                                                </Columns>
                                            </MyDxComboBox>
                                            <ValidationMessage For="@(()=>postTransferStocks.SourceId)"></ValidationMessage>
                                        </DxFormLayoutItem>

                                        <DxFormLayoutItem Caption="Destination Location" CaptionCssClass="normal-caption required-caption" ColSpanMd="12">
                                            <MyDxComboBox Data="@getDestination"
                                                          NullText="Select Destination"
                                                          @ref="refDestinationComboBox"
                                                          @bind-Value="@postTransferStocks.DestinationId"
                                                          ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                          TextFieldName="Name"
                                                          ValueFieldName="Id"
                                                          TextChanged="((string e) => OnInputDestinationChanged(e))">
                                                <Buttons>
                                                    <DxEditorButton Click="OnSearchDestinationIndexDecrement"
                                                                    IconCssClass="fa-solid fa-caret-left"
                                                                    Tooltip="Previous Index" />
                                                    <DxEditorButton Click="OnSearchDestination"
                                                                    IconCssClass="fa-solid fa-magnifying-glass"
                                                                    Tooltip="Search" />
                                                    <DxEditorButton Click="OnSearchDestinationIndexIncrement"
                                                                    IconCssClass="fa-solid fa-caret-right"
                                                                    Tooltip="Next Index" />
                                                </Buttons>
                                                <Columns>
                                                    <DxListEditorColumn FieldName="@nameof(Locations.Name)" Caption="Name" />
                                                    <DxListEditorColumn FieldName="@nameof(Locations.ParentLocation.Name)" Caption="Parent" />
                                                </Columns>
                                            </MyDxComboBox>
                                            <ValidationMessage For="@(()=>postTransferStocks.DestinationId)"></ValidationMessage>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Schendule Date" CaptionCssClass="normal-caption " ColSpanMd="12">
                                            <DxDateEdit @bind-Date="@postTransferStocks.SchenduleDate"
                                                        ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                        ShowValidationIcon="true"
                                                        DisplayFormat="dd MMMM yyyy">
                                            </DxDateEdit>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Reference" CaptionCssClass="normal-caption" ColSpanMd="12">
                                            <DxMemo @bind-Text="@postTransferStocks.Reference" NullText="Input Reference.."
                                                    ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                    ShowValidationIcon="true"></DxMemo>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Caption="Stock Request" ColSpanMd="12" CaptionCssClass="normal-caption">
                                            <DxCheckBox @bind-Checked="@postTransferStocks.StockRequest" ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"></DxCheckBox>
                                        </DxFormLayoutItem>
                                    </DxFormLayout>
                                    @if (postTransferStocks.Id != 0)
                                    {
                                        <DxFormLayout>
                                            <DxFormLayoutGroup ColSpanMd="12">
                                                <CaptionTemplate>
                                                    <div>
                                                        <span class="text-center">Transfer Lines</span>

                                                    </div>
                                                </CaptionTemplate>
                                                <Items>
                                                    <MyGrid @ref="Grid"
                                                            Data="getTransferStockProducts"
                                                            @bind-SelectedDataItems="@SelectedDataItems"
                                                            EditModelSaving="OnSaveProduct"
                                                            DataItemDeleting="OnDelete"
                                                            FocusedRowChanged="Grid_FocusedRowChanged"
                                                            SearchTextChanged="OnSearchBoxChanged"
                                                            KeyFieldName="Id">
                                                        <ToolbarTemplate>
                                                            <MyDxToolbarBase TItem="TransferStockProductDto"
                                                                             Items="@getTransferStockProducts"
                                                                             Grid="Grid"
                                                                             SelectedDataItems="@SelectedDataItems"
                                                                             NewItem_Click="@NewItem_Click"
                                                                             EditItem_Click="@(async () => await EditItem_Click(context.Grid))"
                                                                             DeleteItem_Click="@DeleteItem_Click"
                                                                             Refresh_Click="@RefreshItem_Click"
                                                                             IsImport="false"
                                                                             EnableUpdate="@(postTransferStocks.Id != 0 && postTransferStocks.Status == EnumStatusInternalTransfer.Draft)"
                                                                             EnableCreate="@(postTransferStocks.Id != 0 && postTransferStocks.Status == EnumStatusInternalTransfer.Draft)"
                                                                             EnableDelete="@(postTransferStocks.Id != 0 && postTransferStocks.Status == EnumStatusInternalTransfer.Draft)"
                                                                             VisibleNew="UserAccessCRUID.IsCreate"
                                                                             VisibleEdit="UserAccessCRUID.IsUpdate"
                                                                             VisibleDelete="UserAccessCRUID.IsDelete" />
                                                        </ToolbarTemplate>
                                                        <Columns>
                                                            <DxGridSelectionColumn Width="15px" />
                                                            <DxGridDataColumn FieldName="ProductName" Caption="Product Name" SortIndex="0" />
                                                            <DxGridDataColumn FieldName="QtyStock" Caption="Demand" MinWidth="90" Width="190" />
                                                            <DxGridDataColumn FieldName="Batch" Caption="Batch" MinWidth="90" Width="190" />
                                                            <DxGridDataColumn FieldName="ExpiredDate" Caption="Expired Date" DisplayFormat="dd MMMM yyyy" />
                                                            <DxGridDataColumn FieldName="Product.Uom.Name" Caption="Unit Of Measure" />
                                                        </Columns>
                                                        <EditFormTemplate Context="EditFormContextt">
                                                            @{
                                                                postTransferStockProducts = (TransferStockProductDto)EditFormContextt.EditModel;
                                                                // Ambil produk yang dipilih
                                                                var selectedProduct = getProducts.FirstOrDefault(x => x.Id == postTransferStockProducts?.ProductId);
                                                                postTransferStockProducts.UomName = selectedProduct?.Uom.Name;
                                                                // Set TraceAvability berdasarkan TraceAbility produk
                                                                postTransferStockProducts.TraceAvability = selectedProduct?.TraceAbility ?? false;
                                                            }

                                                            <DxFormLayout CssClass="mt w-100">
                                                                <div class="col-md-6">
                                                                    <DxFormLayoutItem Caption="Product Name" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                        <MyDxComboBox Data="@getProducts"
                                                                                      NullText="Select Product.."
                                                                                      @ref="refProductComboBox"
                                                                                      @bind-Value="@postTransferStockProducts.ProductId"
                                                                                      ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                                                      SelectedItemChanged="@((ProductDto product) => SelectedItemByProduct(product))"
                                                                                      TextFieldName="Name"
                                                                                      ValueFieldName="Id"
                                                                                      TextChanged="((string e) => OnInputProductChanged(e))">
                                                                            <Buttons>
                                                                                <DxEditorButton Click="OnSearchProductIndexDecrement"
                                                                                                IconCssClass="fa-solid fa-caret-left"
                                                                                                Tooltip="Previous Index" />
                                                                                <DxEditorButton Click="OnSearchProduct"
                                                                                                IconCssClass="fa-solid fa-magnifying-glass"
                                                                                                Tooltip="Search" />
                                                                                <DxEditorButton Click="OnSearchProductIndexIncrement"
                                                                                                IconCssClass="fa-solid fa-caret-right"
                                                                                                Tooltip="Next Index" />
                                                                            </Buttons>
                                                                            <Columns>
                                                                                <DxListEditorColumn FieldName="@nameof(Locations.Name)" Caption="Name" />
                                                                                <DxListEditorColumn FieldName="@nameof(Locations.ParentLocation.Name)" Caption="Parent" />
                                                                            </Columns>
                                                                        </MyDxComboBox>
                                                                        <ValidationMessage For="@(() => postTransferStockProducts.ProductId)" />
                                                                    </DxFormLayoutItem>
                                                                </div>

                                                                <div class="col-md-6">
                                                                    <DxFormLayoutItem Caption="Current Stock" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                        <DxSpinEdit @bind-Value="@currentStocks"
                                                                                    NullText="Input Stock To Be Sent..."
                                                                                    MinValue="0"
                                                                                    ReadOnly
                                                                                    ShowSpinButtons="false"
                                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                    ShowValidationIcon="true" />
                                                                        <ValidationMessage For="@(() => postTransferStockProducts.CurrentStock)" />
                                                                    </DxFormLayoutItem>
                                                                </div>
                                                            </DxFormLayout>

                                                            <DxFormLayout CssClass="mt w-100">
                                                                <div class="col-md-6">
                                                                    <DxFormLayoutItem Caption="Unit Of Measure" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                        <DxTextBox @bind-Text="@postTransferStockProducts.UomName"
                                                                                   NullText="Unit Of Measure"
                                                                                   ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                   ReadOnly
                                                                                   ShowValidationIcon="true" />
                                                                    </DxFormLayoutItem>
                                                                </div>

                                                                <div class="col-md-6">
                                                                    <DxFormLayoutItem Caption="Stock Shipped" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                        <DxSpinEdit Value="@postTransferStockProducts.QtyStock"
                                                                                    ValueExpression="@(()=>postTransferStockProducts.QtyStock)"
                                                                                    NullText="Input Stock To Be Sent..."
                                                                                    MinValue="0"
                                                                                    ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                                                    ValueChanged="@((long value) => checkStock(value))"
                                                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                    ShowValidationIcon="true" />
                                                                        <ValidationMessage For="@(() => postTransferStockProducts.QtyStock)" />
                                                                    </DxFormLayoutItem>
                                                                </div>
                                                            </DxFormLayout>

                                                            @if (postTransferStockProducts.TraceAvability)
                                                            {
                                                                <DxFormLayout CssClass="mt w-100">
                                                                    <div class="col-md-6">
                                                                        <DxFormLayoutItem Caption="Batch" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                            <DxComboBox ShowValidationIcon="true"
                                                                                        Data="@Batch"
                                                                                        NullText="Select Batch..."
                                                                                        @bind-Value="@postTransferStockProducts.Batch"
                                                                                        ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                                                        SelectedItemChanged="@((string value) => SelectedBatch(value))"
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains" />
                                                                            <ValidationMessage For="@(() => postTransferStockProducts.Batch)" />
                                                                        </DxFormLayoutItem>
                                                                    </div>

                                                                    <div class="col-md-6">
                                                                        <DxFormLayoutItem Caption="Expired Date" CaptionCssClass="normal-caption" ColSpanMd="12" CaptionPosition="CaptionPosition.Vertical">
                                                                            <DxDateEdit ShowValidationIcon="true"
                                                                                        DisplayFormat="dd MMMM yyyy"
                                                                                        ReadOnly="@(postTransferStocks.Id != 0 && postTransferStocks.Status != EnumStatusInternalTransfer.Draft)"
                                                                                        @bind-Date="@postTransferStockProducts.ExpiredDate"
                                                                                        NullText="Expired Date" />
                                                                        </DxFormLayoutItem>
                                                                    </div>
                                                                </DxFormLayout>
                                                            }
                                                        </EditFormTemplate>

                                                    </MyGrid>
                                                </Items>
                                            </DxFormLayoutGroup>
                                        </DxFormLayout>
                                    }
                                    @if (getTransferStockLog.Count > 0)
                                    {
                                        <DxFormLayout>
                                            <DxFormLayoutGroup ColSpanMd="12" Caption="Transfer Logs" AnimationType="LayoutAnimationType.Slide" Expanded="false" Decoration="FormLayoutGroupDecoration.Card" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start">
                                                <CaptionTemplate>
                                                    <div>
                                                        <span class="text-center">Transfer Logs</span>
                                                    </div>
                                                </CaptionTemplate>
                                                <Items>
                                                    @{
                                                        var groupedLogs = getTransferStockLog
                                                        .GroupBy(x => x.CreatedDate?.Date) // Group by the date part only
                                                        .OrderByDescending(g => g.Key)
                                                        .ToList();
                                                    }

                                                    <section class="content w-100">
                                                        <div class="container-fluid w-100">
                                                            <div class="row w-100">
                                                                @foreach (var group in groupedLogs)
                                                                {
                                                                    <div class="col-md-12">
                                                                        <div class="timeline">
                                                                            <div class="time-label">
                                                                                <span class="bg-red">@group.Key?.ToString("dd MMM, yyyy")</span>
                                                                            </div>

                                                                            @foreach (var item in group.OrderByDescending(x => x.CreatedDate.GetValueOrDefault().TimeOfDay))
                                                                            {
                                                                                <div>
                                                                                    <i class="fas fa-user bg-green"></i>
                                                                                    <div class="timeline-item">
                                                                                        <span class="time"><i class="fas fa-clock"></i> @item.CreatedDate.GetValueOrDefault().ToString("HH:mm")</span>
                                                                                        <h3 class="timeline-header">
                                                                                            <a class="no-underline">@item.UserBy.Name</a>
                                                                                        </h3>

                                                                                        <div class="timeline-body">

                                                                                            @{

                                                                                                string priorityClass = "";
                                                                                                string title = "";

                                                                                                switch (item.Status)
                                                                                                {
                                                                                                    case EnumStatusInternalTransfer.Draft:
                                                                                                        priorityClass = "info";
                                                                                                        title = "Draft";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.Request:
                                                                                                        priorityClass = "info";
                                                                                                        title = "Request";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.ApproveRequest:
                                                                                                        priorityClass = "info";
                                                                                                        title = "Approval Request";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.Waiting:
                                                                                                        priorityClass = "warning";
                                                                                                        title = "Waiting";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.Ready:
                                                                                                        priorityClass = "primary";
                                                                                                        title = "Ready";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.Done:
                                                                                                        priorityClass = "success";
                                                                                                        title = "Done";
                                                                                                        break;

                                                                                                    case EnumStatusInternalTransfer.Cancel:
                                                                                                        priorityClass = "danger";
                                                                                                        title = "Cancel";
                                                                                                        break;
                                                                                                }

                                                                                                string html = $"<span class='badge text-white bg-{priorityClass} py-1 px-3' title='{title}'>{title}</span>";
                                                                                            }

                                                                                            <div class="row w-100">
                                                                                                <div class="col-md-1">
                                                                                                    Status
                                                                                                </div>

                                                                                                <div class="col-md-11">
                                                                                                    : @((MarkupString)html)
                                                                                                </div>
                                                                                            </div>

                                                                                            <div class="row w-100">
                                                                                                <div class="col-md-1">
                                                                                                    From
                                                                                                </div>

                                                                                                <div class="col-md-11">
                                                                                                    : @item.Source?.Name
                                                                                                </div>
                                                                                            </div>

                                                                                            <div class="row w-100">
                                                                                                <div class="col-md-1">
                                                                                                    To
                                                                                                </div>

                                                                                                <div class="col-md-11">
                                                                                                    : @item.Destination?.Name
                                                                                                </div>
                                                                                            </div>

                                                                                            @* Status: @((MarkupString)html) <br />
                                                                            Type: @(item.TypeTransfer ?? "N/A") <br />
                                                                            From: @item.Source?.Name <br />
                                                                            To: @item.Destination?.Name <br /> *@
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            }

                                                                            <div>
                                                                                <i class="fas fa-clock bg-gray"></i>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </section>

                                                </Items>
                                            </DxFormLayoutGroup>
                                        </DxFormLayout>
                                    }

                                </div>
                            </div>

                        </DxLoadingPanel>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}