@if (!ShowForm)
{
    <InputFile id="fileInput" style="display:none" OnChange="@ImportExcelFile" accept=".xlsx" multiple="false"></InputFile>

    <DxLoadingPanel @bind-Visible="PanelVisible"
                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                    IsContentBlocked="true"
                    ApplyBackgroundShading="true"
                    IndicatorAreaVisible="false"
                    Text="Fetching Data...">
        <DxGrid @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
                Data="InsurancePolicies"
                PageSize="10"
                @bind-SelectedDataItems="@SelectedDataItems"
                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                KeyFieldName="Id"
                CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                EditModelSaving="OnSave"
                DataItemDeleting="OnDelete"
                AllowSelectRowByClick="true"
                EditMode="GridEditMode.PopupEditForm"
                PopupEditFormCssClass="pw-800"
                PagerPosition="GridPagerPosition.Bottom"
                PageSizeSelectorVisible="true"
                PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                PageSizeSelectorAllRowsItemVisible="true"
                PagerSwitchToInputBoxButtonCount="10"
                FocusedRowEnabled="true"
                PagerVisibleNumericButtonCount="10"
                FocusedRowChanged="Grid_FocusedRowChanged"
                ShowGroupPanel="true"
                AutoExpandAllGroupRows="true"
                ShowFilterRow="true"
                ShowSearchBox="true"
                SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                KeyboardNavigationEnabled="true">
            <ToolbarTemplate>
                <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                    <DxToolbarItem Visible="@UserAccessCRUID.Create" Text="New" Click="NewItem_Click" IconCssClass="fa-solid fa-plus" />
                    <DxToolbarItem Visible="@UserAccessCRUID.Update" Text="Edit" Click="EditItem_Click" IconCssClass="fa-solid fa-pen-to-square" Enabled="SelectedDataItems.Count > 0 && Countries.Count > 0" />
                    <DxToolbarItem Visible="@UserAccessCRUID.Delete" Text="Delete" Click="DeleteItem_Click" IconCssClass="fa-solid fa-trash" Enabled="SelectedDataItems.Count > 0 && Countries.Count > 0" />
                    <DxToolbarItem BeginGroup="true" Text="Refresh" Click="Refresh_Click" IconCssClass="fa-solid fa-arrows-rotate" />
                    <DxToolbarItem Text="Column Chooser" Click="ColumnChooserButton_Click" BeginGroup="true" IconCssClass="fa-solid fa-table-columns" />
                    <DxToolbarItem Text="Export" BeginGroup="true" IconCssClass="fa-solid fa-file-export">
                        <Items>
                            <DxToolbarItem Text="To CSV" Click="ExportCsvItem_Click" />
                            <DxToolbarItem Text="To XLSX" Click="ExportXlsxItem_Click" />
                            <DxToolbarItem Text="To XLS" Click="ExportXlsItem_Click" />
                        </Items>
                    </DxToolbarItem>
                    <DxToolbarItem Visible="@UserAccessCRUID.Import" Click="@ImportFile" Text="Import" IconCssClass="fa-solid fa-file-import" />
                </DxToolbar>
            </ToolbarTemplate>
            <Columns>
                <DxGridSelectionColumn Width="15px" />
                <DxGridDataColumn FieldName="User.Name" Caption="Patient" SortIndex="0" />
                <DxGridDataColumn FieldName="Insurance.Name" Caption="Insurance Company" />
                <DxGridDataColumn FieldName="PolicyNumber" Caption="Policy Number" />
                <DxGridDataColumn FieldName="Active" />
            </Columns>
        </DxGrid>
    </DxLoadingPanel>
}
else
{
    <EditForm Model="@InsurancePoliciyForm" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit"
              OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <DxFormLayout CssClass="mt">
            <DxFormLayout CssClass="w-100">
                <DxFormLayoutItem Caption="Patient:" ColSpanMd="12">
                    @* <DxComboBox Data="@Users"
                NullText="Select Patient..."
                @bind-Value="@InsurancePoliciyForm.UserId"
                TextFieldName="Name"
                ValueFieldName="Id">
                </DxComboBox> *@
                    <h3>@User.Name</h3>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Insurance Company:" ColSpanMd="6">
                    <DxComboBox Data="@Insurances"
                                NullText="Select Insurance Company..."
                                @bind-Value="@InsuranceId"
                                TextFieldName="Name"
                                ValueFieldName="Id">
                    </DxComboBox>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Policy Number:" ColSpanMd="6">
                    <DxTextBox @bind-Text="@InsurancePoliciyForm.PolicyNumber"
                               ShowValidationIcon="true"
                               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                               NullText="Policy Number" />
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Active:" ColSpanMd="12">
                    <DxCheckBox @bind-Checked="@InsurancePoliciyForm.Active" />
                </DxFormLayoutItem>

                <DxFormLayoutGroup Caption="BPJS Integration" ColSpanMd="12" CssClass="mt-3" Visible="IsBPJS">
                    <Items>

                        <DxFormLayoutItem Caption="Prolanis">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Prolanis"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Prolanis" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Treatment Class">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Class"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Treatment Class" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Participant Name">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ParticipantName"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Participant Name" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Diagnosis">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Diagnosa"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Diagnosis" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Card Number">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.NoCard"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Card Number" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Poly">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Poly"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Poly" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="NIK">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.NoId"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="NIK" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Doctor">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Doctor"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Doctor" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Sex">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.Sex"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Sex" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Date of Birth">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.DateOfBirth"
                                        NullText="Date of Birth" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Nursing Class">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.NursingClass"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Nursing Class" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Card Print Date">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.CardPrintDate"
                                        NullText="Card Print Date" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Medical Record Number">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.MedicalRecordNo"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Medical Record Number" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="TAT">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.TatDate"
                                        NullText="TAT" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Phone Number">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.PhoneNumber"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Phone Number" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="TMT">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.TmtDate"
                                        NullText="TMT" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="PPK Code">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ServicePPKCode"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="PPK Code" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Participant Status">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ParticipantStatus"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Participant Status" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="PPK Name">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ServicePPKName"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="PPK Name" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Service Type">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ServiceType"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Service Type" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Service Participant">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ServiceParticipant"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Service Participant" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Current Age">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.CurrentAge"
                                        NullText="Current Age" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Age At Time Of Service">
                            <DxDateEdit @bind-Date="@InsurancePoliciyForm.AgeAtTimeOfService"
                                        NullText="Age At Time Of Service" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="DinSos">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.DinSos"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="DinSos" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Prolanis PBR">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.PronalisPBR"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Prolanis PBR" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="No. SKTM">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.NoSKTM"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="No. SKTM" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Insurance No.">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.InsuranceNo"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Insurance No." />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Insurance Name">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.InsuranceName"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Insurance Name" />
                        </DxFormLayoutItem>

                        <DxFormLayoutItem Caption="Provider Name">
                            <DxTextBox @bind-Text="@InsurancePoliciyForm.ProviderName"
                                       ShowValidationIcon="true"
                                       ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       NullText="Provider Name" />
                        </DxFormLayoutItem>

                    </Items>
                </DxFormLayoutGroup>
            </DxFormLayout>
        </DxFormLayout>
        <div class="ml-2 mt-1 mb-2 mr-3">
            <div class="row justify-content-end">
                <div class="col-auto align-self-end">
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                              Text="Save"
                              RenderStyle="ButtonRenderStyle.Info"
                              SubmitFormOnClick="true"
                              IconCssClass="fa-solid fa-floppy-disk"
                              CssClass="w-20 ml" />
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                              Text="Cancel"
                              RenderStyle="ButtonRenderStyle.Danger"
                              Click="OnCancel"
                              IconCssClass="fa-solid fa-xmark"
                              CssClass="w-20 ml" />
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private List<CountryDto> Countries = [];
    private List<ProvinceDto> Provinces = [];

    [Parameter]
    public UserDto User { get; set; } = new()
        {
            Name = "-"
        };

    private List<UserDto> Users = [];
    private List<InsuranceDto> Insurances = [];
    private List<InsurancePolicyDto> InsurancePolicies = [];
    private InsurancePolicyDto InsurancePoliciyForm = new();

    #region Data

    private bool IsBPJS = false;
    private long _InsuranceId = 0;

    private long InsuranceId
    {
        get => _InsuranceId;
        set
        {
            InsurancePoliciyForm.InsuranceId = value;
            _InsuranceId = value;

            IsBPJS = Insurances.Any(x => x.IsBPJS == true && x.Id == value) ? true : false;
        }
    }

    #endregion Data

    #region Grid Properties

    private GroupMenuDto UserAccessCRUID = new();

    private bool ShowForm { get; set; } = false;
    private bool IsAccess = false;
    private bool PanelVisible { get; set; } = true;
    private int FocusedRowVisibleIndex { get; set; }
    private bool FormValidationState = true;

    public IGrid Grid { get; set; }
    private IReadOnlyList<object> SelectedDataItems { get; set; } = new ObservableRangeCollection<object>();

    #endregion Grid Properties

    #region LoadData

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await NavigationManager.CheckAccessUser(oLocal);
            IsAccess = result.Item1;
            UserAccessCRUID = result.Item2;
        }
        catch { }

        Insurances = await Mediator.Send(new GetInsuranceQuery());

        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                var result = await NavigationManager.CheckAccessUser(oLocal);
                IsAccess = result.Item1;
                UserAccessCRUID = result.Item2;
            }
            catch { }
        }
    }

     [Parameter]
    public EventCallback<List<InsurancePolicyDto>> InsurancePoliciesUpdated { get; set; }
    private async Task LoadData()
    {
        PanelVisible = true;
        SelectedDataItems = new ObservableRangeCollection<object>();
        Countries = await Mediator.Send(new GetCountryQuery());

        InsurancePolicies = await Mediator.Send(new GetInsurancePolicyQuery());

        if (User != null && User.Id != 0)
        {
            InsurancePolicies = InsurancePolicies.Where(x => x.UserId == User.Id).ToList();
            InsurancePoliciyForm.UserId = User.Id;
        }

        await InsurancePoliciesUpdated.InvokeAsync(InsurancePolicies);

        PanelVisible = false;
    }

    #endregion LoadData

    #region Grid Function

    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
    }

    private void Grid_CustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
    {
        ((ITextEditSettings)e.EditSettings).ShowValidationIcon = true;
    }

    #region SaveDelete

    private async Task OnDelete(GridDataItemDeletingEventArgs e)
    {
        try
        {
            if (SelectedDataItems is null)
            {
                await Mediator.Send(new DeleteInsurancePolicyRequest(((InsuranceDto)e.DataItem).Id));
            }
            else
            {
                await Mediator.Send(new DeleteInsurancePolicyRequest(ids: SelectedDataItems.Adapt<List<InsuranceDto>>().Select(x => x.Id).ToList()));
            }

            await LoadData();
        }
        catch { }
    }

    private async Task OnSave()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(User.Name))
            {
                ToastService.ShowInfo("Please select the Patient first.");
                return;
            }

            if (InsurancePoliciyForm.Id == 0)
                await Mediator.Send(new CreateInsurancePolicyRequest(InsurancePoliciyForm));
            else
                await Mediator.Send(new UpdateInsurancePolicyRequest(InsurancePoliciyForm));

            ShowForm = false;

            await LoadData();
        }
        catch { }
    }

    #endregion SaveDelete

    #region ToolBar Button

    public async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
    }

    private async Task Refresh_Click()
    {
        await LoadData();
    }

    private void NewItem_Click()
    {
        InsurancePoliciyForm = new()
        {
            UserId = User.Id,
        };
        ShowForm = true;
    }

    private void EditItem_Click()
    {
        try
        {
            InsurancePoliciyForm = SelectedDataItems[0].Adapt<InsurancePolicyDto>();
            ShowForm = true;
        }
        catch { }
    }

    private void DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

    private void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    private async Task ExportXlsxItem_Click()
    {
        await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ExportXlsItem_Click()
    {
        await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ExportCsvItem_Click()
    {
        await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ImportFile()
    {
        await JsRuntime.InvokeVoidAsync("clickInputFile");
    }

    #endregion ToolBar Button

    #endregion Grid Function

    #region Form

    private async Task HandleValidSubmit()
    {
        FormValidationState = true;

        await OnSave();
    }

    private void HandleInvalidSubmit()
    {
        FormValidationState = false;
    }

    private void OnCancel()
    {
        InsurancePoliciyForm = new();
        ShowForm = false;
    }

    #endregion Form
}