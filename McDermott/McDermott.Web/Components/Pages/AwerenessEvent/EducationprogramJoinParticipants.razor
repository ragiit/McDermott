@page "/awereness-event/education-program/join-participant/{Slug}"
@using System.ComponentModel.DataAnnotations
@using McDermott.Application.Dtos.AwarenessEvent
@using static McDermott.Application.Features.Commands.AwarenessEvent.EducationProgramCommand
@using static McDermott.Application.Features.Commands.AwarenessEvent.ParticipanEduCommand
<PageTitle>@Helper.APP_NAME - Education Program</PageTitle>

<style>
    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }
</style>

@if (IsFound)
{
    if (IsClosed)
    {
        <div class="wrapper">
            <div class="container-fluid ">
                <div class="row centered-container">
                    <div class="col-md-10">
                        <div class="card mt-5">
                            <div class="card-header bg-primary">
                                <div class="row justify-content-center">
                                    <div class="col-auto align-self-center">
                                        <h4 class="fw-bold">@EducationPrograms.EventName</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="text-center">Sorry, this Education & Awareness Program program has ended.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <DxLoadingPanel @bind-Visible="PanelVisible"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Fetching Data...">
            <div class="wrapper">
                <div class="container-fluid ">
                    <div class="row centered-container">
                        <div class="col-md-10">
                            <div class="card mt-5">
                                <div class="card-header bg-success">
                                    <div class="row justify-content-center">
                                        <div class="col-auto align-self-center">
                                            <h4 class="fw-bold">@EducationPrograms.EventName</h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <EditForm Model="ahe" Context="EditFormContext">
                                        <DxFormLayout CssClass="w-100">
                                            <DxFormLayoutItem Caption="Employee Number" CaptionCssClass="normal-caption required-caption" ColSpanMd="12">
                                                <Template>
                                                    <DxGridLayout>
                                                        <Rows>
                                                            <DxGridLayoutRow />
                                                        </Rows>
                                                        <Columns>
                                                            <DxGridLayoutColumn Width="25fr" />
                                                            <DxGridLayoutColumn Width="5fr" />
                                                        </Columns>
                                                        <Items>
                                                            <DxGridLayoutItem Row="0" Column="0" CssClass="mt ">
                                                                <Template>
                                                                    <DxTextBox @bind-Text="@PatientNumber" NullText="Employee Number" CssClass="" ShowValidationIcon="true"></DxTextBox>
                                                                </Template>
                                                            </DxGridLayoutItem>
                                                            <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                <Template>
                                                                    <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                                              RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                              IconCssClass="fa-solid fa-magnifying-glass"
                                                                              Text="Search"
                                                                              SubmitFormOnClick="true"
                                                                              Click="OnSearchPatient"
                                                                              CssClass="w-100 me-1">
                                                                    </DxButton>
                                                                </Template>
                                                            </DxGridLayoutItem>
                                                        </Items>
                                                    </DxGridLayout>
                                                </Template>
                                            </DxFormLayoutItem>


                                            @if (Patient is not null && Patient.Id != 0)
                                            {
                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Name" ColSpanMd="12">
                                                    <MyTextBox @bind-Text="@Patient.Name"
                                                               ReadOnly
                                                               NullText="Name" />
                                                    <ValidationMessage For="@(() => Patient.Name)" />
                                                </DxFormLayoutItem>
                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Email" ColSpanMd="12">
                                                    <MyTextBox @bind-Text="@Patient.Email"
                                                               ReadOnly
                                                               NullText="Email" />
                                                    <ValidationMessage For="@(() => Patient.Email)" />
                                                </DxFormLayoutItem>

                                                @if (Patient.Department is null)
                                                {
                                                    Patient.Department = new();
                                                }

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Department" ColSpanMd="12">
                                                    <MyTextBox @bind-Text="@Patient.Department.Name"
                                                               ReadOnly
                                                               NullText="Department" />
                                                    <ValidationMessage For="@(() => Patient.Department)" />
                                                </DxFormLayoutItem>

                                                @*   <div class="row mt-3 row-100 justify-content-end">
                                    <div class="col-auto align-self-end">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                    RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                    Text="Join"
                                    SubmitFormOnClick="true"
                                    Click="OnClickJoin">
                                    </DxButton>
                                    </div>
                                    </div> *@
                                            }
                                        </DxFormLayout>

                                        @if (Patient is not null && Patient.Id != 0)
                                        {
                                            <div class="row mt-2">
                                                <div class="col-12">
                                                    <div class="row justify-content-end">
                                                        <div class="col-md-12 d-flex justify-content-end">
                                                            <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                                      RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                                                      Text="Join"
                                                                      CssClass="w-130"
                                                                      SubmitFormOnClick="true"
                                                                      Click="OnClickJoin">
                                                            </DxButton>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DxLoadingPanel>
    }
}
else
{
    <div class="wrapper">
        <div class="container-fluid ">
            <div class="row centered-container">
                <div class="col-md-10">
                    <div class="card mt-5">
                        <div class="card-header bg-primary">
                            <div class="row justify-content-center">
                                <div class="col-auto align-self-center">
                                    <h4 class="fw-bold">Slug</h4>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="text-center"> Sorry, The Program is not found, please check the URL.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Slug { get; set; } = string.Empty;

    private UserDto ahe { get; set; } = new();

    private bool IsFound { get; set; } = true;
    private bool PanelVisible { get; set; } = false;

    [Required]
    private string PatientNumber { get; set; } = string.Empty;

    private EducationProgramDto EducationPrograms { get; set; } = new();
    private UserDto Patient { get; set; } = new();

    private async Task OnClickJoin()
    {
        try
        {
            PanelVisible = true;

            var cek = await Mediator.Send(new ValidateParticipanEduQuery(x => x.PatientId == Patient.Id && x.EducationProgramId == EducationPrograms.Id));
            if (cek)
            {
                ToastService.ShowInfo("The Employee is already joined the Education & Awareness Program!");
                return;
            }

            await Mediator.Send(new CreateParticipanEduRequest(new ParticipanEduDto
                {
                    Date = DateTime.Now,
                    PatientId = Patient.Id,
                    EducationProgramId = EducationPrograms.Id,
                }));

            ToastService.ShowSuccess("Successfully joined the Wellness Program!");
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private async Task OnSearchPatient()
    {
        try
        {
            PanelVisible = true;
            Patient = await Mediator.Send(new GetSingleUserQuery
                {
                    Predicate = x => x.IsPatient == true && x.IsEmployee == true && (x.Legacy != null && x.Legacy.Equals(PatientNumber)) ||
                                x.NIP != null && x.NIP.Equals(PatientNumber) ||
                                x.Oracle != null && x.Oracle.Equals(PatientNumber) ||
                                x.SAP != null && x.SAP.Equals(PatientNumber),
                    Select = x => new User
                    {
                        Id = x.Id,
                        Name = x.Name,
                        Email = x.Email,
                        Department = new Department
                        {
                            Name = x.Department != null ? x.Department.Name : "-"
                        },
                    }
                });

            if (Patient is null || Patient.Id == 0)
            {
                ToastService.ShowInfo("The Employee Number is not found.");
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private bool IsClosed { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PanelVisible = true;
            EducationPrograms = await Mediator.Send(new GetSingleEducationProgramQuery
                {
                    Predicate = x => x.Slug == Slug
                });

            if (EducationPrograms is null)
            {
                IsFound = false;
                return;
            }

            if (EducationPrograms.EndDate is not null && EducationPrograms.EndDate < DateTime.Today)
            {
                IsClosed = true;
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }


    }
}