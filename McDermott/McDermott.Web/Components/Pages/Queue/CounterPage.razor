@* @page "/transaction/counter" *@
@page "/queue/queue-counters"
@rendermode InteractiveServer

<PageTitle>McHealthCare - Queue Counter</PageTitle>

<style>
    .dxbl-toolbar-dropdown-toggle {
        display: none;
    }

    .cards {
        background-color: aliceblue;
    }

    }

    .cards:hover {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
        transform: scaleX(1.1);
    }
</style>
@if (IsAccess)
{
    <div class="wrapper">
        <McDermott.Web.Components.Layout.BaseContentHeaderLayout Title="Counter" />

        <section class="content">
            <div class="container-fluid">
                <div class="row ">
                    <div class="col">
                        <div class="w-100">
                            <div class="col align-self-center">
                                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                          Click="NewItem_Click"
                                          RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                          IconCssClass="fa-solid fa-plus"
                                          Text="Add New Counter"
                                          SubmitFormOnClick="true" />
                            </div>
                        </div>
                        <div class="row mt-3">
                            @if (IsLoading)
                            {
                                <LoadingIndicatorLayout />
                            }
                            else
                            {
                                @foreach (var i in counters)
                                {
                                    var z = Services.Where(x => x.Id == i.ServiceId).Select(x => x.Name).FirstOrDefault();
                                    if (z == null)
                                    {
                                        z = "-";
                                    }
                                    <div class="col-md-4 ">
                                        <div class="card cards">
                                            <div class="card-header">
                                                @{
                                                    var NameCounters = "Counter " + i.Name;
                                                }
                                                <DxToolbar Title="@NameCounters.ToUpper()" ItemRenderStyleMode="ToolbarRenderStyleMode.Plain"
                                                           CssClass="position-relative">
                                                    <Items>
                                                        <DxToolbarItem IconCssClass="fa-solid fa-ellipsis-vertical fa-lg" CssClass="position-absolute top-50 start-100 translate-middle">
                                                            <Items>
                                                                <DxToolbarItem Visible="@UserAccessCRUID.IsUpdate" Text="Edit" Click="@(() => EditItem_Click(i.Id))" IconCssClass="fa-solid fa-pen-to-square" />
                                                                @if (i.Status == "open")
                                                                {
                                                                    <DxToolbarItem Visible="@UserAccessCRUID.IsDelete" Text="Delete" Click="@(() => OnDelete(i.Id))" IconCssClass="fa-solid fa-trash" />
                                                                }
                                                                else
                                                                {
                                                                    <DxToolbarItem Enabled="false" Text="Delete" Click="@(() => OnDelete(i.Id))" IconCssClass="fa-solid fa-trash" />
                                                                }
                                                                @if (i.Status == "open")
                                                                {
                                                                    <DxToolbarItem Enabled="false" Text="Closed" Click="@(() => InActive_Click(i.Id))" IconCssClass="fa-solid fa-circle-xmark" />
                                                                }
                                                                else
                                                                {
                                                                    <DxToolbarItem Text="Closed" Click="@(() => InActive_Click(i.Id))" IconCssClass="fa-solid fa-circle-xmark" />
                                                                }

                                                            </Items>
                                                        </DxToolbarItem>
                                                    </Items>
                                                </DxToolbar>
                                            </div>
                                            <div class="card-body shadow">
                                                <div class="row">
                                                    <div class="row">
                                                        <div class="col-md-3">
                                                            <label class="me-2">Status</label>
                                                        </div>
                                                        <div class="col-md-9">
                                                            :
                                                            @if (i.Status == "open")
                                                            {
                                                                <span class='badge bg-primary py-1 px-2' title="Open">Open</span>
                                                            }
                                                            else if (i.Status == "on process")
                                                            {
                                                                <span class='badge bg-success py-1 px-2' title=" On Process"> On Process</span>
                                                            }
                                                            else if (i.Status == "stop")
                                                            {
                                                                <span class='badge bg-danger py-1 px-2' title="Stopped">Stopped</span>
                                                            }
                                                        </div>
                                                    </div>

                                                    <div class="row">
                                                        <div class="col-md-3">
                                                            <label class="me-2 mb-0">Service</label>
                                                        </div>
                                                        <div class="col-md-9">
                                                            : <span class='badge bg-dark py-1 px-2'>@z</span>
                                                        </div>
                                                    </div>

                                                    @* <div class="col-12">
                                        @if (i.Status == "open")
                                        {
                                        <div class="d-flex align-items-center">
                                        <label class="me-2">Status: </label>
                                        <span class='badge bg-primary py-1 px-2' title="Open">Open</span>
                                        </div>
                                        }
                                        else if (i.Status == "on process")
                                        {
                                        <div class="d-flex align-items-center">
                                        <label class="me-2">Status: </label>
                                        <span class='badge bg-success py-1 px-2' title=" On Process"> On Process</span>
                                        </div>
                                        }
                                        else if (i.Status == "stop")
                                        {
                                        <div class="d-flex align-items-center">
                                        <label class="me-2">Status: </label>
                                        <span class='badge bg-danger py-1 px-2' title="Stopped">Stopped</span>
                                        </div>
                                        }
                                        </div>
                                        <div class="col-12 d-flex align-items-center">
                                        <label class="me-2 mb-0">Service:</label>
                                        <span class='badge bg-dark py-1 px-2'>@z</span>
                                        </div> *@
                                                </div>

                                                <div class="row mt-3">
                                                    <div class="col-12">
                                                        @if (i.Status == "open")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-12 d-flex justify-content-end">
                                                                    <DxButton IconCssClass="fa-solid fa-gears" RenderStyle="ButtonRenderStyle.Primary" Text="Start Configuration" Click="@(()=>ShowOnProcess(i.Id))"></DxButton>
                                                                </div>
                                                            </div>
                                                        }
                                                        else if (i.Status == "stop")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-5 d-flex justify-content-end">
                                                                    <DxButton IconCssClass="fa-solid fa-circle-play" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="Resume" Click="@(() => ResumeProcess(i.Id))" />
                                                                </div>
                                                            </div>
                                                        }
                                                        else if (i.Status == "on process")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-12 d-flex justify-content-end">
                                                                    <DxButton CssClass="mr-2" IconCssClass="fa-solid fa-stop" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="Stop" Click="@(() => StopProcess(i.Id))" />
                                                                    <DxButton IconCssClass="fa-solid fa-eye" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="View" Click="@(() => DetailList(i.Id))" />
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                           @*  <div class="card-footer ">
                                                <div class="row">
                                                    <div class="col-12">
                                                        @if (i.Status == "open")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-12 d-flex justify-content-end">
                                                                    <DxButton IconCssClass="fa-solid fa-gears" RenderStyle="ButtonRenderStyle.Primary" Text="Start Configuration" Click="@(()=>ShowOnProcess(i.Id))"></DxButton>
                                                                </div>
                                                            </div>
                                                        }
                                                        else if (i.Status == "on process")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-12 d-flex justify-content-end">
                                                                    <DxButton CssClass="mr-2" IconCssClass="fa-solid fa-stop" RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="Stop" Click="@(() => StopProcess(i.Id))" />
                                                                    <DxButton IconCssClass="fa-solid fa-eye" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="View" Click="@(() => DetailList(i.Id))" />
                                                                </div>
                                                            </div>
                                                        }
                                                        else if (i.Status == "stop")
                                                        {
                                                            <div class="row justify-content-end">
                                                                <div class="col-md-5 d-flex justify-content-end">
                                                                    <DxButton IconCssClass="fa-solid fa-circle-play" RenderStyleMode="@ButtonRenderStyleMode.Outline" Text="Resume" Click="@(() => ResumeProcess(i.Id))" />
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div> *@
                                        </div>
                                    </div>

                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}
else
{
    <div class="wrapper">
        <McDermott.Web.Components.Layout.BaseContentHeaderLayout Title="Counter" />

        <LoadingIndicatorLayout></LoadingIndicatorLayout>
    </div>
}

@* <DxPopup HeaderText="@textPopUp" @bind-Visible="@PopUpVisible" CloseOnOutsideClick="false" HorizontalAlignment="@DevExpress.Blazor.HorizontalAlignment.Center"
         VerticalAlignment="@DevExpress.Blazor.VerticalAlignment.Center">
    <EditForm Model="@counterForm" Context="EditFormContext">
        <DataAnnotationsValidator />
        <div class="row w-100">
            <div class="col-md-12">
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem ColSpanMd="12" CaptionCssClass="required-caption normal-caption" Caption="Counter Name" CaptionPosition="CaptionPosition.Horizontal">
                        <DxTextBox ShowValidationIcon="true" @bind-Text="@counterForm.Name" NullText="Input Counter Name.." ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                        <ValidationMessage For="@(() => counterForm.Name)" />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </div>
            <div class="col-md-12">
                <div class="row w-100 justify-content-end mt-2">
                    <div class="col-auto align-self-end">
                        <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Submit" SubmitFormOnClick="true" Click="OnSave"></DxButton>
                        <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Discard" SubmitFormOnClick="true" Click="OnCancel"></DxButton>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</DxPopup> *@

<DxPopup Context="A"
         HeaderText="@textPopUp"
         @bind-Visible="@PopUpVisible"
         HeaderCssClass="fw-bold"
         CloseOnOutsideClick="false"
         Width="70%"
         HorizontalAlignment="HorizontalAlignment.Center"
         VerticalAlignment="VerticalAlignment.Center"
         EnableAdaptivity="true"
         ShowFooter="true">
    <BodyContentTemplate>
        <DxLoadingPanel @bind-Visible="IsLoadingAddNewCounter"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Saving...">
            <EditForm Context="B" Model="@counterForm" OnValidSubmit="(async () => await OnSaveAddNewCounter(2))">
                <AntiforgeryToken />
                <Blazored.FluentValidation.FluentValidationValidator />
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Name" ColSpanMd="12">
                        <MyTextBox @bind-Text="@counterForm.Name" NullText="Name" />
                        <ValidationMessage For="@(() => counterForm.Name)"   />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        </DxLoadingPanel>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" SubmitFormOnClick="true" Enabled="!IsLoadingAddNewCounter" Click="(async () => await OnSaveAddNewCounter(2))" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Enabled="!IsLoadingAddNewCounter" Click="@(() => PopUpVisible = false)" />
    </FooterContentTemplate>
</DxPopup>

@* <DxPopup HeaderText="@textPopUp.ToUpper()" CloseOnOutsideClick="false" HorizontalAlignment="@DevExpress.Blazor.HorizontalAlignment.Center"
         VerticalAlignment="@DevExpress.Blazor.VerticalAlignment.Center" MinWidth="500" @bind-Visible="@showFormProcess" Width="auto">
    <EditForm Model="@counterForm" Context="EditFormContext">
        <DataAnnotationsValidator />
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Service Counter" ColSpanMd="12">
                <DxComboBox Data="@ServiceP"
                            @bind-Value="@counterForm.ServiceKId"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="@DataGridFilteringMode.Contains"
                            NullText="Select Service Counter.."
                            TextFieldName="Name" ValueFieldName="Id"></DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Service" ColSpanMd="12">
                <DxComboBox Data="@ServiceP"
                            @bind-Value="@SelectPhysicion"
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="@DataGridFilteringMode.Contains"
                            NullText="Select Service.."
                            TextFieldName="Name" ValueFieldName="Id"></DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physician" ColSpanMd="12">
                <DxComboBox Data="@Phys"
                            @bind-Value="@counterForm.PhysicianId"
                            NullText="Select Physician.."
                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                            FilteringMode="@DataGridFilteringMode.Contains"
                            TextFieldName="Name" ValueFieldName="Id"></DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem ColSpanMd="12">
                <div class="row justify-content-end mt-3">
                    <div class="col-auto align-self-end">
                        <DxButton RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Save" SubmitFormOnClick="true" Click="OnProcess"></DxButton>
                        <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Discard" SubmitFormOnClick="true" Click="OnCancel"></DxButton>
                    </div>
                </div>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditForm>
</DxPopup> *@

<DxPopup Context="A"
    HeaderText="@textPopUp.ToUpper()"
         @bind-Visible="@PopUpEditCOunter"
         HeaderCssClass="fw-bold"
         CloseOnOutsideClick="false"
         Width="70%"
         HorizontalAlignment="HorizontalAlignment.Center"
         VerticalAlignment="VerticalAlignment.Center"
         EnableAdaptivity="true"
         ShowFooter="true">
    <BodyContentTemplate>
        <DxLoadingPanel @bind-Visible="IsLoadingAddNewCounter"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Saving...">
            <EditForm Context="B" Model="@counterForm" OnValidSubmit="(async () => await OnSaveAddNewCounter(1))">
                <DataAnnotationsValidator />
                <AntiforgeryToken />
                <Blazored.FluentValidation.FluentValidationValidator />
                <DxFormLayout CssClass="w-100">
                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Counter Service" ColSpanMd="12">
                        <MyDxComboBox Data="@ServiceK"
                                      NullText="Select Counter Service"
                                      @ref="refServiceKComboBox"
                                      @bind-Value="@counterForm.ServiceKId" 
                                      TextFieldName="Name"
                                      ValueFieldName="Id"
                                      TextChanged="((string e) => OnInputServiceKChanged(e))">
                            <Buttons>
                                <DxEditorButton  Click="OnSearchServiceKIndexDecrement"
                                                IconCssClass="fa-solid fa-caret-left"
                                                Tooltip="Previous Index" />
                                <DxEditorButton  Click="OnSearchServiceK"
                                                IconCssClass="fa-solid fa-magnifying-glass"
                                                Tooltip="Search" />
                                <DxEditorButton  Click="OnSearchServiceKIndexIncrement"
                                                IconCssClass="fa-solid fa-caret-right"
                                                Tooltip="Next Index" />
                            </Buttons>
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(ServiceDto.Name)" Caption="Name" />
                                <DxListEditorColumn FieldName="@nameof(ServiceDto.Code)" Caption="Code" />
                            </Columns>
                        </MyDxComboBox>
                        <ValidationMessage For="@(()=>counterForm.ServiceKId)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Service" ColSpanMd="12">
                        <MyDxComboBox Data="@ServiceP"
                                      NullText="Select Service"
                                      @ref="refServicePComboBox"
                                      @bind-Value="@counterForm.ServiceId"
                                      TextFieldName="Name"
                                      ValueFieldName="Id"
                                      TextChanged="((string e) => OnInputServicePChanged(e))">
                            <Buttons>
                                <DxEditorButton Click="OnSearchServicePIndexDecrement"
                                                IconCssClass="fa-solid fa-caret-left"
                                                Tooltip="Previous Index" />
                                <DxEditorButton Click="OnSearchServiceP"
                                                IconCssClass="fa-solid fa-magnifying-glass"
                                                Tooltip="Search" />
                                <DxEditorButton Click="OnSearchServicePIndexIncrement"
                                                IconCssClass="fa-solid fa-caret-right"
                                                Tooltip="Next Index" />
                            </Buttons>
                            <Columns>
                                <DxListEditorColumn FieldName="@nameof(ServiceDto.Name)" Caption="Name" />
                                <DxListEditorColumn FieldName="@nameof(ServiceDto.Code)" Caption="Code" />
                            </Columns>
                        </MyDxComboBox>
                        <ValidationMessage For="@(()=>counterForm.ServiceId)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physician" ColSpanMd="12">
                        <MyDxComboBox Data="@Physicians"
                                      NullText="Select Physician"
                                      @ref="refPhysicionComboBox"
                                      @bind-Value="@counterForm.PhysicianId" 
                                      TextFieldName="Name"
                                      ValueFieldName="Id"
                                      TextChanged="((string e) => OnInputPhysicionChanged(e))">
                            <Buttons>
                                <DxEditorButton  Click="OnSearchPhysicionIndexDecrement"
                                                IconCssClass="fa-solid fa-caret-left"
                                                Tooltip="Previous Index" />
                                <DxEditorButton  Click="OnSearchPhysicion"
                                                IconCssClass="fa-solid fa-magnifying-glass"
                                                Tooltip="Search" />
                                <DxEditorButton  Click="OnSearchPhysicionIndexIncrement"
                                                IconCssClass="fa-solid fa-caret-right"
                                                Tooltip="Next Index" />
                            </Buttons>
                            <Columns>
                                <DxListEditorColumn FieldName="Name" />
                                <DxListEditorColumn FieldName="Email" />
                                <DxListEditorColumn FieldName="MobilePhone" Caption="Mobile Phone" />
                                <DxListEditorColumn FieldName="Gender" />
                                <DxListEditorColumn FieldName="DateOfBirth" Caption="Date Of Birth" />
                                <DxListEditorColumn FieldName="IsPhysicion" Caption="Physicion" />
                                <DxListEditorColumn FieldName="IsNurse" Caption="Nurse" />
                            </Columns>
                        </MyDxComboBox>
                        <ValidationMessage For="@(()=>counterForm.PhysicianId)" />
                    </DxFormLayoutItem>
                </DxFormLayout>
            </EditForm>
        </DxLoadingPanel>
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" SubmitFormOnClick="true" Enabled="!IsLoadingAddNewCounter" Click="(async () => await OnSaveAddNewCounter(1))" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Enabled="!IsLoadingAddNewCounter" Click="@(() => PopUpEditCOunter = false)" />
    </FooterContentTemplate>
</DxPopup>