@page "/"
@using System.Drawing
@using DinkToPdf
@using DinkToPdf.Contracts
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using LZStringCSharp
@using McDermott.Application.Features.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Hosting
@using System.Net.Http.Headers
@using static McDermott.Web.Components.Pages.Transaction.GeneralConsultanServicePage
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject GoogleMeetService GoogleMeetService
@inject IHttpContextAccessor _httpContextAccessor

@inject CustomAuthenticationStateProvider CustomAuth

<PageTitle>McHealthCare</PageTitle>

@if (IsAccess)
{
    <div class="content-header">
        <div class="container-fluid">

            <h1><label>Home</label></h1>

            <p>Welcome, @UserLogin.Name. @Greeting</p>

            <div class="form-group">
                <label for="consultationType">Pilih Jenis Konsultasi:</label>
                <select id="consultationType" class="form-control" @onchange="OnConsultationTypeChanged">
                    <option value="offline">Konsul Offline</option>
                    <option value="online">Konsul Online</option>
                </select>
            </div>

            <button @onclick="CreateMeetLink">Create Google Meet Link</button>
            <a href="@meetLink" target="_blank">@meetLink</a>
            @*
        <button @onclick="CreateTeamsLink">Create Teams Meet Link</button>
        <a href="@meetLink" target="_blank">Join Teams Meet</a> *@

            @if (showConferenceLink)
            {
                <div class="form-group">
                    <label for="conferenceLink">Link Conference:</label>
                    <input type="text" id="conferenceLink" class="form-control" value="@linkMeet" readonly />
                </div>
            }

            @*
        <DxButton Click="Clicktop" Text="Hayoo Tebakk"></DxButton>
        <canvas id="pdfCanvas" style="display: none;"></canvas> *@

            @*   <input type="text" @bind="filePath" placeholder="Enter file path" />
        <button @onclick="DownloadFile">Download File</button>

        <DxGrid Data="@Data"
        TextWrapEnabled="false"
        ShowGroupPanel="true"
        AutoExpandAllGroupRows="true"
        ColumnResizeMode="GridColumnResizeMode.NextColumn"
        VirtualScrollingEnabled="true">
        <Columns>
        <DxGridDataColumn MinWidth="200" FieldName="Name" SortIndex="0" />
        </Columns>
        </DxGrid> *@
        </div>
    </div>
}
else
{
    <LoadingIndicatorLayout />
}


@code {
    private string meetLink { get; set; }
    private string meetLink2;

    private async Task CreateTeamsLink()
    {
        // var result = await TokenProvider.RequestAccessToken();
        // if (result.TryGetToken(out var tokenResult))
        // {
        //    meetLink2 = await CreateTeamsMeeting(tokenResult.Value);

        // }

        meetLink2 = await CreateTeamsMeeting(await GetAccessTokenAsync2());
        var a = "aodkawd";
    }
    public async Task<string> GetAccessTokenAsync2()
    {
        var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
        return accessToken;
    }
    async Task<string> CreateTeamsMeeting(string accessToken)
    {
        try
        {
            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var meetingRequest = new
            {
                startDateTime = "2024-09-01T10:00:00Z",
                endDateTime = "2024-09-01T11:00:00Z",
                subject = "Meeting Subject"
            };

            var response = await httpClient.PostAsJsonAsync("https://graph.microsoft.com/v1.0/me/onlineMeetings", meetingRequest);
            response.EnsureSuccessStatusCode();

            ToastService.ShowInfo("StatusCode " + response.StatusCode); 

            var responseContent = await response.Content.ReadAsStringAsync();
            dynamic meetingResponse = JsonConvert.DeserializeObject(responseContent);

            ToastService.ShowInfo("joinUrl " + meetingResponse.joinUrl); 

            return meetingResponse.joinUrl;
        }
        catch (Exception ex)
        {
            ToastService.ShowInfo(ex.Message);
        }

        return string.Empty;

    }
    private async Task CreateMeetLink()
    {
        try
        {
            meetLink = await GoogleMeetService.CreateMeetingAsync(ToastService);
        }
        catch (Exception ex)
        {
            ToastService.ShowInfo(ex.Message);
        }
    }

    private string aaaa = string.Empty;
    public async Task ClickAa()
    {
        // var accessToken = "983znr0HS7ONhTbpefox4w"; Implementasikan fungsi ini untuk mendapatkan token akses Zoom

        // var createMeetingRequest = new
        // {
        //     topic = "Meeting",
        //     type = 1, Instant meeting
        //     settings = new
        //     {
        //         host_video = true,
        //         participant_video = true
        //     }
        // };

        // var requestContent = new StringContent(System.Text.Json.JsonSerializer.Serialize(createMeetingRequest), Encoding.UTF8, "application/json");
        // var request = new HttpRequestMessage(HttpMethod.Post, "https:api.zoom.us/v2/users/me/meetings")
        //     {
        //         Headers =
        //     {
        //         Authorization = new AuthenticationHeaderValue("Bearer", accessToken)
        //     },
        //         Content = requestContent
        //     };

        // var _httpClient = new HttpClient();
        // var response = await _httpClient.SendAsync(request);
        // response.EnsureSuccessStatusCode();

        // var responseBody = await response.Content.ReadAsStringAsync();
        // var meetingResponse = System.Text.Json.JsonSerializer.Deserialize<MeetingResponse>(responseBody);

        // aaaa = meetingResponse.JoinUrl;
        aaaa = await GetAccessTokenAsync();
    }
    public class MeetingResponse
    {
        public string JoinUrl { get; set; }
    }

    public async Task<string> GetAccessTokenAsync()
    {
        var clientId = "0lDTn2MlQaefltFQ8xHI8Q";
        var clientSecret = "sa3ztP83GXqfuGmoertxtYp485nDVVkC";
        var tokenUrl = "https://zoom.us/oauth/token";
        var redirectUri = "https://helohelo.com/auth/callback";

        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, tokenUrl);

        var credentials = $"{clientId}:{clientSecret}";
        var base64Credentials = Convert.ToBase64String(Encoding.ASCII.GetBytes(credentials));

        request.Headers.Authorization = new AuthenticationHeaderValue("Basic", base64Credentials);
        request.Content = new FormUrlEncodedContent(new[]
        {
            new KeyValuePair<string, string>("grant_type", "authorization_code"),
            new KeyValuePair<string, string>("code", "983znr0HS7ONhTbpefox4w"),
            new KeyValuePair<string, string>("redirect_uri", redirectUri)
        });

        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();
        var tokenResponse = System.Text.Json.JsonSerializer.Deserialize<TokenResponse>(responseBody);

        return tokenResponse.AccessToken;
    }

    public class TokenResponse
    {
        public string AccessToken { get; set; }
        public string TokenType { get; set; }
        public int ExpiresIn { get; set; }
    }


    private string filePath { get; set; } = "Slip_Registration.pdf";
    object Data { get; set; }

    private bool showConferenceLink = false;
    private string consultationType = "offline";
    private string linkMeet = string.Empty;
    private async Task DownloadFile()
    {
        if (string.IsNullOrWhiteSpace(filePath))
        {
            // Handle empty file path case (e.g., show an error message)
            return;
        }

        var client = ClientFactory.CreateClient("ServerAPI");
        var response = await client.GetAsync($"api/file/download?filePath={Uri.EscapeDataString(filePath)}");

        if (response.IsSuccessStatusCode)
        {
            var fileName = response.Content.Headers.ContentDisposition?.FileNameStar ?? Path.GetFileName(filePath);
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var base64File = Convert.ToBase64String(fileBytes);

            await JsRuntime.InvokeVoidAsync("downloadFileFromStreamApi", fileName, base64File);
        }
        else
        {
            // Handle error case (e.g., file not found)
        }
    }

    private string mail { get; set; } = "argipurwanto0@gmil.com";
    private IGrid Grid { get; set; }
    private bool PanelVisible { get; set; } = false;
    public bool IsAddForm { get; set; }
    private int FocusedRowVisibleIndex { get; set; }
    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];

    IEnumerable<SaleInfo> SalesData2;
    BlazoredTextEditor richEditor = default!;
    string toolbar = """"...markup here..."""";
    string body = """"...markup here..."""";

    private void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow && e.VisibleIndex % 2 == 1)
        {
            e.CssClass = "alt-item";
        }
        if (e.ElementType == GridElementType.HeaderCell)
        {
            e.Style = "background-color: rgba(0, 0, 0, 0.08)";
            e.CssClass = "header-bold";
        }
    }

    void CustomizeSeriesPoint(ChartSeriesPointCustomizationSettings settings)
    {
    }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private string Greeting = "";

    private class DashboardTemp
    {
        public int UserCount { get; set; }
        public int PatientCount { get; set; }
        public int PhysicianCount { get; set; }
        public int NurseCount { get; set; }
        public int EmployeeCount { get; set; }
    }
    private async Task GeneratePdf()
    {
        try
        {

            var queueNumber = "123";
            var NamePatient = "John Doe";
            var ServiceKiosk = "Poliklinik Umum";
            var nameBPJS = "BPJS Kesehatan";
            var noBPJS = "987654321";
            var TypeNumber = "Antrian";
            var numbers = "456";

            // HTML untuk dokumen cetak
            bool isBlueBackground = true; // Atur kondisi boolean sesuai kebutuhan
            var backgroundColor = isBlueBackground ? "lightblue" : "white";


            var contentToPrint = $@"
        <!DOCTYPE html>
        <html lang='en'>
       <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>Cetak Antrian</title>
            <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css'>
            <style>
                .border {{
                    border: 1px solid black;
                    padding: 10px;
                    width: 100%;
                    max-width: 600px;
                    margin: auto;
                    background-color: {backgroundColor};
                }}
                .title {{
                    text-align: center;
                    font-weight: bold;
                    margin-top: 10px;
                }}
                .content {{
                    padding: 15px;
                }}
                .row {{
                    display: flex;
                    justify-content: space-between;
                    margin-bottom: 10px;
                }}
                .column {{
                    flex: 1;
                    padding: 5px;
                }}
                .bottom-center {{
                    text-align: center;
                    margin-top: 20px;
                    font-weight: bold;
                }}
                .logo {{
                    display: block;
                    margin: 0 auto 10px;
                    max-width: 100px;
                }}
            </style>
        </head>
        <body>
            <div class='border'>
                <img src='/image/logo.png' alt='Logo' class='logo' />
                <div class='title'>PT. McDERMOTT INDONESIA</div>
                <div class='title'>BASE CLINIC</div>
                <div class='content'>
                    <div class='row'>
                        <div class='column'><strong>Nama:</strong> ________________________</div>
                        <div class='column' style='text-align: right;'><strong>Tgl:</strong> ______</div>
                    </div>
                    <div class='row'>
                        <div class='column'><strong>X Sehari</strong></div>
                    </div>
                    <div class='row'>
                        <div class='column'><strong>Tetes Telinga</strong></div>
                    </div>
                    <div class='row'>
                        <div class='column'><strong>Tetes Mata</strong></div>
                    </div>
                    <div class='row'>
                        <div class='column'><strong>Oles</strong></div>
                    </div>
                    <div class='bottom-center'>
                        <strong>Obat Luar</strong>
                    </div>
                </div>
            </div>
        </body>

        </html>";

            // Panggil JavaScript Interop untuk memicu pencetakan
            await JsRuntime.InvokeVoidAsync("printJS", contentToPrint);



            //     var report = new ClinicReport
            //     {
            //         Date = DateTime.Now,
            //         Name = "John Doe",
            //         IsOnceADay = true,
            //         EarDrops = false,
            //         EyeDrops = true,
            //         Ointment = false
            //     };

            // var htmlContent = $@"
            //     <html>
            //         <head>
            //             <style>
            //                 .border {{
            //                     border: 1px solid black;
            //                     padding: 10px;
            //                     width: 50%;
            //                     margin: auto;
            //                 }}
            //                 .title {{
            //                     text-align: center;
            //                     font-weight: bold;
            //                 }}
            //             </style>
            //         </head>
            //         <body>
            //             <div class='border'>
            //                 <div class='title'>PT. McDERMOTT INDONESIA</div>
            //                 <div class='title'>BASE CLINIC</div>
            //                 <p>Nama : {report.Name}</p>
            //                 <p>Obat Luar</p>
            //             </div>
            //         </body>
            //     </html>";

            // var converter = new SynchronizedConverter(new PdfTools());
            // var pdf = new HtmlToPdfDocument()
            //     {
            //         GlobalSettings = {
            //         Orientation =  DinkToPdf.Orientation.Portrait,
            //         PaperSize = PaperKind.A4
            //     },
            //         Objects = {
            //         new ObjectSettings() {
            //             HtmlContent = htmlContent,
            //             WebSettings = { DefaultEncoding = "utf-8" }
            //         }
            //     }
            //     };

            // var pdfBytes = converter.Convert(pdf);

            // var base64String = Convert.ToBase64String(pdfBytes);
            // var fileUrl = $"data:application/pdf;base64,{base64String}";

            // await JsRuntime.InvokeVoidAsync("downloadFileNew", fileUrl, "report.pdf");

        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
    }

    private async Task OnConsultationTypeChanged(ChangeEventArgs e)
    {
        consultationType = e.Value.ToString();
        if (consultationType == "online")
        {
            showConferenceLink = true;
            linkMeet = GenerateMeetLink();
        }
        else
        {
            showConferenceLink = false;
            linkMeet = string.Empty;
        }
    }

    private string GenerateMeetLink()
    {
        Random random = new Random();

        // Generate 5 random characters for the meeting code
        string meetingCode = "";
        for (int i = 0; i < 5; i++)
        {
            meetingCode += (char)random.Next(97, 122); // Huruf kecil a-z
        }

        // Generate 3 random characters for the separator
        string separator = "";
        for (int i = 0; i < 3; i++)
        {
            separator += (char)random.Next(97, 122); // Huruf kecil a-z
        }

        // Generate 5 random characters for the last part of the code
        string lastPart = "";
        for (int i = 0; i < 5; i++)
        {
            lastPart += (char)random.Next(97, 122); // Huruf kecil a-z
        }

        return $"https://meet.google.com/{meetingCode}-{separator}-{lastPart}";
    }

    private async Task<UserCredential> GetCredentialAsync()
    {
        UserCredential credential;

        using (var stream = new FileStream("wwwroot/Surat/secret_client.json", FileMode.Open, FileAccess.Read))
        {
            string credPath = "token.json";
            credential = await GoogleWebAuthorizationBroker.AuthorizeAsync(
                GoogleClientSecrets.FromStream(stream).Secrets,
                new[] { CalendarService.Scope.Calendar },
                "user",
                CancellationToken.None,
                new FileDataStore(credPath, true));
        }

        return credential;
    }

    public class ClinicReport
    {
        public DateTime Date { get; set; }
        public string Name { get; set; }
        public bool IsOnceADay { get; set; }
        public bool EarDrops { get; set; }
        public bool EyeDrops { get; set; }
        public bool Ointment { get; set; }
    }

    private async Task Clicktop()
    {
        await GeneratePdf();
        // NavigationManager.NavigateTo($"https://teams.microsoft.com/l/call/0/0?users={mail}");
    }

    private DashboardTemp Dashboard { get; set; } = new();
    public class ProductTemp
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public double DiscountPercentage { get; set; }
        public double Rating { get; set; }
        public int Stock { get; set; }
        public string Brand { get; set; }
        public string Category { get; set; }
        public string Thumbnail { get; set; }
        public List<string> Images { get; set; }
    }
    private List<ProductTemp> ProductTemps = [];

    static string Signature(string timestamp)
    {
        var data = "15793&" + timestamp;
        var secretKey = "8nDF24C2AD";

        // Initialize the keyed hash object using the secret key as the key
        HMACSHA256 hashObject = new HMACSHA256(Encoding.UTF8.GetBytes(secretKey));

        // Computes the signature by hashing the salt with the secret key as the key
        var signature = hashObject.ComputeHash(Encoding.UTF8.GetBytes(data));

        // Base 64 Encode
        var encodedSignature = Convert.ToBase64String(signature);

        // URLEncode
        // encodedSignature = System.Web.HttpUtility.UrlEncode(encodedSignature);

        return encodedSignature;

    }

    private string Response { get; set; }

    private async Task Send()
    {
        try
        {
            DateTime epochStart = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            TimeSpan timeSpan = DateTime.UtcNow - epochStart;
            string t = Convert.ToInt64(timeSpan.TotalSeconds).ToString();
            string sign = Signature(t);
            string ee = $"dermott:BPJSKes2024**:095".EncodeToBase64();

            var url = "https://apijkn-dev.bpjs-kesehatan.go.id/pcare-rest-dev/peserta/0001462337886";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Add("X-cons-id", "15793");
            request.Headers.Add("X-timestamp", t);
            request.Headers.Add("X-signature", sign);
            request.Headers.Add("X-authorization", $"Basic {ee}");
            request.Headers.Add("user_key", "6825c31715d8d748d5944f13b39ac431");
            // request.Content = new StringContent("", Encoding.ASCII, "text/plain");

            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                // Ambil data dari respon
                var responseData = await response.Content.ReadAsStringAsync();

                string aa = "15793";
                string a1 = "8nDF24C2AD";
                string a2 = t;
                string a3 = aa + a1 + a2;

                dynamic responseJson = JsonConvert.DeserializeObject(responseData);

                string r = responseJson.response;
                dynamic metaData = responseJson.metaData;

                // string LZDecrypted = Decrypt2(a3, r);
                // string result = LZString.DecompressFromEncodedURIComponent(LZDecrypted);

                // Sekarang variabel "anis" berisi data respons dari permintaan
            }
            else
            {
                // Tangani kesalahan jika diperlukan
                var errorResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorResponse}");
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
    }
    public class DataResponse<T>
    {
        public List<T> Data { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;
        // var client = ClientFactory.CreateClient("ServerAPI");
        // var response = await client.GetAsync($"api/file/yeay");

        // if (response.IsSuccessStatusCode)
        // {
        //     // Read the JSON response as a string
        //     var jsonString = await response.Content.ReadAsStringAsync();

        //     // Deserialize JSON into a DataResponse<District> object
        //     var dataResponse = JsonConvert.DeserializeObject<DataResponse<District>>(jsonString);

        //     // Extract the list of districts
        //     Data = dataResponse?.Data ?? new List<District>();
        // }
        // else
        // {
        //     // Handle error case (e.g., file not found)
        // }

        // var aaa = await PcareService.SendPCareService($"poli/fktp/0/10", HttpMethod.Get);
        // var aaab = await PcareService.SendPCareService($"provider/0/10", HttpMethod.Get);
        // var aaabc = await PcareService.SendPCareService($"statuspulang/rawatInap/false", HttpMethod.Get);
        // var aaabcd = await PcareService.SendPCareService($"statuspulang/rawatInap/true", HttpMethod.Get);
        // var aaabcde = await PcareService.SendPCareService($"kesadaran", HttpMethod.Get);
        // var aaabb = aaa;

        // Console.WriteLine(Convert.ToString(JsonConvert.DeserializeObject<dynamic>(aaabcde.Item1)));

        // Response += Convert.ToString("Provider" + aaab);
        // Response += Convert.ToString("rawatInap" + aaabc);
        // Response += Convert.ToString("rawatInapTrue" + aaabcd);
        // Response += Convert.ToString("kesadaran" + aaabcde);
        // Response += Convert.ToString(aaa);

        // // POST DATA
        // var regis = new PendaftaranRequest
        //     {
        //         kdProviderPeserta = "00010001",
        //         tglDaftar = "06-05-2024",
        //         noKartu = "0001113569638",
        //         kdPoli = "001",
        //         keluhan = null,
        //     };

        // var responseApi = await PcareService.SendPCareService($"pendaftaran", HttpMethod.Post, regis);
        // dynamic data = responseApi.Item1;
        // data = JsonConvert.DeserializeObject<dynamic>(data);

        // Response += "\n" + Convert.ToString(data);
        // string akk = $"\n Field \"{data.field} \" {data.message}";
        // ToastService.ShowInfo(akk.ToString());

        // var result = await PcareService.SendPCareService($"poli/fktp/1/1000", HttpMethod.Get);

        // await Send();
        // var aa = await AuthenticationState;
        // var bb = aa.User.Identity.Name;
        // SalesData2 = await Sales.GetSalesAsync();

        ///Decrypted
        // DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        // TimeSpan timeSpan = DateTime.UtcNow - epoch;
        // long tStamp = (long)timeSpan.TotalSeconds;
        ///
        // string r = "Wcem5CYDCbnmR5fcoBtip3UDpHUxcq1N7hUfK4uMm3xs3L+vPboELhK6PMjvxX1QP0o9DpVcEsLBjmswszbku3pFH2HR3S+iLcSP65JFYJlGwXUDtd9TF+PFQuPo3YaqRGhLQ3YBLCkPifnTcuGqAQdIw5cNT5RhF8tKcmOWB6tTc29heTSp5mTf4S81FDl9jY55n1OkQsirSzYGgGzXdolW4K6mMc6loYstTR1GVQXaTEsl7z4HhzXtEVB7W2IYaTcrUetUW6Tad0EGaaAznwOs8ek8YDd+4CQcbFCq/K30RZg9uiKyLeFtfsQCyA9ZDOS7sKhTUdGiGqIyW6uLsBSEq4ysZJpMcIZc/8D0aps56auvLmJY+HNWKklfbl88+DJmpxud7hFuYZo9jTlkrIA/gnIJZcKTa6gMUpzEH1RyHdzOTNogRxvpwGb3dRkcHfjvOHo0kI9DM2236XWfjIypa2RkhF8KsKtBjoSnVnMNDZNTXX6Sp/k/vmaJcU+8RJbh1ah1E1tgLnyGQY7+nu8CjCBqv0ODOChG7JKKz6dU6KZC/VWX7cXH8+/SGXOSKiijsJJEAiOX2Okqv87m9rmhHL6VcoCNFhQXtOYo1U2RCQVXhcpxOsl6gsQWqAMYFc95zMSjkBCot6975LQVhETzt2AAd67L6Abd+ylRBzlpfX2PZrIab0i8rjwdstNE3xg+r/tTayvSRzMHyoX/PYTr6FKtky4u2sjx/3wH+WLqMFvKzbiNSgbT/lRrGaS1FMxVR75/7qYchVCJieauSg==";
        // string aa = "15793";
        // string a1 = "8nDF24C2AD";
        // // string a2 = "1714373200";
        // string a2 = tStamp.ToString();
        // string a3 = aa + a1 + a2;
        // string LZDecrypted = Decrypt(a3, r);
        // string result = LZString.DecompressFromEncodedURIComponent(LZDecrypted);

        // var a = await HttpClient.GetStringAsync("https://dummyjson.com/products?limit=99999999999999")!;

        // var jsonObject = JsonConvert.DeserializeObject<dynamic>(a);

        // // Mengambil nilai dari properti 'products'
        // var productsJson = jsonObject["products"].ToString();

        // // Mengonversi string produk menjadi List<ProductTemp>
        // var products = JsonConvert.DeserializeObject<List<ProductTemp>>(productsJson);

        // ProductTemps = products;

        var hour = DateTime.Now.Hour;

        if (hour < 12)
            Greeting = "Good Morning!";
        else if (hour < 17)
            Greeting = "Good Afternoon!";
        else
            Greeting = "Good Evening!";

        // var users = await Mediator.Send(new GetUserQuery());
        // // Dashboard.UserCount = users.Where(x => x.IsUser == true).Count();
        // Dashboard.UserCount = users.Count();
        // Dashboard.PatientCount = users.Where(x => x.IsUser == true).Count();
        // Dashboard.PhysicianCount = users.Where(x => x.IsPhysicion == true).Count();
        // Dashboard.NurseCount = users.Where(x => x.IsNurse == true).Count();
        // Dashboard.EmployeeCount = users.Where(x => x.IsEmployee == true).Count();

        PanelVisible = false;
        // try
        // {
        //     var result = await NavigationManager.CheckAccessUser(oLocal);
        //     IsAccess = result.Item1;
        //     UserAccessCRUID = result.Item2;
        // }
        // catch { }
    }

    #region UserLoginAndAccessRole

    [Inject]
    public UserInfoService UserInfoService { get; set; }

    private GroupMenuDto UserAccessCRUID = new();
    private User UserLogin { get; set; } = new();
    private bool IsAccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                await GetUserInfo();
                StateHasChanged();
            }
            catch
            {
            }
        }
    }

    private async Task GetUserInfo()
    {
        try
        {
            var user = await UserInfoService.GetUserInfo(ToastService);
            IsAccess = user.Item1;
            UserAccessCRUID = user.Item2;
            UserLogin = user.Item3;

            var a = (CustomAuthenticationStateProvider)CustomAuth;
            string serialize = JsonConvert.SerializeObject(user.Item3);
            var encrypt = Helper.Encrypt(serialize);
            await a.UpdateAuthState(encrypt);
        }
        catch { }
    }

    #endregion UserLoginAndAccessRole

    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    BlazoredTextEditor QuillReadOnly;

    string QuillHTMLContent;
    string QuillContent;
    string QuillReadOnlyContent =
        @"<span><b>Read Only</b> <u>Content</u></span>";

    bool mode = false;

    public async void GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    public async void SetHTML()
    {
        string QuillContent =
            @"<a href='http://BlazorHelpWebsite.com/'>" +
            "<img src='images/BlazorHelpWebsite.gif' /></a>";

        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }

    public async void GetContent()
    {
        QuillContent = await this.QuillNative.GetContent();
        StateHasChanged();
    }
    public async void LoadContent()
    {
        await this.QuillNative.LoadContent(QuillContent);
        StateHasChanged();
    }

    public async void InsertImage()
    {
        await this.QuillNative.InsertImage(@"D:\Pictures\wp4586807-aesthetic-anime-wallpapers.jpg");
        StateHasChanged();
    }

    public async void InsertText()
    {
        await this.QuillNative.InsertText("Some Text");
        StateHasChanged();
    }

    async Task ToggleQuillEditor()
    {
        mode = (mode) ? false : true;
        await this.QuillReadOnly.EnableEditor(mode);
    }

    public class SaleInfo2
    {
        public long OrderId { get; set; }
        public string Region { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public long Amount { get; set; }
        public DateTime Date { get; set; }
    }
    public class SaleInfo
    {
        public long OrderId { get; set; }
        public string Region { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public long Amount { get; set; }
        public DateTime Date { get; set; }
    }

    private async Task Test()
    {
        try
        {
            var aa = await Mediator.Send(new GetCountryQuery());
            var z = aa[1000];
        }
        catch (Exception e)
        {
            throw new Exception(e.Message, e);
        }

    }

    private async Task Test2()
    {
        try
        {
            var aa = await Mediator.Send(new GetCountryQuery());
            var z = aa[1000];
        }
        catch (Exception e)
        {
            e.HandleException(ToastService);
        }

    }

    public class Sales
    {
        static IList<SaleInfo> dataSource;
        static Sales()
        {
            CreateDataSource();
        }

        public static Task<IQueryable<SaleInfo>> GetSalesAsync()
        {
            return Task.FromResult(dataSource.AsQueryable());
        }

        static void CreateDataSource()
        {
            dataSource = new List<SaleInfo> {
        new SaleInfo {
                OrderId = 10248,
                Region = "North America",
                Country = "United States",
                City = "New York",
                Amount = 1740,
                Date = DateTime.Parse("2017/01/06")
            },
            new SaleInfo {
                OrderId = 10249,
                Region = "North America",
                Country = "United States",
                City = "Los Angeles",
                Amount = 850,
                Date = DateTime.Parse("2017/01/13")
            },
            new SaleInfo {
                OrderId = 10250,
                Region = "North America",
                Country = "United States",
                City = "Denver",
                Amount = 2235,
                Date = DateTime.Parse("2017/01/07")
            },
            new SaleInfo {
                OrderId = 10251,
                Region = "North America",
                Country = "Canada",
                City = "Vancouver",
                Amount = 1965,
                Date = DateTime.Parse("2017/01/03")
            },
            new SaleInfo {
                OrderId = 10252,
                Region = "North America",
                Country = "Canada",
                City = "Edmonton",
                Amount = 880,
                Date = DateTime.Parse("2017/01/10")
            },
            new SaleInfo {
                OrderId = 10253,
                Region = "South America",
                Country = "Brazil",
                City = "Rio de Janeiro",
                Amount = 5260,
                Date = DateTime.Parse("2017/01/17")
            },
            new SaleInfo {
                OrderId = 10254,
                Region = "South America",
                Country = "Argentina",
                City = "Buenos Aires",
                Amount = 2790,
                Date = DateTime.Parse("2017/01/21")
            },
            new SaleInfo {
                OrderId = 10255,
                Region = "South America",
                Country = "Paraguay",
                City = "Asuncion",
                Amount = 3140,
                Date = DateTime.Parse("2017/01/01")
            },
            new SaleInfo {
                OrderId = 10256,
                Region = "Europe",
                Country = "United Kingdom",
                City = "London",
                Amount = 6175,
                Date = DateTime.Parse("2017/01/24")
            },
            new SaleInfo {
                OrderId = 10257,
                Region = "Europe",
                Country = "Germany",
                City = "Berlin",
                Amount = 4575,
                Date = DateTime.Parse("2017/01/11")
            },
            // ...
    };
        }
    }
}