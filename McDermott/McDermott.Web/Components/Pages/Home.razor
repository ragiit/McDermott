@page "/"
@using System.Drawing
@using McDermott.Application.Features.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject CustomAuthenticationStateProvider CustomAuth

<PageTitle>McHealthCare</PageTitle>

<!-- Content Header (Page header) -->
@if (IsAccess)
{
    <div class="content-header">
        <div class="container-fluid">

            <h1><label>Home</label></h1>
            @*  <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
        <p>Welcome, @context.User.Identity.Name. @Greeting</p>
        </Authorized>
        <NotAuthorized>
        <p>Welcome, Guest!</p>
        </NotAuthorized>
        </Microsoft.AspNetCore.Components.Authorization.AuthorizeView> *@

            <p>Welcome, @UserLogin.Name. @Greeting</p>

            @* <DxButton Click="Test" Text="Test"></DxButton>
        <DxButton Click="Test2" Text="Test"></DxButton> *@

            @* <br />

        <div class="row">
        <div class="col-sm">
        <div class="info-box">
        <span class="info-box-icon bg-info elevation-1"><i class="fas fa-cog"></i></span>

        <div class="info-box-content">
        <span class="info-box-text">CPU Traffic</span>
        <span class="info-box-number">
        10
        <small>%</small>
        </span>
        </div>
        <!-- /.info-box-content -->
        </div>
        <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <div class="col-sm">
        <div class="info-box mb-3">
        <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-thumbs-up"></i></span>

        <div class="info-box-content">
        <span class="info-box-text">Likes</span>
        <span class="info-box-number">41,410</span>
        </div>
        <!-- /.info-box-content -->
        </div>
        <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <!-- fix for small devices only -->
        <div class="clearfix hidden-md-up"></div>

        <div class="col-sm">
        <div class="info-box mb-3">
        <span class="info-box-icon bg-success elevation-1"><i class="fas fa-shopping-cart"></i></span>

        <div class="info-box-content">
        <span class="info-box-text">Sales</span>
        <span class="info-box-number">760</span>
        </div>
        <!-- /.info-box-content -->
        </div>
        <!-- /.info-box -->
        </div>
        <!-- /.col -->
        <div class="col-sm">
        <div class="info-box mb-3">
        <span class="info-box-icon bg-warning elevation-1"><i class="fas fa-users"></i></span>

        <div class="info-box-content">
        <span class="info-box-text">New Members</span>
        <span class="info-box-number">2,000</span>
        </div>
        <!-- /.info-box-content -->
        </div>
        <!-- /.info-box -->
        </div>
        <!-- /.col -->
        </div> *@

            @* <br />

        <BlazoredTextEditor @ref="@QuillHtml">
        <ToolbarContent>
        <select class="ql-header">
        <option selected=""></option>
        <option value="1"></option>
        <option value="2"></option>
        <option value="3"></option>
        <option value="4"></option>
        <option value="5"></option>
        </select>
        <span class="ql-formats">
        <button class="ql-bold"></button>
        <button class="ql-italic"></button>
        <button class="ql-underline"></button>
        <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
        <select class="ql-color"></select>
        <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
        <button class="ql-list" value="ordered"></button>
        <button class="ql-list" value="bullet"></button>
        </span>
        <span class="ql-formats">
        <button class="ql-link"></button>
        </span>
        </ToolbarContent>
        <EditorContent>
        <h4>This Toolbar works with HTML</h4>
        <a href="http://BlazorHelpWebsite.com">
        BlazorHelpWebsite.com
        </a>
        </EditorContent>
        </BlazoredTextEditor>
        <br />
        <button class="btn btn-primary"
        @onclick="GetHTML">
        Get HTML
        </button>
        <button class="btn btn-primary"
        @onclick="SetHTML">
        Set HTML
        </button>
        <br />
        <div>
        <br />
        @((MarkupString)QuillHTMLContent)
        @QuillHTMLContent
        </div>
        <br />
        <BlazoredTextEditor @ref="@QuillNative"
        Placeholder="Enter non HTML format like centering...">
        <ToolbarContent>
        <span class="ql-formats">
        <select class="ql-font">
        <option selected=""></option>
        <option value="serif"></option>
        <option value="monospace"></option>
        </select>
        <select class="ql-size">
        <option value="small"></option>
        <option selected=""></option>
        <option value="large"></option>
        <option value="huge"></option>
        </select>
        </span>
        <span class="ql-formats">
        <button class="ql-bold"></button>
        <button class="ql-italic"></button>
        <button class="ql-underline"></button>
        <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
        <select class="ql-color"></select>
        <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
        <button class="ql-list" value="ordered"></button>
        <button class="ql-list" value="bullet"></button>
        <button class="ql-indent" value="-1"></button>
        <button class="ql-indent" value="+1"></button>
        <select class="ql-align">
        <option selected=""></option>
        <option value="center"></option>
        <option value="right"></option>
        <option value="justify"></option>
        </select>
        </span>
        <span class="ql-formats">
        <button class="ql-link"></button>
        </span>
        </ToolbarContent>
        </BlazoredTextEditor>
        <br />
        <button class="btn btn-primary"
        @onclick="GetContent">
        Get Content
        </button>
        <button class="btn btn-primary"
        @onclick="LoadContent">
        Load Content
        </button>
        <button class="btn btn-primary"
        @onclick="InsertImage">
        Insert Image
        </button>
        <button class="btn btn-primary"
        @onclick="InsertText">
        Insert Text
        </button>
        <br />
        <br />
        <div>
        @QuillContent
        </div>
        <br />
        <br />
        <BlazoredTextEditor @ref="@QuillReadOnly"
        ReadOnly="true"
        Theme="bubble"
        DebugLevel="log">
        <ToolbarContent>
        <select class="ql-header">
        <option selected=""></option>
        <option value="1"></option>
        <option value="2"></option>
        <option value="3"></option>
        <option value="4"></option>
        <option value="5"></option>
        </select>
        <span class="ql-formats">
        <button class="ql-bold"></button>
        <button class="ql-italic"></button>
        <button class="ql-underline"></button>
        <button class="ql-strike"></button>
        </span>
        <span class="ql-formats">
        <select class="ql-color"></select>
        <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
        <button class="ql-list" value="ordered"></button>
        <button class="ql-list" value="bullet"></button>
        </span>
        <span class="ql-formats">
        <button class="ql-link"></button>
        </span>
        </ToolbarContent>
        <EditorContent>
        @((MarkupString)@QuillReadOnlyContent)
        </EditorContent>
        </BlazoredTextEditor>
        <br />
        <button class="btn btn-info"
        @onclick="ToggleQuillEditor">
        Toggle Editor
        </button> *@

            @* <DxPieChart Data="@SalesData"
        CustomizeSeriesPoint="CustomizeSeriesPoint"
        T="SaleInfo2">
        <DxPieChartSeries T="SaleInfo2"
        TArgument="string"
        TValue="double"
        ValueField="si => si.Amount"
        ArgumentField="si => si.Region"
        SummaryMethod="Enumerable.Sum"
        Name="Region Sales">
        <DxChartSeriesLabel Visible="showLabels"
        Position="RelativePosition.Inside"
        ValueFormat="ChartElementFormat.Thousands(0)"
        BackgroundColor="Color.Transparent" />
        <DxChartSeriesLegendItem Visible="false" />
        </DxPieChartSeries>
        <DxPieChartSeries T="SaleInfo2"
        TArgument="string"
        TValue="double"
        ValueField="si => si.Amount"
        ArgumentField="si => si.City"
        SummaryMethod="Enumerable.Sum"
        Name="City Sales">
        <DxChartSeriesLabel Visible="showLabels"
        Position="RelativePosition.Inside"
        ValueFormat="ChartElementFormat.Thousands(0)"
        BackgroundColor="Color.Transparent" />
        </DxPieChartSeries>
        <DxChartTooltip Enabled="true"
        Position="RelativePosition.Outside">
        <div style="margin: 0.75rem">
        <div class="fw-bold">@context.Point.Argument</div>
        <div>Sales: @($"${context.Point.Value:#,0.}")</div>
        </div>
        </DxChartTooltip>
        <DxChartTitle Text="Top Sales Worldwide">
        <DxChartSubTitle Text="USD" />
        </DxChartTitle>
        <DxChartLegend HorizontalAlignment="HorizontalAlignment.Center"
        VerticalAlignment="VerticalEdge.Bottom"
        Position="RelativePosition.Outside"
        Orientation="Orientation.Horizontal" />
        </DxPieChart>

        <DxChart Data="@SalesData2">
        <DxChartBubbleSeries Name="United States"
        Filter="@((SaleInfo s) => s.Country == "United States")"
        ArgumentField="@(s => s.Date.DayOfWeek.ToString())"
        ValueField="@(s => s.Date.Year)"
        SizeField="@(s => s.Amount)"
        Color="@(Color.FromArgb(208, 208, 208))"
        SummaryMethod="Enumerable.Max" />
        <DxChartBubbleSeries Name="Canada"
        Filter="@((SaleInfo s) => s.Country == "Canada")"
        ArgumentField="@(s => s.Date.DayOfWeek.ToString())"
        ValueField="@(s => s.Date.Year)"
        SizeField="@(s => s.Amount)"
        Color="@(Color.FromArgb(252, 58, 48))"
        SummaryMethod="Enumerable.Max" />
        <DxChartLegend Position="RelativePosition.Outside" HorizontalAlignment="HorizontalAlignment.Right" />
        </DxChart> *@
        </div>
    </div>

    <!-- Main content -->
    <section class="content">
        <div class="container-fluid">
            <!-- Small boxes (Stat box) -->
            <div class="row">

                <div class="col-md-3 col-12">
                    <!-- small box -->
                    <div class="small-box bg-info">
                        <div class="inner">
                            <h3>@Dashboard.UserCount</h3>

                            <p>Users</p>
                        </div>
                        <div class="icon">
                            <i class="fa-solid fa-users"></i>
                        </div>
                        <a href="config/users" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
                    </div>
                </div>

                @*     <div class="col-md-3 col-6">
            <!-- small box -->
            <div class="small-box bg-info">
            <div class="inner">
            <h3>@Dashboard.EmployeeCount</h3>

            <p>Employees</p>
            </div>
            <div class="icon">
            <i class="fa-solid fa-user-tie"></i>
            </div>
            <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
            </div>
            </div>

            <!-- ./col -->
            <div class="col-md-3 col-6">
            <!-- small box -->
            <div class="small-box bg-success">
            <div class="inner">
            <h3>@Dashboard.PhysicianCount</h3>

            <p>Phisicians</p>
            </div>
            <div class="icon">
            <i class="fa-solid fa-user-doctor"></i>
            </div>
            <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
            </div>
            </div>
            <!-- ./col -->
            <div class="col-md-3 col-6">
            <!-- small box -->
            <div class="small-box bg-success">
            <div class="inner">
            <h3>@Dashboard.NurseCount</h3>

            <p>Nurses</p>
            </div>
            <div class="icon">
            <i class="fa-solid fa-user-nurse"></i>
            </div>
            <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
            </div>
            </div>
            <!-- ./col -->
            <div class="col-md-3 col-6">
            <!-- small box -->
            <div class="small-box bg-warning">
            <div class="inner">
            <h3>@Dashboard.PatientCount</h3>

            <p>Patients</p>
            </div>
            <div class="icon">
            <i class="fa-solid fa-user"></i>
            </div>
            <a href="#" class="small-box-footer">More info <i class="fas fa-arrow-circle-right"></i></a>
            </div>
            </div> *@
                <!-- ./col -->
            </div>
            <!-- /.row -->
        </div><!-- /.container-fluid -->
    </section>
    <!-- /.content -->
}
else
{
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="loading-panel-container">
                        <DxLoadingPanel IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                        CssClass="loading-panel"
                                        IndicatorVisible="true"
                                        IndicatorAreaVisible="true"
                                        Visible="true"
                                        Text="Processing..."
                                        TextAlignment="LoadingPanelTextAlignment.Right">
                            <div style="min-height: 50px;"></div>
                        </DxLoadingPanel>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
@* <div class="card">
    <div class="card-body">
        <div class="container">
            <div class="row">
                <div class="col">
                    <button type="button" class="btn btn-primary">Primary</button>
                    <button type="button" class="btn btn-primary">Primary</button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-primary" disabled>Primary</button>
                    <button type="button" class="btn btn-primary" disabled>Primary</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
  <div class="progress">
    <div class="progress-bar" role="progressbar" style="width: 33%;" aria-valuenow="33" aria-valuemin="0" aria-valuemax="100">Step 1</div>
    <div class="progress-bar" role="progressbar" style="width: 33%;" aria-valuenow="66" aria-valuemin="0" aria-valuemax="100">Step 2</div>
    <div class="progress-bar" role="progressbar" style="width: 34%;" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">Step 3</div>
  </div> *@

@*   <div class="step step1 active">
    <h2>Step 1 Content</h2>
    <button class="btn btn-primary" onclick="nextStep(1)">Next</button>
  </div>

  <div class="step step2">
    <h2>Step 2 Content</h2>
    <button class="btn btn-primary" onclick="nextStep(2)">Next</button>
    <button class="btn btn-secondary" onclick="prevStep(2)">Previous</button>
  </div>

  <div class="step step3">
    <h2>Step 3 Content</h2>
    <button class="btn btn-success" onclick="finish()">Finish</button>
    <button class="btn btn-secondary" onclick="prevStep(3)">Previous</button>
  </div>
</div> *@

@* <div class="card">
    <div class="col-md-6">
    <button type="button" class="btn btn-lg btn-primary">Draft</button>
    <button type="button" class="btn btn-lg btn">Done</button>
    </div>
    <div class="col-md-6">
    </div>
    </div> *@

@* @code {
    DateTime SelectedDate { get; set; } = DateTime.Now;
    } *@

@* <style>
    .rounded {
        border-radius: 8px;
    }

    .colored-border {
        border: 4px solid red !important;
    }
</style>

<h1>Blazored.TextEditor Usage Examples</h1>

<h3>Basic Example</h3>
<BlazoredTextEditor @ref="@richEditor">
    <ToolbarContent>
        @((MarkupString)toolbar)
    </ToolbarContent>
    <EditorContent>
        @((MarkupString)body)
    </EditorContent>
</BlazoredTextEditor>
<br />
<br />

<h3>Show the Toolbar Below the Editor</h3>
<BlazoredTextEditor BottomToolbar="true"
                    @ref="@richEditor">
    <ToolbarContent>
        @((MarkupString)toolbar)
    </ToolbarContent>
    <EditorContent>
        @((MarkupString)body)
    </EditorContent>
</BlazoredTextEditor>
<br />
<br />

<h3>Styled Toolbar</h3>
<BlazoredTextEditor @ref="@richEditor"
                    ToolbarCSSClass="rounded colored-border"
                    ToolbarCssStyle="background: lightpink">
    <ToolbarContent>
        @((MarkupString)toolbar)
    </ToolbarContent>
    <EditorContent>
        @((MarkupString)body)
    </EditorContent>
</BlazoredTextEditor>
<br />
<br />

<h3>Styled Editor</h3>
<BlazoredTextEditor EditorCSSClass="rounded colored-border"
                    EditorCssStyle="padding: 10px; background: lightpink"
                    @ref="@richEditor">
    <ToolbarContent>
        @((MarkupString)toolbar)
    </ToolbarContent>
    <EditorContent>
        @((MarkupString)body)
    </EditorContent>
</BlazoredTextEditor> *@

@code {
    IEnumerable<SaleInfo> SalesData2;
    BlazoredTextEditor richEditor = default!;
    string toolbar = """"...markup here..."""";
    string body = """"...markup here..."""";

    protected override void OnInitialized()
    {
        toolbar = """"
            <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
            """";

        body = """"
            <h4>This Toolbar works with HTML</h4>
            <a href="https://BlazorHelpWebsite.com">BlazorHelpWebsite.com</a>
            """";
    }
    List<SaleInfo2> SalesData = new List<SaleInfo2>
{
    new SaleInfo2
    {
        Amount = 1000,
        City = "Asia",
        Country = "Asia",
        Date = DateTime.Now,
        OrderId = 1,
        Region = "Asia"
    },
    new SaleInfo2
    {
        Amount = 1500,
        City = "New York",
        Country = "North America",
        Date = DateTime.Now.AddDays(-5),
        OrderId = 2,
        Region = "North America"
    },
    new SaleInfo2
    {
        Amount = 800,
        City = "Rio de Janeiro",
        Country = "South America",
        Date = DateTime.Now.AddDays(-10),
        OrderId = 3,
        Region = "South America"
    },
    new SaleInfo2
    {
        Amount = 1200,
        City = "London",
        Country = "Europe",
        Date = DateTime.Now.AddDays(-15),
        OrderId = 4,
        Region = "Europe"
    },
               new SaleInfo2
    {
        Amount = 2000,
        City = "Beijing",
        Country = "Asia",
        Date = DateTime.Now.AddDays(-20),
        OrderId = 5,
        Region = "Asia"
    },
    new SaleInfo2
    {
        Amount = 1700,
        City = "Vancouver",
        Country = "North America",
        Date = DateTime.Now.AddDays(-25),
        OrderId = 6,
        Region = "North America"
    },
    new SaleInfo2
    {
        Amount = 900,
        City = "Berlin",
        Country = "Europe",
        Date = DateTime.Now.AddDays(-30),
        OrderId = 7,
        Region = "Europe"
    },
    new SaleInfo2
    {
        Amount = 1100,
        City = "Seoul",
        Country = "Asia",
        Date = DateTime.Now.AddDays(-35),
        OrderId = 8,
        Region = "Asia"
    }
    // Add more SaleInfo items as needed
};

    bool showLabels = true;
    Dictionary<object, Color> palette = new() {
        { "North America", Color.FromArgb(0, 123, 255) },
        { "South America", Color.FromArgb(40, 167, 69) },
        { "Europe", Color.FromArgb(220, 53, 69) },
        { "Asia", Color.FromArgb(23, 162, 184) },
        { "New York", Color.FromArgb(0, 111, 230) },
        { "Los Angeles", Color.FromArgb(0, 117, 242) },
        { "Denver", Color.FromArgb(0, 123, 255) },
        { "Vancouver", Color.FromArgb(76, 163, 255) },
        { "Edmonton", Color.FromArgb(153, 202, 255) },
        { "Rio de Janeiro", Color.FromArgb(36, 150, 62) },
        { "Buenos Aires", Color.FromArgb(40, 167, 69) },
        { "Asuncion", Color.FromArgb(148, 229, 166) },
        { "London", Color.FromArgb(209, 36, 53) },
        { "Berlin", Color.FromArgb(219, 45, 62) },
        { "Madrid", Color.FromArgb(227, 91, 104) },
        { "Moscow", Color.FromArgb(240, 168, 175) },
        { "Beijing", Color.FromArgb(21, 146, 166) },
        { "Tokyo", Color.FromArgb(23, 162, 184) },
        { "Seoul", Color.FromArgb(137, 226, 240) }
    };
    void CustomizeSeriesPoint(ChartSeriesPointCustomizationSettings settings)
    {
        settings.PointAppearance.Color = palette[settings.Point.Argument];
    }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    private string Greeting = "";

    private class DashboardTemp
    {
        public int UserCount { get; set; }
        public int PatientCount { get; set; }
        public int PhysicianCount { get; set; }
        public int NurseCount { get; set; }
        public int EmployeeCount { get; set; }
    }

    private DashboardTemp Dashboard { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // var aa = await AuthenticationState;
        // var bb = aa.User.Identity.Name;
        // SalesData2 = await Sales.GetSalesAsync();

        var hour = DateTime.Now.Hour;

        if (hour < 12)
            Greeting = "Good Morning!";
        else if (hour < 17)
            Greeting = "Good Afternoon!";
        else
            Greeting = "Good Evening!";

        var users = await Mediator.Send(new GetUserQuery());
        // Dashboard.UserCount = users.Where(x => x.IsUser == true).Count();
        Dashboard.UserCount = users.Count();
        Dashboard.PatientCount = users.Where(x => x.IsUser == true).Count();
        Dashboard.PhysicianCount = users.Where(x => x.IsPhysicion == true).Count();
        Dashboard.NurseCount = users.Where(x => x.IsNurse == true).Count();
        Dashboard.EmployeeCount = users.Where(x => x.IsEmployee == true).Count();

        await GetUserInfo();

        // try
        // {
        //     var result = await NavigationManager.CheckAccessUser(oLocal);
        //     IsAccess = result.Item1;
        //     UserAccessCRUID = result.Item2;
        // }
        // catch { }
    }

    #region UserLoginAndAccessRole

    [Inject]
    public UserInfoService UserInfoService { get; set; }

    private GroupMenuDto UserAccessCRUID = new();
    private User UserLogin { get; set; } = new();
    private bool IsAccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                await GetUserInfo();
            }
            catch { }
        }
    }

    private async Task GetUserInfo()
    {
        try
        {
            var user = await UserInfoService.GetUserInfo();
            IsAccess = user.Item1;
            UserAccessCRUID = user.Item2;
            UserLogin = user.Item3;

            var a = (CustomAuthenticationStateProvider)CustomAuth;
            string serialize = JsonConvert.SerializeObject(user.Item3);
            var encrypt = Helper.Encrypt(serialize);
            await a.UpdateAuthState(encrypt);
        }
        catch { }
    }

    #endregion UserLoginAndAccessRole

    BlazoredTextEditor QuillHtml;
    BlazoredTextEditor QuillNative;
    BlazoredTextEditor QuillReadOnly;

    string QuillHTMLContent;
    string QuillContent;
    string QuillReadOnlyContent =
        @"<span><b>Read Only</b> <u>Content</u></span>";

    bool mode = false;

    public async void GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }

    public async void SetHTML()
    {
        string QuillContent =
            @"<a href='http://BlazorHelpWebsite.com/'>" +
            "<img src='images/BlazorHelpWebsite.gif' /></a>";

        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }

    public async void GetContent()
    {
        QuillContent = await this.QuillNative.GetContent();
        StateHasChanged();
    }
    public async void LoadContent()
    {
        await this.QuillNative.LoadContent(QuillContent);
        StateHasChanged();
    }

    public async void InsertImage()
    {
        await this.QuillNative.InsertImage(@"D:\Pictures\wp4586807-aesthetic-anime-wallpapers.jpg");
        StateHasChanged();
    }

    public async void InsertText()
    {
        await this.QuillNative.InsertText("Some Text");
        StateHasChanged();
    }

    async Task ToggleQuillEditor()
    {
        mode = (mode) ? false : true;
        await this.QuillReadOnly.EnableEditor(mode);
    }

    public class SaleInfo2
    {
        public long OrderId { get; set; }
        public string Region { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public long Amount { get; set; }
        public DateTime Date { get; set; }
    }
    public class SaleInfo
    {
        public long OrderId { get; set; }
        public string Region { get; set; }
        public string Country { get; set; }
        public string City { get; set; }
        public long Amount { get; set; }
        public DateTime Date { get; set; }
    }

    private async Task Test()
    {
        try
        {
            var aa = await Mediator.Send(new GetCountryQuery());
            var z = aa[1000];
        }
        catch (Exception e)
        {
            throw new Exception(e.Message, e);
        }

    }

    private async Task Test2()
    {
        try
        {
            var aa = await Mediator.Send(new GetCountryQuery());
            var z = aa[1000];
        }
        catch (Exception e)
        {
            e.HandleException(ToastService);
        }

    }

    public class Sales
    {
        static IList<SaleInfo> dataSource;
        static Sales()
        {
            CreateDataSource();
        }

        public static Task<IQueryable<SaleInfo>> GetSalesAsync()
        {
            return Task.FromResult(dataSource.AsQueryable());
        }

        static void CreateDataSource()
        {
            dataSource = new List<SaleInfo> {
        new SaleInfo {
                OrderId = 10248,
                Region = "North America",
                Country = "United States",
                City = "New York",
                Amount = 1740,
                Date = DateTime.Parse("2017/01/06")
            },
            new SaleInfo {
                OrderId = 10249,
                Region = "North America",
                Country = "United States",
                City = "Los Angeles",
                Amount = 850,
                Date = DateTime.Parse("2017/01/13")
            },
            new SaleInfo {
                OrderId = 10250,
                Region = "North America",
                Country = "United States",
                City = "Denver",
                Amount = 2235,
                Date = DateTime.Parse("2017/01/07")
            },
            new SaleInfo {
                OrderId = 10251,
                Region = "North America",
                Country = "Canada",
                City = "Vancouver",
                Amount = 1965,
                Date = DateTime.Parse("2017/01/03")
            },
            new SaleInfo {
                OrderId = 10252,
                Region = "North America",
                Country = "Canada",
                City = "Edmonton",
                Amount = 880,
                Date = DateTime.Parse("2017/01/10")
            },
            new SaleInfo {
                OrderId = 10253,
                Region = "South America",
                Country = "Brazil",
                City = "Rio de Janeiro",
                Amount = 5260,
                Date = DateTime.Parse("2017/01/17")
            },
            new SaleInfo {
                OrderId = 10254,
                Region = "South America",
                Country = "Argentina",
                City = "Buenos Aires",
                Amount = 2790,
                Date = DateTime.Parse("2017/01/21")
            },
            new SaleInfo {
                OrderId = 10255,
                Region = "South America",
                Country = "Paraguay",
                City = "Asuncion",
                Amount = 3140,
                Date = DateTime.Parse("2017/01/01")
            },
            new SaleInfo {
                OrderId = 10256,
                Region = "Europe",
                Country = "United Kingdom",
                City = "London",
                Amount = 6175,
                Date = DateTime.Parse("2017/01/24")
            },
            new SaleInfo {
                OrderId = 10257,
                Region = "Europe",
                Country = "Germany",
                City = "Berlin",
                Amount = 4575,
                Date = DateTime.Parse("2017/01/11")
            },
            // ...
    };
        }
    }
}