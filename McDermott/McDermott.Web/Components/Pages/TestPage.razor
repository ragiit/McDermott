@page "/test"
@using DevExpress.Data.Linq
@using System.Linq.Expressions
@inject ITestDataVillageService Taa

@* <style>
    .grid-container {
        width: 950px;
    }

    .pager-container {
        display: flex;
        justify-content: space-between;
        padding: 8px;
        border: 1px solid #d2d2d2;
        border-top: none;
    }
</style> *@

<div class="content layout-fixed">
    <DxLoadingPanel @bind-Visible="PanelVisible"
                    IsContentBlocked="true"
                    ApplyBackgroundShading="true"
                    IndicatorAreaVisible="true"
                    Text="Fetching Data...">
        <DxGrid @ref="Grid"
                Data="Villages"
                @bind-PageIndex="@ActivePageIndex"
                PagerPosition="GridPagerPosition.TopAndBottom"
                ShowSearchBox="true"   
                SearchTextChanged="OnSearchBoxChanged" 
                PagerVisible="true"
                PageSize="@PageSize" 
                PageSizeSelectorVisible="false"
                PageSizeChanged="OnPageSizeIndexChanged"
                PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })" >
            <Columns>
                <DxGridSelectionColumn Width=" 15px" />
                <DxGridDataColumn MinWidth="200" FieldName="Name" SortIndex="0" />
                <DxGridDataColumn MinWidth="200" FieldName="PostalCode" SortIndex="0" />
                <DxGridDataColumn MinWidth="200" FieldName="Province.Name" Caption="Province" />
                <DxGridDataColumn MinWidth="200" FieldName="City.Name" Caption="City" />
                <DxGridDataColumn MinWidth="200" FieldName="District.Name" Caption="District" />
            </Columns>
          @*   <TotalSummary>
                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                   FieldName="Name"
                                   Visible="false" />
            </TotalSummary> *@
        </DxGrid>
        <DxPager PageCount="totalCount" CssClass="mt-1"
                     ActivePageIndexChanged="OnPageIndexChanged"
                     ActivePageIndex="ActivePageIndex"
                     VisibleNumericButtonCount="7"
                     NavigationMode="PagerNavigationMode.NumericButtons">
            </DxPager> 
    </DxLoadingPanel>
</div>

@* <div class="grid-container">
    <DxGrid @ref="Grid"
            Data="Villages"
            @bind-PageIndex="@ActivePageIndex"
            PagerVisible="false"
            PageSize="@PageSize"
            FooterDisplayMode="GridFooterDisplayMode.Never">
        <Columns>
            <DxGridDataColumn FieldName="ContactName" />
            <DxGridDataColumn FieldName="CompanyName" />
            <DxGridDataColumn FieldName="Country" />
            <DxGridDataColumn FieldName="City" />
        </Columns>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                               FieldName="@RowCountField"
                               Visible="false" />
        </TotalSummary>
    </DxGrid>
    <div class="pager-container">
        <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" />
        <div>
            Total: @TotalRecords records
        </div>
    </div>
</div> *@


@code {
    int PageCount { get; set; }
    int TotalRecords { get; set; }
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 20;
    string RowCountField { get; set; } = "Country";

    private bool IsLoading { get; set; } = false;
    private bool PanelVisible { get; set; } = false;
    private List<VillageDto> Villages = [];
    private List<ProvinceDto> Provinces = [];
    private List<DistrictDto> Districts = [];
    private List<CountryDto> Countrys = [];
    private List<CityDto> Cities = [];
    private int FocusedRowVisibleIndex { get; set; }

    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];
    public IGrid Grid { get; set; }

    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
    }
    private async Task ExportToExcel()
    {
        await Helper.GenerateColumnImportTemplateExcelFileAsync(JsRuntime, FileExportService, "village_template.xlsx",
        [
            new()
                {
                    Column = "Province",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "City",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "District",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "Name",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "Postal Code"
                },
    ]);
    }

    private async Task ImportFile()
    {
        await JsRuntime.InvokeVoidAsync("clickInputFile", "fileInput");
    }
    private async Task NewItem_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    private async Task Refresh_Click()
    {
        await LoadData();
    }

    private async Task EditItem_Click()
    {
        await Grid.StartEditRowAsync(FocusedRowVisibleIndex);
    }

    private void DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

    private async Task OnDelete(GridDataItemDeletingEventArgs e)
    {
        try
        {
            var aq = SelectedDataItems.Count;
            if (SelectedDataItems is null)
            {
                await Mediator.Send(new DeleteVillageRequest(((VillageDto)e.DataItem).Id));
            }
            else
            {
                var a = SelectedDataItems.Adapt<List<VillageDto>>();
                await Mediator.Send(new DeleteDistrictRequest(ids: a.Select(x => x.Id).ToList()));
            }
            await LoadData();
        }
        catch (Exception ee)
        {
            ee.HandleException(ToastService);
        }
    }

    private async Task OnSave(GridEditModelSavingEventArgs e)
    {
        PanelVisible = true;

        var editModel = (VillageDto)e.EditModel;

        if (editModel.Id == 0)
            await Mediator.Send(new CreateVillageRequest(editModel));
        else
            await Mediator.Send(new UpdateVillageRequest(editModel));

        await LoadData();
    }

    private object Data { get; set; }
    private EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    private async Task LoadData()
    {
        PanelVisible = true;
        // Villages = await Mediator.Send(new GetVillageQuery());

        // InstantFeedbackSource = new EntityInstantFeedbackSource(e =>
        // {
        //     e.KeyExpression = "Id";
        //     e.QueryableSource = Villages.AsQueryable();
        // });

        // var dataSource = new GridDevExtremeDataSource<VillageDto>(Villages.AsQueryable());
        // dataSource.CustomizeLoadOptions = (loadOptions) =>
        // {
        //     // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
        //     // This can make SQL execution plans more efficient.
        //     loadOptions.PrimaryKey = new[] { "Id" };
        //     loadOptions.PaginateViaPrimaryKey = true;
        // };

        // Data = dataSource;

        SelectedDataItems = [];
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Grid.WaitForDataLoadAsync();
            Grid.ExpandGroupRow(1);
            await Grid.WaitForDataLoadAsync();
            Grid.ExpandGroupRow(2);
        }
    }
    public void Dispose()
    {
        InstantFeedbackSource?.Dispose();
    }

    private string searchTerm = string.Empty;
    private int totalCount;

    private Expression<Func<Village, bool>> BuildSearchPredicate()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return village => true; // No filter if search term is empty

        return village => village.Name.Contains(searchTerm);
    }

    ITestDataVillageService _testDataVillageService { get; set; }

    private async Task OnSearchBoxChanged(string x)
    {
        ToastService.ShowInfo(x);
        searchTerm = x;
        var query = new GetPagedDataQuery
            {
                PageNumber = 0,
                PageSize = 20,
                Predicate = BuildSearchPredicate()
            }; 
        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
        Villages = result.Data;
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnPageSizeIndexChanged(int newPageIndex)
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = ActivePageIndex,
                PageSize = newPageIndex,
                Predicate = BuildSearchPredicate()
            };
        PageSize = newPageIndex;
        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
        Villages = result.Data;
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnPageIndexChanged(int newPageIndex)
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = newPageIndex + 1,
                PageSize = PageSize,
                Predicate = BuildSearchPredicate()
            };
        ActivePageIndex = query.PageNumber == 0 ? 0 : query.PageNumber - 1;
        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
        Villages = result.Data;
        await InvokeAsync(StateHasChanged);
    }

    private int pageNumber = 1;
    TestDataVillageService _testDataVillageServicezz { get; set; }
    private int pageSize = 50;
    protected override async Task OnInitializedAsync()
    {
        // var dataSource = new GridDevExtremeDataSource<Village>(Taa.GetVillages());

        // dataSource.CustomizeLoadOptions = (loadOptions) =>
        // {
        //     If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
        //     This can make SQL execution plans more efficient.
        //     loadOptions.PrimaryKey = new[] { "Id" };
        //     loadOptions.PaginateViaPrimaryKey = true;
        // };
        // Data = dataSource;

        // var aa = Data;

        // Refer to https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.components.owningcomponentbase

        // IsLoading = true;

        // InstantFeedbackSource = new EntityInstantFeedbackSource(e =>
        // {
        //     e.KeyExpression = "Id";
        //     e.QueryableSource = result;
        // });

        // IsLoading = false;
        // return;

        var query = new GetPagedDataQuery
            {
                PageNumber = 1,
                PageSize = 20

            };

        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 20); 
        Villages = result.Data;
        // Countrys = await Mediator.Send(new GetCountryQuery());
        // Provinces = await Mediator.Send(new GetProvinceQuery());
        // Districts = await Mediator.Send(new GetDistrictQuery());
        // Cities = await Mediator.Send(new GetCityQuery());
        await LoadData();
        IsLoading = false;
    }
}