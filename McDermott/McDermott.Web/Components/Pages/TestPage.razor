@page "/test"
@using DevExpress.Data.Linq
@using System.Linq.Expressions
@using DevExtreme.AspNet.Data.ResponseModel
@using System.Text.Json
@inject ITestDataVillageService Taa
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient Http

@* <style>
    .grid-container {
        width: 950px;
    }

    .pager-container {
        display: flex;
        justify-content: space-between;
        padding: 8px;
        border: 1px solid #d2d2d2;
        border-top: none;
    }
</style> *@

<div class="wrapper">

    <BaseHeaderPage Title="Village" ShowBackButton="false" />

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="card">
                        <DxLoadingPanel @bind-Visible="PanelVisible"
                                        IsContentBlocked="true"
                                        ApplyBackgroundShading="true"
                                        IndicatorAreaVisible="true"
                                        Text="Fetching Data...">
                            <MyGridPaginate @ref="Grid"
                                            Data="Villages"
                                            @bind-SelectedDataItems="@SelectedDataItems"
                                            @bind-PageIndex="@ActivePageIndex"
                                            SearchTextChanged="OnSearchBoxChanged"
                                            PageSize="@PageSize"
                                            PageSizeChanged="OnPageSizeIndexChanged">

                                <ToolbarTemplate>
                                    <MyDxToolbarBase TItem="VillageDto"
                                                     Items="@Villages"
                                                     SelectedDataItems="@SelectedDataItems"
                                                     NewItem_Click="@NewItem_Click"
                                                     EditItem_Click="@EditItem_Click"
                                                     DeleteItem_Click="@DeleteItem_Click"
                                                     Refresh_Click="@Refresh_Click"
                                                     IsImport="true"
                                                     Grid="Grid"
                                                     ImportFile="ImportFile"
                                                     ExportToExcel="ExportToExcel"
                                                     VisibleNew="true"
                                                     VisibleEdit="true"
                                                     VisibleDelete="true" />
                                </ToolbarTemplate>

                                <Columns>
                                    <DxGridSelectionColumn Width=" 15px" />
                                    <DxGridDataColumn MinWidth="200" FieldName="Name" SortIndex="0" />
                                    <DxGridDataColumn MinWidth="200" FieldName="PostalCode" SortIndex="0" />
                                    <DxGridDataColumn MinWidth="200" FieldName="Province.Name" Caption="Province" />
                                    <DxGridDataColumn MinWidth="200" FieldName="City.Name" Caption="City" />
                                    <DxGridDataColumn MinWidth="200" FieldName="District.Name" Caption="District" />
                                </Columns>

                                <TotalSummary>
                                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                       FieldName="Name"
                                                       Visible="true" />
                                </TotalSummary>
                            </MyGridPaginate>

                            <div class="row">
                                <DxFormLayout>
                                    <div class="col-md-9">
                                        <DxFormLayoutItem>
                                            <DxPager PageCount="totalCount"
                                                     ActivePageIndexChanged="OnPageIndexChanged" 
                                                     VisibleNumericButtonCount="10"
                                                     SizeMode="SizeMode.Medium"
                                                     NavigationMode="PagerNavigationMode.Auto">
                                            </DxPager>
                                        </DxFormLayoutItem>
                                    </div>
                                    <div class="col-md-3 d-flex justify-content-end">
                                        <DxFormLayoutItem Caption="Page Size:">
                                            <MyDxComboBox Data="@PageSizess"
                                                          SizeMode="SizeMode.Medium"
                                                          NullText="Ganjar..."
                                                          SelectedItemChanged="((int e) => OnPageSizeIndexChanged(e))"
                                                          @bind-Value="PageSize">
                                            </MyDxComboBox>
                                        </DxFormLayoutItem>
                                    </div>
                                </DxFormLayout>
                            </div>
                        </DxLoadingPanel>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="card">
                        <DxLoadingPanel @bind-Visible="PanelVisible"
                                        IsContentBlocked="true"
                                        ApplyBackgroundShading="true"
                                        IndicatorAreaVisible="true"
                                        Text="Fetching Data...">
                            <MyGrid @ref="Grid"
                                    @bind-SelectedDataItems="@SelectedDataItems"
                                    Data="Es" 
                                    FocusedRowChanged="Grid_FocusedRowChanged"
                                    KeyFieldName="id"> 
                                <Columns>
                                    <DxGridSelectionColumn Width="15px" />
                                    <DxGridDataColumn MinWidth="200" FieldName="id" SortIndex="0" />
                                    <DxGridDataColumn MinWidth="200" FieldName="name" SortIndex="0" /> 

                                </Columns> 
                            </MyGrid>
                             
                        </DxLoadingPanel>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<div class="wrapper">
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    @*  <DxComboBox Data="@VillagesCB"
                    NullText="Select Village..."
                    @bind-Value="@CityId"
                    AllowUserInput="true"
                    TextFieldName="Name"
                    TextChanged="@OnTextChanged"
                    ValueFieldName="Id">
                    </DxComboBox> *@

                    <DxComboBox @bind-Value="selectedValue" DataAsync="LoadDataAsync" TextFieldName="Name" ValueFieldName="Id">
                    </DxComboBox>
                    <DxComboBox @bind-Value="selectedValue"
                                DataAsync="LoadDataAsync"
                                TextFieldName="Name"
                                ValueFieldName="Id"
                                AllowUserInput="true"
                                FilteringMode="DataGridFilteringMode.Contains">
                    </DxComboBox>
                    @*  <Virtualize ItemsProvider="GetItems" ItemSize="50">

                    <div>
                    <span>@((context as TempClass).Name)</span>
                    </div>

                    </Virtualize> *@

                </div>
            </div>
        </div>
    </section>
</div>

<div class="content layout-fixed">
</div>

@* <div class="grid-container">
    <DxGrid @ref="Grid"
            Data="Villages"
            @bind-PageIndex="@ActivePageIndex"
            PagerVisible="false"
            PageSize="@PageSize"
            FooterDisplayMode="GridFooterDisplayMode.Never">
        <Columns>
            <DxGridDataColumn FieldName="ContactName" />
            <DxGridDataColumn FieldName="CompanyName" />
            <DxGridDataColumn FieldName="Country" />
            <DxGridDataColumn FieldName="City" />
        </Columns>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                               FieldName="@RowCountField"
                               Visible="false" />
        </TotalSummary>
    </DxGrid>
    <div class="pager-container">
        <DxPager PageCount="@PageCount" @bind-ActivePageIndex="@ActivePageIndex" />
        <div>
            Total: @TotalRecords records
        </div>
    </div>
</div> *@


@code {

    private async Task<IEnumerable<TempClass>> LoadDataAsync(CancellationToken cancellationToken)
    {
        // Fetch data based on current page and page size
        var response = await Task.Run(() => GetData(currentPage, PageSize), cancellationToken);
        return response;
    }

    // Optional: Method to load more data if needed
    private async Task LoadMoreDataAsync()
    {
        currentPage++;
        var newData = await LoadDataAsync(CancellationToken.None);
        data.AddRange(newData);
        StateHasChanged(); // Trigger UI update
    }

    public class TempClass
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public List<TempClass> GetData(int pageIndex, int pageSize)
    {
        ToastService.ShowInfo(pageIndex.ToString());
        ToastService.ShowInfo(pageSize.ToString());
        var data = new List<TempClass>();
        var startId = pageIndex * pageSize;

        for (int i = startId; i < startId + pageSize; i++)
        {
            data.Add(new TempClass
                {
                    Id = i,
                    Name = $"Item {i} - Random Value: {random.Next(1, 1000)}"
                });
        }

        return data;
    }


    private async ValueTask<ItemsProviderResult<TempClass>> GetItems(ItemsProviderRequest request)
    {
        // Calculate the current page and fetch data
        var page = request.StartIndex / PageSize;
        var data = await LoadDataAsync(page);

        // Return data and total count
        return new ItemsProviderResult<TempClass>(data, 1000); // Adjust total count as needed
    }

    private async Task<List<TempClass>> LoadDataAsync(int pageIndex)
    {
        return Enumerable.Range(pageIndex * PageSize, PageSize)
                         .Select(i => new TempClass { Id = i, Name = $"Item {i}" })
                         .ToList();
    }

    private static Random random = new Random();

    // public List<TempClass> GetData(int pageIndex, int pageSize)
    // {
    //     ToastService.ShowInfo(pageIndex.ToString());
    //     ToastService.ShowInfo(pageSize.ToString());
    //     var data = new List<TempClass>();
    //     var startId = pageIndex * pageSize;

    //     for (int i = startId; i < startId + pageSize; i++)
    //     {
    //         data.Add(new TempClass
    //             {
    //                 Id = i,
    //                 Name = $"Item {i} - Random Value: {random.Next(1, 1000)}"
    //             });
    //     }

    //     return data;
    // }


    private int selectedValue;
    private int currentPage = 0;
    private List<TempClass> data = new List<TempClass>();

    // private async Task<IEnumerable<TempClass>> LoadDataAsync(CancellationToken cancellationToken)
    // {
    //     var response = await Task.Run(() => GetData(currentPage, PageSize), cancellationToken);
    //     return response;
    // }

    // // Optional: Function to load more data if needed
    // private async Task LoadMoreDataAsync()
    // {
    //     currentPage++;
    //     var newData = await LoadDataAsync(CancellationToken.None);
    //     data.AddRange(newData);
    //     StateHasChanged(); // Trigger UI update
    // }

    private async Task OnTextChangedAA(VillageDto newText)
    {
        ToastService.ShowInfo(newText.Name)
    ;
    }
    private async Task OnTextChanged(string newText)
    {
        if (string.IsNullOrEmpty(newText))
        {
            await hehe(); // Load initial data if search is cleared
        }
        else
        {
            await hehe2(newText);
        }
        ToastService.ShowInfo(newText);
    }
    private List<VillageDto> VillagesCB = [];
    private async Task hehe()
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = 1,
                PageSize = 20
            };

        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
        VillagesCB = result.Data;
        PanelVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task hehe2(string aa)
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = 1,
                PageSize = 100,
                Predicate = BuildSearchPredicate2(aa)
            };

        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / 100);
        VillagesCB.Clear();
        VillagesCB = result.Data;
        PanelVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<LoadResult> LoadCitiesAsync(DevExtreme.AspNet.Data.DataSourceLoadOptionsBase loadOptions, CancellationToken cancellationToken)
    {
        // Example of how to handle paging and filtering based on loadOptions
        var pageNumber = loadOptions.Skip / loadOptions.Take + 1;
        var pageSize = loadOptions.Take;

        ToastService.ShowInfo(pageNumber.ToString());
        ToastService.ShowInfo(pageSize.ToString());

        return new LoadResult
            {
                data = Cities,
                totalCount = totalCount
            };
    }


    int PageCount { get; set; }
    int TotalRecords { get; set; }
    int PageSize { get; set; } = 20;
    int ActivePageIndex { get; set; } = 0;
    string RowCountField { get; set; } = "Country";

    private bool IsLoading { get; set; } = false;
    private bool PanelVisible { get; set; } = false;
    private List<VillageDto> Villages = [];
    private List<ProvinceDto> Provinces = [];
    private List<DistrictDto> Districts = [];
    private List<CountryDto> Countrys = [];
    private int FocusedRowVisibleIndex { get; set; }

    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];
    public IGrid Grid { get; set; }

    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
    }
    private async Task ExportToExcel()
    {
        await Helper.GenerateColumnImportTemplateExcelFileAsync(JsRuntime, FileExportService, "village_template.xlsx",
        [
            new()
                {
                    Column = "Province",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "City",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "District",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "Name",
                    Notes = "Mandatory"
                },
    new()
                {
                    Column = "Postal Code"
                },
    ]);
    }

    private async Task ImportFile()
    {
        await JsRuntime.InvokeVoidAsync("clickInputFile", "fileInput");
    }
    private async Task NewItem_Click()
    {
        await Grid.StartEditNewRowAsync();
    }

    private async Task Refresh_Click()
    {
        await LoadData();
    }

    private async Task EditItem_Click()
    {
        await Grid.StartEditRowAsync(FocusedRowVisibleIndex);
    }

    private void DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

    private async Task OnDelete(GridDataItemDeletingEventArgs e)
    {
        try
        {
            var aq = SelectedDataItems.Count;
            if (SelectedDataItems is null)
            {
                await Mediator.Send(new DeleteVillageRequest(((VillageDto)e.DataItem).Id));
            }
            else
            {
                var a = SelectedDataItems.Adapt<List<VillageDto>>();
                await Mediator.Send(new DeleteDistrictRequest(ids: a.Select(x => x.Id).ToList()));
            }
            await LoadData();
        }
        catch (Exception ee)
        {
            ee.HandleException(ToastService);
        }
    }

    private async Task OnSave(GridEditModelSavingEventArgs e)
    {
        PanelVisible = true;

        var editModel = (VillageDto)e.EditModel;

        if (editModel.Id == 0)
            await Mediator.Send(new CreateVillageRequest(editModel));
        else
            await Mediator.Send(new UpdateVillageRequest(editModel));

        await LoadData();
    }

    // private object Data { get; set; }
    private EntityInstantFeedbackSource InstantFeedbackSource { get; set; }

    private async Task LoadData()
    {
        PanelVisible = true;
        // Villages = await Mediator.Send(new GetVillageQuery());

        // InstantFeedbackSource = new EntityInstantFeedbackSource(e =>
        // {
        //     e.KeyExpression = "Id";
        //     e.QueryableSource = Villages.AsQueryable();
        // });

        // var dataSource = new GridDevExtremeDataSource<VillageDto>(Villages.AsQueryable());
        // dataSource.CustomizeLoadOptions = (loadOptions) =>
        // {
        //     // If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
        //     // This can make SQL execution plans more efficient.
        //     loadOptions.PrimaryKey = new[] { "Id" };
        //     loadOptions.PaginateViaPrimaryKey = true;
        // };

        // Data = dataSource;

        SelectedDataItems = [];
        PanelVisible = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await Grid.WaitForDataLoadAsync();
            // Grid.ExpandGroupRow(1);
            // await Grid.WaitForDataLoadAsync();
            // Grid.ExpandGroupRow(2);
        }
    }
    public void Dispose()
    {
        InstantFeedbackSource?.Dispose();
    }

    private int pageNumber = 1;
    private string searchTerm = string.Empty;
    private int totalCount;
    TestDataVillageService _testDataVillageServicezz { get; set; }

    private IEnumerable<int> PageSizess = new[] { 10, 25, 50, 100 };

    private async Task LoadData(int pageIndex, int pageSize)
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = pageIndex + 1,
                PageSize = pageSize,
                Predicate = BuildSearchPredicate()
            };

        var result = await Mediator.Send(query);
        totalCount = (int)Math.Ceiling((double)result.TotalCount / pageSize);
        ToastService.ShowInfo(totalCount.ToString());
        ActivePageIndex = pageIndex;
        ToastService.ShowInfo("Active Page Index" + ActivePageIndex.ToString());
        ToastService.ShowInfo("Page Index" + pageIndex.ToString());
        Villages = result.Data;
        PanelVisible = false;
        // await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchBoxChanged(string x)
    {
        ToastService.ShowInfo(x);
        searchTerm = x;
        await LoadData(0, 20);
    }

    private async Task OnPageSizeIndexChanged(int newPageSize)
    {
        PageSize = newPageSize;
        await LoadData(ActivePageIndex, newPageSize);
    }

    private async Task OnPageIndexChanged(int newPageIndex)
    {
        PanelVisible = true;
        await LoadData(newPageIndex, PageSize);
    }
    private Expression<Func<Village, bool>> BuildSearchPredicate2(string a)
    {
        return string.IsNullOrWhiteSpace(a)
            ? village => true
            : village => village.Name.Contains(a);
    }
    private Expression<Func<Village, bool>> BuildSearchPredicate()
    {
        return string.IsNullOrWhiteSpace(searchTerm)
            ? village => true
            : village => village.Name.Contains(searchTerm);
    }

    private long? CityId { get; set; }
    private List<CityDto> Cities = [];
    private List<Country> countries;


    public class AA
    {
        public long id { get; set; }
        public long name { get; set; }
    }

    public class VillageE
    {
        public long id { get; set; }
        public string name { get; set; }
    }

    public class GraphQLResponse
    {
        public Data data { get; set; }
    }

    public class Data
    {
        public List<VillageE> villages { get; set; }
    }

    public List<VillageE> Es { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;

        await LoadData(0, 20);

        // await hehe();

        Cities = await Mediator.Send(new GetCityQuery());

        var client = HttpClientFactory.CreateClient("GraphQLClient");
        var query = @"{ countries { id name } }";
        var response = await client.PostAsJsonAsync("", new { query });
        var responseData = await response.Content.ReadFromJsonAsync<dynamic>();

        Console.WriteLine("========================");

        if (responseData is not null)
        {
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(responseData, new JsonSerializerOptions { WriteIndented = true }));
        }

        Console.WriteLine("========================");


        // var client2 = HttpClientFactory.CreateClient("GraphQLClient");
        // var query2 = @"{ villages { id name } }";
        // var response2 = await client2.PostAsJsonAsync("", new { query = query2 });

        // var responseData23 = await response2.Content.ReadFromJsonAsync<GraphQLResponse>();

        // Es = responseData23.data.villages;

        // var responseData2 = await response2.Content.ReadFromJsonAsync<dynamic>();


        // dynamic data = JsonConvert.DeserializeObject<dynamic>(responseData2);

        // var dynamicList = (IEnumerable<dynamic>)data.data.villages;
         
        // if (responseData2 is not null)
        // {
        //     Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(responseData2, new JsonSerializerOptions { WriteIndented = true }));
        // }


        // users = responseData.Data.Users;

        PanelVisible = false;
    }

    private async Task awokAwokAwokk()
    {

    }


    // ITestDataVillageService _testDataVillageService { get; set; }

    // private int pageNumber = 1;
    // private int pageSize = 50;
    // private async Task OnSearchBoxChanged(string x)
    // {
    //     ToastService.ShowInfo(x);
    //     searchTerm = x;
    //     var query = new GetPagedDataQuery
    //         {
    //             PageNumber = 1,
    //             PageSize = 20,
    //             Predicate = BuildSearchPredicate()
    //         };
    //     var result = await Mediator.Send(query);
    //     totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
    //     Villages = result.Data;
    //     ActivePageIndex = 0;
    //     await InvokeAsync(StateHasChanged);
    // }
    // private async Task OnPageSizeIndexChanged(int newPageIndex)
    // {
    //     var query = new GetPagedDataQuery
    //         {
    //             PageNumber = ActivePageIndex,
    //             PageSize = newPageIndex,
    //             Predicate = BuildSearchPredicate()
    //         };
    //     PageSize = newPageIndex;
    //     var result = await Mediator.Send(query);
    //     totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
    //     Villages = result.Data;
    //     await InvokeAsync(StateHasChanged);
    // }
    // private async Task OnPageIndexChanged(int newPageIndex)
    // {
    //     PanelVisible = true;
    //     var query = new GetPagedDataQuery
    //         {
    //             PageNumber = newPageIndex + 1,
    //             PageSize = PageSize,
    //             Predicate = BuildSearchPredicate()
    //         };
    //     ActivePageIndex = query.PageNumber == 0 ? 0 : query.PageNumber - 1;
    //     var result = await Mediator.Send(query);
    //     totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
    //     Villages = result.Data;
    //     PanelVisible = false;
    //     await InvokeAsync(StateHasChanged);
    // }
    // private string searchTerm = string.Empty;
    // private int totalCount;

    // private Expression<Func<Village, bool>> BuildSearchPredicate()
    // {
    //     if (string.IsNullOrWhiteSpace(searchTerm))
    //         return village => true; // No filter if search term is empty

    //     return village => village.Name.Contains(searchTerm);
    // }
    // TestDataVillageService _testDataVillageServicezz { get; set; }
    // protected override async Task OnInitializedAsync()
    // {
    //     var query = new GetPagedDataQuery
    //         {
    //             PageNumber = 1,
    //             PageSize = 20

    //         };

    //     var result = await Mediator.Send(query);
    //     totalCount = (int)Math.Ceiling((double)result.TotalCount / 20);
    //     Villages = result.Data;
    //     // var dataSource = new GridDevExtremeDataSource<Village>(Taa.GetVillages());

    //     // dataSource.CustomizeLoadOptions = (loadOptions) =>
    //     // {
    //     //     If underlying data is a large SQL table, specify PrimaryKey and PaginateViaPrimaryKey.
    //     //     This can make SQL execution plans more efficient.
    //     //     loadOptions.PrimaryKey = new[] { "Id" };
    //     //     loadOptions.PaginateViaPrimaryKey = true;
    //     // };
    //     // Data = dataSource;

    //     // var aa = Data;

    //     // Refer to https://docs.microsoft.com/dotnet/api/microsoft.aspnetcore.components.owningcomponentbase

    //     // IsLoading = true;

    //     // InstantFeedbackSource = new EntityInstantFeedbackSource(e =>
    //     // {
    //     //     e.KeyExpression = "Id";
    //     //     e.QueryableSource = result;
    //     // });

    //     // IsLoading = false;
    //     // return;


    //     // Countrys = await Mediator.Send(new GetCountryQuery());
    //     // Provinces = await Mediator.Send(new GetProvinceQuery());
    //     // Districts = await Mediator.Send(new GetDistrictQuery());
    //     // Cities = await Mediator.Send(new GetCityQuery());
    //     await LoadData();
    //     IsLoading = false;
    // }
}