@page "/clinic-service/wellness/join-participant/{Slug}"
@using System.ComponentModel.DataAnnotations
@using static McDermott.Application.Features.Commands.Transaction.WellnessProgramParticipantCommand
@using static McDermott.Application.Features.Commands.Transaction.WellnessProgramCommand

<PageTitle>@Helper.APP_NAME - Wellness Join Participant</PageTitle>

<style>
    .centered-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .contents-wrapper img {
        max-width: 100%;
        height: auto;
    }

    .contents-wrapper {
        max-width: 600px; /* Sesuaikan nilai ini sesuai dengan lebar kolom yang diinginkan */
        overflow-wrap: break-word; /* Untuk menghindari teks melebar */
        word-wrap: break-word;
    }

    .dxbl-row {
        justify-content: center !important;
    }
</style>

@if (IsFound)
{
    if (IsClosed)
    {
        <div class="wrapper">
            <div class="container-fluid ">
                <div class="row centered-container">
                    <div class="col-md-10">
                        <div class="card mt-5">
                            <div class="card-header bg-primary">
                                <div class="row justify-content-center">
                                    <div class="col-auto align-self-center">
                                        <h4 class="fw-bold">@WellnessProgram.Name</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="text-center">Sorry, this wellness program has ended.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!IsActive)
    {
        <div class="wrapper">
            <div class="container-fluid ">
                <div class="row centered-container">
                    <div class="col-md-10">
                        <div class="card mt-5">
                            <div class="card-header bg-primary">
                                <div class="row justify-content-center">
                                    <div class="col-auto align-self-center">
                                        <h4 class="fw-bold">@WellnessProgram.Name</h4>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="text-center">
                                    @if (WellnessProgram.Status == EnumWellness.Completed)
                                    {
                                    <p class="text-center">This wellness program has been completed.</p>
                                    }
                                    else if (WellnessProgram.Status == EnumWellness.Inactive)
                                    {
                                    <p class="text-center">This wellness program is currently inactive.</p>
                                    }
                                    else
                                    {
                                    <p class="text-center">This wellness program is currently in the "@WellnessProgram.Status.GetDisplayName()" status.</p>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (IsStart)
    {
        <div class="wrapper">
            <div class="container-fluid">
                <div class="row centered-container">
                    <div class="col-md-10">
                        <div class="card mt-5">
                            <div class="card-header bg-primary">
                                <div class="row justify-content-center">
                                    <div class="col-auto align-self-center">
                                        <h4 class="fw-bold">@WellnessProgram.Name</h4>
                                        @*       <div id="countdown" class="text-light mt-2"></div> *@
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="text-center">This wellness program has not started yet. Please check back later.</p>

                                <h5 class=" text-center mt-2">Start in: @WellnessProgram.StartDate.ToString("dd MMMM yyyy")</h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <DxLoadingPanel @bind-Visible="PanelVisible"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Fetching Data...">
            <div class="wrapper">
                <div class="container-fluid ">
                    <div class="row centered-container">
                        <div class="col-md-10">
                            <div class="card mt-5">
                                <div class="card-header bg-success">
                                    <div class="row justify-content-center">
                                        <div class="col-auto align-self-center">
                                            <h4 class="fw-bold">@WellnessProgram.Name</h4>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-body">

                                    @if (!string.IsNullOrWhiteSpace(WellnessProgram.Content?.Trim()))
                                    {
                                        <div class="row mt-2 mb-3 justify-content-center">
                                            <div class="col-12 d-flex justify-content-center">
                                                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                          RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                                          Text="@(IsShowContent ? "Join Participant" : "See Content")"
                                                          CssClass="w-130"
                                                          Click="OnClickContent">
                                                </DxButton>
                                            </div>
                                        </div>
                                    }

                                    @if (!string.IsNullOrWhiteSpace(WellnessProgram.Content?.Trim()) && IsShowContent)
                                    {
                                        <div class="row justify-content-center">
                                            <div class="col-auto contents-wrapper">
                                                @((MarkupString)@WellnessProgram.Content)
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <EditForm Model="ahe" Context="EditFormContext">
                                            <DxFormLayout CssClass="w-100">
                                                <DxFormLayoutItem Caption="Employee Number" CaptionCssClass="normal-caption required-caption" ColSpanMd="12">
                                                    <Template>
                                                        <DxGridLayout>
                                                            <Rows>
                                                                <DxGridLayoutRow />
                                                            </Rows>
                                                            <Columns>
                                                                <DxGridLayoutColumn Width="25fr" />
                                                                <DxGridLayoutColumn Width="5fr" />
                                                            </Columns>
                                                            <Items>
                                                                <DxGridLayoutItem Row="0" Column="0" CssClass="mt ">
                                                                    <Template>
                                                                        <DxTextBox @bind-Text="@PatientNumber" NullText="Employee Number" CssClass="" ShowValidationIcon="true"></DxTextBox>
                                                                    </Template>
                                                                </DxGridLayoutItem>
                                                                <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                    <Template>
                                                                        <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                                                  RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                                  IconCssClass="fa-solid fa-magnifying-glass"
                                                                                  Text="Search"
                                                                                  SubmitFormOnClick="true"
                                                                                  Click="OnSearchPatient"
                                                                                  CssClass="w-100 me-1">
                                                                        </DxButton>
                                                                    </Template>
                                                                </DxGridLayoutItem>
                                                            </Items>
                                                        </DxGridLayout>
                                                    </Template>
                                                </DxFormLayoutItem>


                                                @if (Patient is not null && Patient.Id != 0)
                                                {
                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Name" ColSpanMd="12">
                                                        <MyTextBox @bind-Text="@Patient.Name"
                                                                   ReadOnly
                                                                   NullText="Name" />
                                                        <ValidationMessage For="@(() => Patient.Name)" />
                                                    </DxFormLayoutItem>
                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Email" ColSpanMd="12">
                                                        <MyTextBox @bind-Text="@Patient.Email"
                                                                   ReadOnly
                                                                   NullText="Email" />
                                                        <ValidationMessage For="@(() => Patient.Email)" />
                                                    </DxFormLayoutItem>

                                                    @if (Patient.Department is null)
                                                    {
                                                        Patient.Department = new();
                                                    }

                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Department" ColSpanMd="12">
                                                        <MyTextBox @bind-Text="@Patient.Department.Name"
                                                                   ReadOnly
                                                                   NullText="Department" />
                                                        <ValidationMessage For="@(() => Patient.Department)" />
                                                    </DxFormLayoutItem>

                                                    @*   <div class="row mt-3 row-100 justify-content-end">
                                    <div class="col-auto align-self-end">
                                    <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                    RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                    Text="Join"
                                    SubmitFormOnClick="true"
                                    Click="OnClickJoin">
                                    </DxButton>
                                    </div>
                                    </div> *@
                                                }
                                            </DxFormLayout>
                                            @if (Patient is not null && Patient.Id != 0)
                                            {
                                                <div class="row mt-2">
                                                    <div class="col-12">
                                                        <div class="row justify-content-end">
                                                            <div class="col-md-12 d-flex justify-content-end">
                                                                <DxButton RenderStyle="ButtonRenderStyle.Primary"
                                                                          RenderStyleMode="@ButtonRenderStyleMode.Contained"
                                                                          Text="Join"
                                                                          CssClass="w-130"
                                                                          SubmitFormOnClick="true"
                                                                          Click="OnClickJoin">
                                                                </DxButton>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </EditForm>
                                    }

                                    @*  <div class="d-flex justify-content-center">
                            <DxButton RenderStyle="ButtonRenderStyle.Primary"
                            RenderStyleMode="@ButtonRenderStyleMode.Contained"
                            Text="Join"
                            CssClass="w-130"
                            SubmitFormOnClick="true"
                            Click="OnClickJoin">
                            </DxButton>
                            </div> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DxLoadingPanel>
    }
}
else
{
    <div class="wrapper">
        <div class="container-fluid ">
            <div class="row centered-container">
                <div class="col-md-10">
                    <div class="card mt-5">
                        <div class="card-header bg-primary">
                            <div class="row justify-content-center">
                                <div class="col-auto align-self-center">
                                    <h4 class="fw-bold">Slug</h4>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <p class="text-center"> Sorry, The Program is not found, please check the URL.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Slug { get; set; } = string.Empty;
    private bool IsShowContent { get; set; } = true;

    private UserDto ahe { get; set; } = new();

    private bool IsFound { get; set; } = true;
    private bool PanelVisible { get; set; } = false;

    [Required]
    private string PatientNumber { get; set; } = string.Empty;

    private WellnessProgramDto WellnessProgram { get; set; } = new();
    private UserDto Patient { get; set; } = new();

    private void OnClickContent()
    {
        IsShowContent = IsShowContent ? false : true;
    }

    private async Task OnClickJoin()
    {
        try
        {
            PanelVisible = true;

            var cek = await Mediator.Send(new ValidateWellnessProgramParticipant(x => x.PatientId == Patient.Id && x.WellnessProgramId == WellnessProgram.Id));
            if (cek)
            {
                ToastService.ShowInfo("The Employee is already joined the Wellness Program!");
                return;
            }

            await Mediator.Send(new CreateWellnessProgramParticipantRequest(new WellnessProgramParticipantDto
                {
                    Date = DateTime.Now,
                    PatientId = Patient.Id,
                    WellnessProgramId = WellnessProgram.Id,
                }));

            ToastService.ShowSuccess("Successfully joined the Wellness Program!");
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private async Task OnSearchPatient()
    {
        try
        {
            PanelVisible = true;
            Patient = await Mediator.Send(new GetSingleUserQuery
                {
                    Predicate = x => x.IsPatient == true && x.IsEmployee == true &&
                                (x.Legacy != null && x.Legacy.Equals(PatientNumber) ||
                                x.NIP != null && x.NIP.Equals(PatientNumber) ||
                                x.Oracle != null && x.Oracle.Equals(PatientNumber) ||
                                x.SAP != null && x.SAP.Equals(PatientNumber)),
                    Select = x => new User
                    {
                        Id = x.Id,
                        Name = x.Name,
                        Email = x.Email,
                        Department = new Department
                        {
                            Name = x.Department != null ? x.Department.Name : "-"
                        },
                    }
                });

            if (Patient is null || Patient.Id == 0)
            {
                ToastService.ShowInfo("The Employee Number is not found.");
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private bool IsClosed { get; set; } = false;
    private bool IsStart { get; set; } = false;
    private bool IsActive { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PanelVisible = true;
            WellnessProgram = await Mediator.Send(new GetSingleWellnessProgramQuery
                {
                    Predicate = x => x.Slug == Slug
                });

            if (WellnessProgram is null)
            {
                IsFound = false;
                return;
            }

            if (WellnessProgram.EndDate is not null && WellnessProgram.EndDate < DateTime.Now)
            {
                IsClosed = true;
                return;
            }

            if (WellnessProgram.Status == EnumWellness.Active)
            {
                IsActive = true;
                return;
            }


            // if (timer is not null)
            //     timer?.Dispose();

            if (DateTime.Now.Date < WellnessProgram.StartDate.Date)
            {
                // StartCountdown();
                IsStart = true;
                return;
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
        finally { PanelVisible = false; }
    }

    private string TimeRemaining { get; set; } = "Calculating...";
    private bool isStarted = false;
    private System.Threading.Timer timer;
    private void StartCountdown()
    {
        // if (WellnessProgram.StartDate <= DateTime.Now)
        // {
        //     isStarted = true;
        //     return;
        // }

        timer = new System.Threading.Timer(UpdateCountdown, null, 0, 1000);
    }

    private void UpdateCountdown(object state)
    {
        var targetDateTime = WellnessProgram.StartDate.Date;  // Gunakan tanggal tanpa waktu (00:00:00)
        var timeSpan = targetDateTime - DateTime.Now;

        if (timeSpan.TotalSeconds <= 0)
        {
            isStarted = true;
            TimeRemaining = "Starts in: 00:00:00";
            timer?.Dispose();
            InvokeAsync(StateHasChanged);
            return;
        }

        // Menampilkan waktu tersisa dalam format "X day(s) left hh:mm:ss"
        if (timeSpan.Days > 0)
        {
            TimeRemaining = $"{timeSpan.Days} day{(timeSpan.Days > 1 ? "s" : "")} left {timeSpan.Hours:00}:{timeSpan.Minutes:00}:{timeSpan.Seconds:00}";
        }
        else
        {
            TimeRemaining = $"{timeSpan.Hours:00}:{timeSpan.Minutes:00}:{timeSpan.Seconds:00}";
        }

        InvokeAsync(StateHasChanged);
    }



    public void Dispose()
    {
        timer?.Dispose();
    }
}