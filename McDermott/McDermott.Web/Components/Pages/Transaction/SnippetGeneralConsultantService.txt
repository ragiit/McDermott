@page "/clinic-service/general-consultation-service"
@rendermode InteractiveServer
<PageTitle>McHealthCare - Transaction General Consultation Service</PageTitle>

@if (IsAccess)
{
        <div class="wrapper">

                <section class="content-header">
                    <div class="container-fluid">
                        <div class="row mb-2">
                            <div class="col-sm-6">
                                <h1>General Consultation Service</h1>
                            </div>
                            <div class="col-sm-6">
                                <ol class="breadcrumb float-sm-right">
                                    <li class="breadcrumb-item"><a class="no-underline" href="/">Home</a></li>
                                    <li class="breadcrumb-item" @onclick="LoadData"><a class="no-underline" href="/clinic-service/general-consultation-service">General Consultan Service</a></li>
                                </ol>
                            </div>
                        </div>
                    </div>
                </section>

                        <section class="content">
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col">
                                @if (!showForm)
                                {
                                            <div class="card">
                                                <div class="card-body">
                                                    <DxLoadingPanel @bind-Visible="PanelVisible"
                                                                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                                                    IsContentBlocked="true"
                                                                    ApplyBackgroundShading="true"
                                                                    IndicatorAreaVisible="false"
                                                                    Text="Fetching Data...">
                                                        <DxGrid @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
                                                                Data="GeneralConsultanServices.OrderByDescending(x => x.RegistrationDate).ThenByDescending(x => x.IsAlertInformationSpecialCase).ThenByDescending(x => x.ClassType is not null)"
                                                                PageSize="10"
                                                                @bind-SelectedDataItems="@SelectedDataItems"
                                                                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                                                KeyFieldName="Id"
                                                                TextWrapEnabled="false"
                                                EditorRenderMode="GridEditorRenderMode.Detached"
                                                                CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                                                                DataItemDeleting="OnDelete"
                                                                EditMode="GridEditMode.PopupEditForm"
                                                                PagerPosition="GridPagerPosition.Bottom"
                                                                PageSizeSelectorVisible="true"
                                                                PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                                                                PageSizeSelectorAllRowsItemVisible="true"
                                                                PagerSwitchToInputBoxButtonCount="10"
                                                                AllowSelectRowByClick="true"
                                                                ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                                                                FocusedRowEnabled="true"
                                                                RowDoubleClick="OnRowDoubleClick"
                                                                PagerVisibleNumericButtonCount="10"
                                                                FocusedRowChanged="Grid_FocusedRowChanged"
                                                                ShowGroupPanel="true"
                                                                ShowFilterRow="true"
                                                                CustomizeElement="Grid_CustomizeElement"
                                                                ShowSearchBox="true"
                                                                SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                                                                KeyboardNavigationEnabled="true">
                                                                    <ToolbarTemplate>
                                                        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
                                                            <DxToolbarItem Visible="@UserAccessCRUID.Create" Text="New" Click="NewItem_Click" IconCssClass="fa-solid fa-plus" />
                                                            <DxToolbarItem Visible="@UserAccessCRUID.Update" Text="Edit" Click="EditItem_Click" IconCssClass="fa-solid fa-pen-to-square" Enabled="SelectedDataItems.Count > 0 && GeneralConsultanServices.Count > 0" />
                                                            <DxToolbarItem Visible="@UserAccessCRUID.Delete" Text="Delete" Click="DeleteItem_Click" IconCssClass="fa-solid fa-trash" Enabled="SelectedDataItems.Count > 0 && GeneralConsultanServices.Count > 0 && IsDeletedConsultantService" />
                                                            <DxToolbarItem BeginGroup="true" Text="Refresh" Click="Refresh_Click" IconCssClass="fa-solid fa-arrows-rotate" />
                                                            <DxToolbarItem Text="Column Chooser" Click="ColumnChooserButton_Click" BeginGroup="true" IconCssClass="fa-solid fa-table-columns" />
                                                            <DxToolbarItem Text="Export" BeginGroup="true" IconCssClass="fa-solid fa-file-export">
                                                                <Items>
                                                                    <DxToolbarItem Text="To CSV" Click="ExportCsvItem_Click" />
                                                                    <DxToolbarItem Text="To XLSX" Click="ExportXlsxItem_Click" />
                                                                    <DxToolbarItem Text="To XLS" Click="ExportXlsItem_Click" />
                                                                </Items>
                                                            </DxToolbarItem>
                                                            <DxToolbarItem Visible="false" Text="Import" id="upload" IconCssClass="fa-solid fa-file-import" />
                                                        </DxToolbar>
                                                    </ToolbarTemplate>
                                                            <Columns>
                                                                <DxGridSelectionColumn Width="15px"/>
                                                                <DxGridDataColumn MinWidth="200" FieldName="RegistrationDate" DisplayFormat="ddd, dd MMM yyyy" Caption="Registration Date"/>
                                                                <DxGridDataColumn MinWidth="200" FieldName="StagingStatus" Caption="Status" />  
                                                                <DxGridDataColumn MinWidth="200" FieldName="Patient.Name" Caption="Patient" />
                                                                <DxGridDataColumn MinWidth="200" FieldName="Pratitioner.Name" Caption="Doctor" />
                                                                <DxGridDataColumn MinWidth="200" FieldName="Service.Name" Caption="Service"/>
                                                                <DxGridDataColumn MinWidth="200" FieldName="Payment" Caption="Payment Method" Visible="false" />
                                                                <DxGridDataColumn MinWidth="200" FieldName="AppoimentDate" Caption="Appoiment" Visible="false" />
                                                                <DxGridDataColumn MinWidth="200" FieldName="IsAlertInformationSpecialCase" Caption="Special Case">
                                                                    <CellDisplayTemplate>
                                                                        @GetIssuePriorityIconHtml((context.DataItem as GeneralConsultanServiceDto))
                                                                    </CellDisplayTemplate>
                                                                </DxGridDataColumn> 
                                                            </Columns>
                                                            <GroupSummary>
                                                                <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="StagingStatus"/>
                                                            </GroupSummary>
                                                        </DxGrid>
                                                    </DxLoadingPanel>
                                               </div>
                                            </div>
                        }
                        else
                        {
                            if (LoadingForm)
                            {
                                             <LoadingIndicatorLayout></LoadingIndicatorLayout>
                            }
                            else
                            {
                                                <EditForm Model="@FormRegis" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit"
                                                    OnInvalidSubmit="@HandleInvalidSubmit">
                                                    <DataAnnotationsValidator /> 
                                                    <div class="row justify-content-end mb-3">
                                                        <div class="col-auto align-self-end">
                                                            <DxTabs>
                                                                <DxTab Text="Planned" Enabled="@(FormRegis.StagingStatus == "Planned")"></DxTab>
                                                                <DxTab Text="Confirmed" Enabled="@(FormRegis.StagingStatus == "Confirmed")"></DxTab>
                                                                <DxTab Text="Nurse Station" Enabled="@(FormRegis.StagingStatus == "Nurse Station")"></DxTab>
                                                                <DxTab Text="Waiting" Enabled="@(FormRegis.StagingStatus == "Waiting")"></DxTab>
                                                                <DxTab Text="@(GeneralConsultanMedicalSupport != null && GeneralConsultanMedicalSupport.Id != 0 && GeneralConsultanMedicalSupport.Status != "Finish" ? "Procedure Room" : "Physician")" Enabled="@(FormRegis.StagingStatus == "Physician" || FormRegis.StagingStatus == "Procedure Room")"></DxTab>
                                                                <DxTab Text="Finished" Enabled="@(FormRegis.StagingStatus == "Finished")"></DxTab>
                                                                <DxTab Text="Canceled" Enabled="@(FormRegis.StagingStatus == "Canceled")"></DxTab>
                                                            </DxTabs>
                                                        </div>
                                                    </div>  
                                    @if (FormRegis.StagingStatus != "Finished" && FormRegis.StagingStatus != "Canceled")
                                    {
                                        if ((FormRegis.StagingStatus == "Procedure Room" || FormRegis.StagingStatus == "Physician"))
                                        {
                                            if (GeneralConsultanMedicalSupport.Status == "Finish" || GeneralConsultanMedicalSupport.Id == 0)
                                            {
                                                                                        <div class="card">
                                                                                            <div class="card-body">
                                                                                                <div class="w-100">
                                                                                                    <div class="col align-self-center">
                                                                                                        <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-check" Text="@StagingText" Click="OnClickConfirm" RenderStyle="ButtonRenderStyle.Primary"></DxButton>
                                                                                                        <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-xmark" Text="Cancel" Click="OnCancel2" RenderStyle="ButtonRenderStyle.Danger"></DxButton>
                                                                                                        <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-print" Text="Print" Click="OnPrint" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline"></DxButton>

                                                                                                    </div>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                            }
                                        }
                                        else
                                        {
                                                                            <div class="card">
                                                                                <div class="card-body">
                                                                                    <div class="w-100">

                                                                                        <div class="col align-self-center">
                                                                                            <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-check" Text="@StagingText" Click="OnClickConfirm" RenderStyle="ButtonRenderStyle.Primary"></DxButton>
                                                                                            <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-xmark" Text="Cancel" Click="OnCancel2" RenderStyle="ButtonRenderStyle.Danger"></DxButton>
                                                                                            <DxButton Enabled="!IsLoading" IconCssClass="fa-solid fa-print" Text="Print" Click="OnPrint" RenderStyle="ButtonRenderStyle.Success" RenderStyleMode="ButtonRenderStyleMode.Outline"></DxButton>

                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                        }
                                    } 

                                                     <div class="card">
                                                            <div class="card-body">
                                                                <div class="w-100">
                                                                    <DxToolbar Title="Actions" ItemRenderStyleMode="ToolbarRenderStyleMode.Contained" AdaptivityMinRootItemCount="2" AdaptivityAutoHideRootItems="true" AdaptivityAutoCollapseItemsToIcons="true">
                                                                        <Items>
                                                                            <DxToolbarItem  Visible="@(FormRegis.StagingStatus == "Physician")" Alignment="ToolbarItemAlignment.Left" BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                        Click="OnReferToClick"
                                                                                        Text="Refer To" />

                                                                            <DxToolbarItem
                                                                                        Alignment="ToolbarItemAlignment.Left" BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                        Click="OnAppoimentPopUpClick"
                                                                                        Text="Follow Up" />

                                                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                        Click="OnClickPopUpHistoricalMedical"
                                                                                        Text="Historical Medical Record Patient" />

                                                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                        Click="OnClickPopUpAppoimentPending"
                                                                                        Text="Appointment pending in patient alert" />

                                                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Visible="@(FormRegis.StagingStatus == "Physician")"  BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                          Click="OnClickReferralPrescriptionConcoction"
                                                                                        Text="Referral Prescription & Concoction" />

                                                                            <DxToolbarItem Alignment="ToolbarItemAlignment.Left" Visible="@(FormRegis.StagingStatus == "Physician")" BeginGroup="true"
                                                                                        IconCssClass="fa-solid fa-notes-medical"
                                                                                        Click="OnClickPopUpPopUpProcedureRoom"
                                                                                        Text="Procedure Room" />
                                                                        </Items>
                                                                    </DxToolbar>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    <div class="card">

                                                        <DxLoadingPanel @bind-Visible="IsLoading"
                        IsContentBlocked="true"
                        CssClass="w-100"
                        ApplyBackgroundShading="true">
             <div class="w-100">
                                                                    <DxFormLayout>
                                                                <DxFormLayoutGroup Caption="General" ColSpanMd="12">
                                                                    <div class="row">
                                                                <div class="col-md-6">
                                                                    <DxFormLayout  Enabled="false" CssClass="mt ">
                                                                        <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption normal-caption" Caption="Patient" ColSpanMd="12">
                                                                            <DxComboBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        ShowValidationIcon="true"
                                                                                        Data="@patients"
                                                                                        NullText="Select Patient..."
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        @bind-Value="@FormRegis.PatientId"
                                                                                        TextFieldName="Name"
                                                                                        SelectedItemChanged="@((UserDto e) => SelectedItemPatientChanged(e))"
                                                                                        ValueFieldName="Id">
                                                                            </DxComboBox>
                                                                                <ValidationMessage For="@(() => FormRegis.PatientId)" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                                                         <DxTextBox @bind-Text="(FormRegis.Patient.NoRm)" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />

                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                                                                            <DxTextBox @bind-Text="(FormRegis.Patient.NoId)" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                                                                            <Template>
                                                                                <DxGridLayout>
                                                                                    <Rows>
                                                                                        <DxGridLayoutRow />
                                                                                    </Rows>
                                                                                    <Columns>
                                                                                        <DxGridLayoutColumn Width="90%" />
                                                                                        <DxGridLayoutColumn Width="30%" />
                                                                                    </Columns>
                                                                                    <Items>
                                                                                        <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                                                            <Template>
                                                                                                <DxSpinEdit ShowValidationIcon="true"MinValue="0" @bind-Value="@FormRegis.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                                                                            </Template>
                                                                                        </DxGridLayoutItem>
                                                                                        <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                                            <Template>
                                                                                                <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                                                                            </Template>
                                                                                        </DxGridLayoutItem>
                                                                                    </Items>
                                                                                </DxGridLayout>

                                                                            </Template>
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                                                                            <DxComboBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        Data="@RegisType"
                                                                                        NullText="Select Registration..."
                                                                                        AllowUserInput="true"
                                                                                        ShowValidationIcon="true"
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        SelectedItemChanged="@((string city) => SelectedItemChanged(city))"
                                                                                        @bind-Value="@FormRegis.TypeRegistration">
                                                                            </DxComboBox>
                                                                            <ValidationMessage For="@(() => FormRegis.TypeRegistration)" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem Visible="@(!string.IsNullOrWhiteSpace(FormRegis.TypeRegistration) && !FormRegis.TypeRegistration.Equals("General Consultation"))"
                                                                                    CaptionCssClass="required-caption normal-caption"
                                                                                    Caption="Medical Type" ColSpanMd="12">
                                                                            <DxComboBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" ShowValidationIcon="true" Data="@Method"
                                                                                        NullText="Select Method..."
                                                                                            FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        @bind-Value="@FormRegis.TypeMedical">
                                                                            </DxComboBox>
                                                                        </DxFormLayoutItem>

                                                                            <DxFormLayoutItem  CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                                                                <DxCheckBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Checked="@FormRegis.IsAlertInformationSpecialCase" />
                                                                            </DxFormLayoutItem>
                                                                    </DxFormLayout>
                                                                </div>
                                                                <div class="col-md-6">
                                                                    <DxFormLayout CssClass="mt ">
                                                                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Patient Type" ColSpanMd="12">
                                                                            <DxComboBox ShowValidationIcon="true" Data="@ClassTypes"
                                                                                        NullText="Select Patient Type.."
                                                                                        ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        TextFieldName="Name" ValueFieldName="Id"
                                                                                        @bind-Value="@FormRegis.ClassTypeId">
                                                                            </DxComboBox>
                                                                            <ValidationMessage For="@(() => FormRegis.ClassTypeId)" />
                                                                        </DxFormLayoutItem> 
                                                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Service" ColSpanMd="12">
                                                                            <DxComboBox ShowValidationIcon="true" Data="@Services"
                                                                                        NullText="Select Service.."
                                                                                        ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        SelectedItemChanged="@((ServiceDto e) => SelectedItemServiceChanged(e))"
                                                                                        @bind-Value="@FormRegis.ServiceId" TextFieldName="Name" ValueFieldName="Id">
                                                                            </DxComboBox>
                                                                            <ValidationMessage For="@(() => FormRegis.ServiceId)" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physicion" ColSpanMd="12">
                                                                            <DxComboBox ShowValidationIcon="true" Data="@IsPratition"
                                                                                        NullText="Select Physicion..."
                                                                                        @bind-Value="@FormRegis.PratitionerId"
                                                                                        ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        TextFieldName="Name"
                                                                                        ValueFieldName="Id"
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        SelectedItemChanged="@((UserDto e) => SelectedItemPhysicianChanged(e))"
                                                                                        InputId="CbDoctoreName">
                                                                            </DxComboBox>
                                                                            <ValidationMessage For="@(() => FormRegis.PratitionerId)" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Payment Method" ColSpanMd="12">
                                                                            <DxComboBox ShowValidationIcon="true" Data="@Payments"
                                                                                        NullText="Payment Method.."
                                                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                                                        ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                        SelectedItemChanged="@((string e) => SelectedItemPaymentChanged(e))"
                                                                                        @bind-Value="FormRegis.Payment">
                                                                            </DxComboBox>
                                                                                <ValidationMessage For="@(() => FormRegis.Payment)" />
                                                                        </DxFormLayoutItem>
                                                                @if (FormRegis.Payment == "Insurance" || FormRegis.Payment == "BPJS")
                                                                {
                                                                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Insurance Policy" ColSpanMd="12">
                                                                                        <DxComboBox ShowValidationIcon="true"
                                                                                            ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))"
                                                                                            TextFieldName="ConcatInsurancePolicy"
                                                                                            ValueFieldName="InsurancePolicyId"
                                                                                            Data="@Temps"
                                                                                            SelectedItemChanged="@((InsuranceTemp? e) => SelectedItemInsurancePolicyChanged(e))"
                                                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                            FilteringMode="@DataGridFilteringMode.Contains"
                                                                                            @bind-Value="@FormRegis.InsurancePolicyId"
                                                                                            NullText="Select Insurance ..">
                                                                                        </DxComboBox ShowValidationIcon="true">
                                                                                        <ValidationMessage For="@(() => FormRegis.InsurancePolicyId)" />
                                                                                    </DxFormLayoutItem>
                                                                }
                                                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Registration Date" ColSpanMd="12">
                                                                            <DxDateEdit
                                                                                 DateChanged="@((DateTime e) => SelectedItemRegistrationDateChanged(e))"
                                                                                 ReadOnly="@(!FormRegis.StagingStatus?.Equals("Planned") ?? false)"
                                                                                 Date="@FormRegis.RegistrationDate"
                                                                                 DateExpression="@(() => @FormRegis.RegistrationDate)"
                                                                                 Mask="@DateTimeMask.ShortDate"
                                                                                 NullText="Select Registration Date">
                                                                            </DxDateEdit>
                                                                        </DxFormLayoutItem> 
                                                                        <DxFormLayoutItem Visible="@(FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus!.Equals("Finished"))" CaptionCssClass="normal-caption" Caption="Sick Leave" ColSpanMd="12">
                                                                            <DxCheckBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))" @bind-Checked="@FormRegis.IsSickLeave" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem Visible="@(FormRegis.IsSickLeave && (FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus!.Equals("Finished")))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                                                                            <Template>
                                                                                <DxGridLayout ColumnSpacing="8px">
                                                                                    <Rows>
                                                                                        <DxGridLayoutRow />
                                                                                    </Rows>
                                                                                    <Columns>
                                                                                        <DxGridLayoutColumn />
                                                                                        <DxGridLayoutColumn />
                                                                                    </Columns>
                                                                                    <Items>
                                                                                        <DxGridLayoutItem Row="0" Column="0"  >
                                                                                            <Template>
                                                                                                <DxDateEdit ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))" @bind-Date="@FormRegis.StartDateSickLeave" Mask="@DateTimeMask.ShortDate" NullText="Select Start Date" />
                                                                                            </Template>
                                                                                        </DxGridLayoutItem>
                                                                                        <DxGridLayoutItem Row="0" Column="1" >
                                                                                            <Template>
                                                                                                <DxDateEdit ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))" @bind-Date="@FormRegis.EndDateSickLeave" Mask="@DateTimeMask.ShortDate" NullText="Select End Date" />
                                                                                            </Template>
                                                                                        </DxGridLayoutItem>
                                                                                    </Items>
                                                                                </DxGridLayout>
                                                                            </Template>
                                                                        </DxFormLayoutItem>

                                                                @if (FormRegis.Patient is not null && FormRegis.Patient.Gender is not null && FormRegis.Patient.Gender.Name.Trim().Equals("Female"))
                                                                {
                                                                                <DxFormLayoutItem Visible="@(FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus!.Equals("Finished"))" CaptionCssClass="normal-caption" Caption="Maternity Leave" ColSpanMd="12">
                                                                                            <DxCheckBox  ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))" @bind-Checked="@FormRegis.IsMaternityLeave" />
                                                                                        </DxFormLayoutItem>
                                                                                        <DxFormLayoutItem Visible="@(FormRegis.IsMaternityLeave && (FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus!.Equals("Finished")))" CaptionCssClass="required-caption normal-caption" Caption="Start-End Date" ColSpanMd="12">
                                                                                            <Template>
                                                                                                <DxGridLayout ColumnSpacing="8px">
                                                                                                    <Rows>
                                                                                                        <DxGridLayoutRow />
                                                                                                    </Rows>
                                                                                                    <Columns>
                                                                                                        <DxGridLayoutColumn />
                                                                                                        <DxGridLayoutColumn />
                                                                                                    </Columns>
                                                                                                    <Items>
                                                                                                        <DxGridLayoutItem Row="0" Column="0"  >
                                                                                                            <Template> 
                                                                                                                 <DxDateEdit
                                                                                                                        ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))"
                                                                                                                        DateChanged="@((DateTime e) => SelectedMaternityStartDateChanged(e))"
                                                                                                                        Date="@FormRegis.StartMaternityLeave"
                                                                                                                        DateExpression="@(() => FormRegis.StartMaternityLeave)"
                                                                                                                        Mask="@DateTimeMask.ShortDate"
                                                                                                                        NullText="Select Start Date">
                                                                                                                </DxDateEdit>

                                                                                                            </Template>
                                                                                                        </DxGridLayoutItem>
                                                                                                        <DxGridLayoutItem Row="0" Column="1" >
                                                                                                            <Template>
                                                                                                                <DxDateEdit ReadOnly="@(!FormRegis.StagingStatus!.Equals("Physician"))" @bind-Date="@FormRegis.EndMaternityLeave" Mask="@DateTimeMask.ShortDate" NullText="Select End Date" />
                                                                                                            </Template>
                                                                                                        </DxGridLayoutItem>
                                                                                                    </Items>
                                                                                                </DxGridLayout>
                                                                                            </Template>
                                                                                        </DxFormLayoutItem>
                                                                }
                                                                    </DxFormLayout>
                                                                </div>
                                                            </div>
                                                            </DxFormLayoutGroup>
                                                            </DxFormLayout>

                                                            <DxFormLayout>
                                                                <DxFormLayoutGroup Caption="Allergy Data" ColSpanMd="12" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                                                                    <Items>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Weather" ColSpanMd="2">
                                                                            <DxCheckBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Checked="@FormRegis.IsWeather" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem ColSpanMd="10" Caption="">
                                                            @if (PatientAllergy.Weather is not null || FormRegis.IsWeather)
                                                            {
                                                                                    <DxMemo ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Text="@PatientAllergy.Weather"
                                                                                        NullText="Weather"
                                                                                        ShowValidationIcon="true"
                                                                                        Rows="1" />
                                                            }
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Pharmacology" ColSpanMd="2">
                                                                            <DxCheckBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Checked="@FormRegis.IsPharmacology" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem ColSpanMd="10" >
                                                            @if (PatientAllergy.Farmacology is not null || FormRegis.IsPharmacology)
                                                            {
                                                                                     <DxMemo ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Text="@PatientAllergy.Farmacology"
                                                                                        NullText="Pharmacology"
                                                                                        ShowValidationIcon="true"
                                                                                        Rows="1" />
                                                                @* <DxTextBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Text="@PatientAllergy.Farmacology" NullText="Pharmacology" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" /> *@
                                                            }
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Food" ColSpanMd="2">
                                                                            <DxCheckBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Checked="@FormRegis.IsFood" />
                                                                        </DxFormLayoutItem>
                                                                        <DxFormLayoutItem ColSpanMd="10" >
                                                            @if (PatientAllergy.Food is not null || FormRegis.IsFood)
                                                            {
                                                                                     <DxMemo ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Text="@PatientAllergy.Food" NullText="Food"
                                                                                        ShowValidationIcon="true"
                                                                                        Rows="1" />
                                                                @* <DxTextBox ReadOnly="@(!FormRegis.StagingStatus!.Equals("Planned"))" @bind-Text="@PatientAllergy.Food" NullText="Food" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" /> *@
                                                            }
                                                                        </DxFormLayoutItem>

                                                                    </Items>
                                                                </DxFormLayoutGroup>
                                                            </DxFormLayout>
                                                             
                                                            <div class="mt-3 w-100">
                                                                <DxTabs @bind-ActiveTabIndex="ActiveTabIndex">
                                                    @if (FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus.Equals("Nurse Station") || FormRegis.StagingStatus.Equals("Finished"))
                                                    {
                                                                                <DxTab Text="Clinical Assesment"></DxTab>
                                                                                <DxTab Text="CPPT"></DxTab>
                                                                                <DxTab Visible="@(FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus.Equals("Procedure Room") || FormRegis.StagingStatus.Equals("Finished"))" Text="Other Information"></DxTab>
                                                    } 
                                                                </DxTabs>

                                                @if (FormRegis!.StagingStatus!.Equals("Physician")! || FormRegis.StagingStatus.Equals("Finished"))
                                                {
                                                    @if (ActiveTabIndex == 0)
                                                    {
                                                                                        <DxFormLayout>
                                                                                            <DxFormLayoutGroup ReadOnly="true" Caption="Clinical Assessment" ColSpanMd="12">
                                                                                                <Items>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Clinic Visit Types">
                                                                                                         <DxComboBox  ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true" Data="@ClinicVisitTypes"
                                                                                                                    NullText="Select Clinic Visit Type..."
                                                                                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                                                                                    @bind-Value="@GeneralConsultantClinical.ClinicVisitTypes">
                                                                                                        </DxComboBox>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Awareness">
                                                                                                         <DxComboBox ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true" Data="@Awareness"
                                                                                                                    NullText="Select Awareness..."
                                                                                                                    TextFieldName="NmSadar"
                                                                                                                    ValueFieldName="Id"
                                                                                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                                                                                    @bind-Value="@GeneralConsultantClinical.AwarenessId">
                                                                                                        </DxComboBox>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Weight">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Weight" NullText="Weight" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Temp">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Temp" NullText="Temp" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Height">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Height" NullText="Height" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption" Caption="HR">
                                                                                                        <Template>
                                                                                                            <DxGridLayout>
                                                                                                                <Rows>
                                                                                                                    <DxGridLayoutRow />
                                                                                                                </Rows>
                                                                                                                <Columns>
                                                                                                                    <DxGridLayoutColumn Width="90%" />
                                                                                                                    <DxGridLayoutColumn Width="30%" />
                                                                                                                </Columns>
                                                                                                                <Items>
                                                                                                                    <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                                                                                        <Template>
                                                                                                                            <DxSpinEdit  ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true"  MinValue="0" @bind-Value="@GeneralConsultantClinical.HR" NullText="HR" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                                                                        <Template>
                                                                                                                            <h6 class="pl-1 pt-2">BPM</h6>
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                </Items>
                                                                                                            </DxGridLayout>

                                                                                                        </Template>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="RR">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.RR" NullText="RR" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Systolic/Diastolic BP">
                                                                                                            <Template>
                                                                                                                <DxGridLayout ColumnSpacing="8px">
                                                                                                                    <Rows>
                                                                                                                        <DxGridLayoutRow/>
                                                                                                                    </Rows>
                                                                                                                    <Columns>
                                                                                                                        <DxGridLayoutColumn />
                                                                                                                        <DxGridLayoutColumn />
                                                                                                                    </Columns>
                                                                                                                    <Items>
                                                                                                                            <DxGridLayoutItem Row="0" Column="0">
                                                                                                                            <Template>
                                                                                                                                <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Systolic" />
                                                                                                                            </Template>
                                                                                                                        </DxGridLayoutItem>
                                                                                                                            <DxGridLayoutItem Row="0" Column="2">
                                                                                                                            <Template>
                                                                                                                                <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.DiastolicBP" />
                                                                                                                            </Template>
                                                                                                                        </DxGridLayoutItem>
                                                                                                                    </Items>
                                                                                                                </DxGridLayout>
                                                                                                            </Template>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="SpO2">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.SpO2" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Pain Scale">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" MaxValue="10" @bind-Value="@GeneralConsultantClinical.PainScale" >
                                                                                                             <Buttons>
                                                                                                                <DxEditorButton IconCssClass="fa-regular fa-face-smile" Click="OnClickPainScalePopUp"/>
                                                                                                            </Buttons>
                                                                                                        </DxSpinEdit>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CssClass="mt-3" CaptionCssClass="normal-caption" Caption="Body Max Index">
                                                                                                        <h3>@GeneralConsultantClinical.BMIIndexString</h3>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CssClass="mt-3" CaptionCssClass="normal-caption" Caption="BMI State">
                                                                                                        <h3>@GeneralConsultantClinical.BMIState</h3>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="text-bold" BeginRow="true" Caption="GCS">
                                                                                                        <p></p>
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" BeginRow="true" Caption="E" ColSpanMd="12">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.E" NullText="E" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="V" ColSpanMd="12">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.V" NullText="V" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="M" ColSpanMd="12">
                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.M" NullText="M" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                    </DxFormLayoutItem>
                                                                                                </Items>
                                                                                            </DxFormLayoutGroup>
                                                                                        </DxFormLayout>
                                                    }
                                                    else if (ActiveTabIndex == 1)
                                                    {
                                                        @* Form  *@
                                                        @if (!FormRegis.StagingStatus.Equals("Finished"))
                                                        {
                                                                                                <DxFormLayout>
                              <DxFormLayoutGroup  Caption="Input CPPT" ColSpanMd="12">
                                  <Items>
                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="User" ColSpanMd="12">
                                          <p>@UserLogin.Name</p>
                                      </DxFormLayoutItem>

                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Subjective" ColSpanMd="12">
                                          <DxTextBox @bind-Text="@FormInputCPPTGeneralConsultan.Subjective" NullText="Subjective"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                      </DxFormLayoutItem>

                                          <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Objective" ColSpanMd="12">
                                          <DxMaskedInput @bind-Value="@FormInputCPPTGeneralConsultan.Objective"
                                                          NullText="Objective"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                              <Buttons>
                                                  <DxEditorButton CssClass="text-bold btn-primary" Text="Get Objectives" Click="OnClickGetObjectives"/>
                                              </Buttons>
                                          </DxMaskedInput>
                                      </DxFormLayoutItem>

                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Planning" ColSpanMd="12">
                                          <DxTextBox @bind-Text="@FormInputCPPTGeneralConsultan.Plan" NullText="Planning"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                      </DxFormLayoutItem>

                                          <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Diagnosis" ColSpanMd="12">
                                              <DxComboBox ShowValidationIcon="true" Data="@DiagnosesTemps"
                                                          NullText="Select Diagnosis..."
                                                          @bind-Value="@FormInputCPPTGeneralConsultan.Diagnosis"
                                                          TextFieldName="NameCode"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                          FilteringMode="@DataGridFilteringMode.Contains"
                                                          ValueFieldName="NameCode">
                                              </DxComboBox>
                                          </DxFormLayoutItem>

                                  </Items>
                              </DxFormLayoutGroup>
                          </DxFormLayout>
                            <div class="ml-2 mt-1 mb-2 mr-3">
                                                                                                <div class="row justify-content-end">
                                                                                                    <div class="col-auto align-self-end">
                                                                                                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                                                                    Text="Confirm"
                                                                                                                    Click="OnClickConfirmCPPT"
                                                                                                                    RenderStyle="ButtonRenderStyle.Primary"
                                                                                                                    IconCssClass="fa-solid fa-floppy-disk"
                                                                                                                    CssClass="w-20 ml" />
                                                                                                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                                                                    Text="Clear"
                                                                                                                    RenderStyle="ButtonRenderStyle.Danger"
                                                                                                                    Click="OnClickCancelConfirmCPPT"
                                                                                                                    IconCssClass="fa-solid fa-xmark"
                                                                                                                    CssClass="w-20 ml" />
                                                                                                    </div>
                                                                                                </div>
                                                                                            </div>
                                                        }

                                                                                        <DxFormLayout>
                                                                                            <DxFormLayoutGroup Caption="CPPT" ColSpanMd="12">
                                                                                                <Items>
                                                                                                    <DxLoadingPanel @bind-Visible="PanelVisible"
                                                                                                                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                                                                                                    IsContentBlocked="true"
                                                                                                                    ApplyBackgroundShading="true"
                                                                                                                    IndicatorAreaVisible="false"
                                                                                                                    Text="Fetching Data...">
                                                                                                        <DxGrid @ref="GridTabCPPT" PagerNavigationMode="PagerNavigationMode.InputBox"
                                                                                                                Data="GeneralConsultanCPPTs"
                                                                                                                PageSize="12"
                                                                                                                @bind-SelectedDataItems="@SelectedDataItemsCPPT"
                                                                                                                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                                                                                                CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                                                                                                                EditModelSaving="OnClickConfirmCPPT"
                                                                                                                DataItemDeleting="OnDeleteTabCPPTConfirm"
                                                                                                                AllowSelectRowByClick="true"
                                                                                                                EditMode="GridEditMode.PopupEditForm"
                                                                                                                PopupEditFormCssClass="pw-800"
                                                                                                                PagerPosition="GridPagerPosition.Bottom"
                                                                                                                PageSizeSelectorVisible="true"
                                                                                                                CustomizeElement="Grid_CustomizeElementCPPT"
                                                                                                                PageSizeSelectorItems="@(new int[] { 12, 24, 68, 100 })"
                                                                                                                PageSizeSelectorAllRowsItemVisible="true"
                                                                                                                PagerSwitchToInputBoxButtonCount="10"
                                                                                                                FocusedRowChanged="GridTabCPPT_FocusedRowChanged"
                                                                                                                FocusedRowEnabled="true"
                                                                                                                PagerVisibleNumericButtonCount="10"
                                                                                                                AutoExpandAllGroupRows="true"
                                                                                                                ShowSearchBox="true"
                                                                                                                KeyboardNavigationEnabled="true">
                                                                                                            <Columns>
                                                                                                                <DxGridDataColumn FieldName="Title"  />
                                                                                                                <DxGridDataColumn FieldName="Body" />
                                                                                                                <DxGridCommandColumn NewButtonVisible="false" EditButtonVisible="false" Width="160px" />
                                                                                                            </Columns>
                                                                                                        </DxGrid>
                                                                                                    </DxLoadingPanel>
                                                                                                </Items>
                                                                                            </DxFormLayoutGroup>
                                                                                        </DxFormLayout>
                                                    }
                                                    else if (ActiveTabIndex == 2 && (FormRegis.StagingStatus.Equals("Physician") || FormRegis.StagingStatus.Equals("Procedure Room") || FormRegis.StagingStatus.Equals("Finished")))
                                                    {
                                                        <div class="w-100">
                                                            <div class="col-md-6">
                                                                <DxFormLayout CssClass="w-100">
                                                                    <DxFormLayoutItem Caption="Home Status" CaptionCssClass="normal-caption" ColSpanMd="12">
                                                                          <DxComboBox ShowValidationIcon="true" Data="@_homeStatusTemps"
                                                                                      NullText="Home Status..."
                                                                                       ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"
                                                                                      @bind-Value="@FormRegis.HomeStatus"
                                                                                      TextFieldName="Name"
                                                                                      ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                                      FilteringMode="@DataGridFilteringMode.Contains"
                                                                                      ValueFieldName="Code">
                                                                          </DxComboBox>
                                                                    </DxFormLayoutItem>
                                                                </DxFormLayout>
                                                            </div>
                                                            <div class="col-md-6">

                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                                                        <DxFormLayout>
                                                                                        <DxFormLayoutGroup ColSpanMd="12" Caption="Lab Result">
                                                                                            <Items>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                                                                                                    <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.LabEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                                                                                                    <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.LabEximinationAttachment"
                                                                                                        ShowValidationIcon="true"
                                                                                                        ReadOnly="true"
                                                                                                        MaskMode="MaskMode.RegEx">
                                                                                                        <Buttons>
                                                                                                            <InputFile id="labFile" OnChange="@SelectFilesLab" multiple="false" style="display:none" />
                                                                                                            <DxEditorButton Click="SelectFileLab" IconCssClass="fa-solid fa-upload" />
                                                                                                            <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.LabEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                                                                                            <DxEditorButton Click="RemoveSelectedFileLab" IconCssClass="fa-solid fa-trash" />
                                                                                                        </Buttons>
                                                                                                    </DxMaskedInput>
                                                                                                </DxFormLayoutItem>
                                                                                            </Items>
                                                                                        </DxFormLayoutGroup>

                                                                                        <DxFormLayoutGroup ColSpanMd="12" Caption="Radiology Result">
                                                                                            <Items>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                                                                                                    <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.RadiologyEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                                                                                                    <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.RadiologyEximinationAttachment"
                                                                                                        ShowValidationIcon="true"
                                                                                                        ReadOnly="true"
                                                                                                        MaskMode="MaskMode.RegEx">
                                                                                                        <Buttons>
                                                                                                            <InputFile id="radiologyFile" OnChange="@SelectFilesRadiology" multiple="false" style="display:none" />
                                                                                                            <DxEditorButton Click="SelectFileRadiology" IconCssClass="fa-solid fa-upload" />
                                                                                                            <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.RadiologyEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                                                                                            <DxEditorButton Click="RemoveSelectedFileRadiology" IconCssClass="fa-solid fa-trash" />
                                                                                                        </Buttons>
                                                                                                    </DxMaskedInput>
                                                                                                </DxFormLayoutItem>
                                                                                            </Items>
                                                                                        </DxFormLayoutGroup>

                                                                                        <DxFormLayoutGroup ColSpanMd="12" Caption="Alcohol Result">
                                                                                            <Items>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                                                                                                    <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.AlcoholEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                                                                                                        <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.AlcoholEximinationAttachment"
                                                                                                        ShowValidationIcon="true"
                                                                                                        ReadOnly="true"
                                                                                                        MaskMode="MaskMode.RegEx">
                                                                                                        <Buttons>
                                                                                                            <InputFile id="alcoholFile" OnChange="@SelectFilesAlcohol" multiple="false" style="display:none" />
                                                                                                            <DxEditorButton Click="SelectFileAlcohol" IconCssClass="fa-solid fa-upload" />
                                                                                                            <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.AlcoholEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                                                                                            <DxEditorButton Click="RemoveSelectedFileAlcohol" IconCssClass="fa-solid fa-trash" />
                                                                                                        </Buttons>
                                                                                                    </DxMaskedInput>
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Negative">
                                                                                                    <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AlcoholNegative" />
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Positive">
                                                                                                    <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AlcoholPositive" />
                                                                                                </DxFormLayoutItem>
                                                                                            </Items>
                                                                                        </DxFormLayoutGroup>

                                                                                        <DxFormLayoutGroup ColSpanMd="12" Caption="Drug Result">
                                                                                            <Items>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                                                                                                    <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.DrugEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                </DxFormLayoutItem>
                                                                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                                                                                                <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.DrugEximinationAttachment"
                                                                                                        ShowValidationIcon="true"
                                                                                                        ReadOnly="true"
                                                                                                        MaskMode="MaskMode.RegEx">
                                                                                                        <Buttons>
                                                                                                            <InputFile id="drugFile" OnChange="@SelectFilesDrug" multiple="false" style="display:none" />
                                                                                                            <DxEditorButton Click="SelectFileDrug" IconCssClass="fa-solid fa-upload" />
                                                                                                            <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.DrugEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                                                                                            <DxEditorButton Click="RemoveSelectedFileDrug" IconCssClass="fa-solid fa-trash" />
                                                                                                        </Buttons>
                                                                                                    </DxMaskedInput>
                                                                                                </DxFormLayoutItem>
                                                                    @*    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Negative">
                                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.DrugNegative" />
                                                            </DxFormLayoutItem>
                                                            <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Positive">
                                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.DrugPositive" />
                                                            </DxFormLayoutItem> *@
                                                                                                   <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption" Caption="Amphetamines" ColSpanMd="12">
                                                                                                        <Template>
                                                                                                            <DxGridLayout>
                                                                                                                <Rows>
                                                                                                                    <DxGridLayoutRow />
                                                                                                                    <DxGridLayoutRow />
                                                                                                                    <DxGridLayoutRow />
                                                                                                                    <DxGridLayoutRow />
                                                                                                                    <DxGridLayoutRow />
                                                                                                                </Rows>
                                                                                                                <Columns>
                                                                                                                    <DxGridLayoutColumn Width="90%" />
                                                                                                                    <DxGridLayoutColumn Width="30%" />
                                                                                                                </Columns>
                                                                                                                <Items>
                                                                                                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                                                                        <Template>
                                                                                                                            <h6 class="pl-1 pt-2">Positive</h6>
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                     <DxGridLayoutItem Row="1" Column="0" CssClass="mt">
                                                                                                                        <Template>
                                                                                                                             <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AmphetaminesPositive" />
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                      <DxGridLayoutItem Row="2" Column="1" CssClass="mt ml">
                                                                                                                        <Template>
                                                                                                                            <h6 class="pl-1 pt-2">Negative</h6>
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                      <DxGridLayoutItem Row="3" Column="0" CssClass="mt">
                                                                                                                        <Template>
                                                                                                                             <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AmphetaminesNegative" />
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                    <DxGridLayoutItem Row="4" Column="0" CssClass="mt">
                                                                                                                        <Template>
                                                                                                                            <DxSpinEdit ShowValidationIcon="true"  MinValue="0" @bind-Value="@GeneralConsultanMedicalSupport.HR" NullText="Amphetamines" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                        </Template>
                                                                                                                    </DxGridLayoutItem>
                                                                                                                </Items>
                                                                                                            </DxGridLayout>

                                                                                                        </Template>
                                                                                                    </DxFormLayoutItem>
                                                                                            </Items>
                                                                                        </DxFormLayoutGroup>
                                                                                    </DxFormLayout>
                                                    }
                                                }

                                                else if (FormRegis.StagingStatus.Equals("Nurse Station") || FormRegis.StagingStatus.Equals("Finished"))
                                                {
                                                    @if (ActiveTabIndex == 0)
                                                    {
                                                                                                                                                                                                                        <DxFormLayout>
                                                                                                                                                                                                                            <DxFormLayoutGroup ReadOnly="true" Caption="Clinical Assessment" ColSpanMd="12">
                                                                                                                                                                                                                                <Items>

                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Clinic Visit Types">
                                                                                                                                                                                                                                            <DxComboBox  ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true" Data="@ClinicVisitTypes"
                                                                                                                                                                                                                                                    NullText="Select Clinic Visit Type..."
                                                                                                                                                                                                                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                                                                                                                                                                                                                    @bind-Value="@GeneralConsultantClinical.ClinicVisitTypes">
                                                                                                                                                                                                                                        </DxComboBox>
                                                                                                                                                                                                                                    </DxFormLayoutItem>

                                                                                                   <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Awareness">
                                                                                                         <DxComboBox ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true" Data="@Awareness"
                                                                                                                    NullText="Select Awareness..."
                                                                                                                    TextFieldName="NmSadar"
                                                                                                                    ValueFieldName="Id"
                                                                                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                                                                                    @bind-Value="@GeneralConsultantClinical.AwarenessId">
                                                                                                        </DxComboBox>
                                                                                                    </DxFormLayoutItem>

                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Weight">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Weight" NullText="Weight" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Temp">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Temp" NullText="Temp" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Height">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Height" NullText="Height" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption" Caption="HR">
                                                                                                                                                                                                                                        <Template>
                                                                                                                                                                                                                                            <DxGridLayout>
                                                                                                                                                                                                                                                <Rows>
                                                                                                                                                                                                                                                    <DxGridLayoutRow />
                                                                                                                                                                                                                                                </Rows>
                                                                                                                                                                                                                                                <Columns>
                                                                                                                                                                                                                                                    <DxGridLayoutColumn Width="90%" />
                                                                                                                                                                                                                                                    <DxGridLayoutColumn Width="30%" />
                                                                                                                                                                                                                                                </Columns>
                                                                                                                                                                                                                                                <Items>
                                                                                                                                                                                                                                                    <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                                                                                                                                                                                                                        <Template>
                                                                                                                                                                                                                                                            <DxSpinEdit  ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))"   ShowValidationIcon="true"  MinValue="0" @bind-Value="@GeneralConsultantClinical.HR" NullText="HR" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                                        </Template>
                                                                                                                                                                                                                                                    </DxGridLayoutItem>
                                                                                                                                                                                                                                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                                                                                                                                                                                                                        <Template>
                                                                                                                                                                                                                                                            <h6 class="pl-1 pt-2">BPM</h6>
                                                                                                                                                                                                                                                        </Template>
                                                                                                                                                                                                                                                    </DxGridLayoutItem>
                                                                                                                                                                                                                                                </Items>
                                                                                                                                                                                                                                            </DxGridLayout>

                                                                                                                                                                                                                                        </Template>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="RR">
                                                                                                                                                                                                                                        <DxSpinEdit ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.RR" NullText="RR" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Systolic/Diastolic BP">
                                                                                                                                                                                                                                            <Template>
                                                                                                                                                                                                                                                <DxGridLayout>
                                                                                                                                                                                                                                                    <Rows>
                                                                                                                                                                                                                                                        <DxGridLayoutRow />
                                                                                                                                                                                                                                                    </Rows>
                                                                                                                                                                                                                                                    <Columns>
                                                                                                                                                                                                                                                        <DxGridLayoutColumn />
                                                                                                                                                                                                                                                        <DxGridLayoutColumn />
                                                                                                                                                                                                                                                    </Columns>
                                                                                                                                                                                                                                                    <Items>
                                                                                                                                                                                                                                                            <DxGridLayoutItem Row="0" Column="0">
                                                                                                                                                                                                                                                            <Template>
                                                                                                                                                                                                                                                                <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.Systolic" />
                                                                                                                                                                                                                                                            </Template>
                                                                                                                                                                                                                                                        </DxGridLayoutItem>
                                                                                                                                                                                                                                                            <DxGridLayoutItem Row="0" Column="2" CssClass="ml">
                                                                                                                                                                                                                                                            <Template>
                                                                                                                                                                                                                                                                <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.DiastolicBP" />
                                                                                                                                                                                                                                                            </Template>
                                                                                                                                                                                                                                                        </DxGridLayoutItem>
                                                                                                                                                                                                                                                    </Items>
                                                                                                                                                                                                                                                </DxGridLayout>
                                                                                                                                                                                                                                            </Template>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="SpO2">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.SpO2" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Pain Scale">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" MaxValue="10" @bind-Value="@GeneralConsultantClinical.PainScale">
                                                                                                                                                                                                                                             <Buttons>
                                                                                                                                                                                                                                                <DxEditorButton IconCssClass="fa-regular fa-face-smile" Click="OnClickPainScalePopUp"/>
                                                                                                                                                                                                                                            </Buttons>
                                                                                                                                                                                                                                        </DxSpinEdit>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CssClass="mt-3" CaptionCssClass="normal-caption" Caption="Body Max Index">
                                                                                                                                                                                                                                        <h3>@GeneralConsultantClinical.BMIIndexString</h3>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CssClass="mt-3" CaptionCssClass="normal-caption" Caption="BMI State">
                                                                                                                                                                                                                                        <h3>@GeneralConsultantClinical.BMIState</h3>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="text-bold" BeginRow="true" Caption="GCS">
                                                                                                                                                                                                                                        <p></p>
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" BeginRow="true" Caption="E" ColSpanMd="12">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.E" NullText="E" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="V" ColSpanMd="12">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.V" NullText="V" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="M" ColSpanMd="12">
                                                                                                                                                                                                                                        <DxSpinEdit ReadOnly="@(FormRegis.StagingStatus.Equals("Finished"))" ShowValidationIcon="true"MinValue="0" @bind-Value="@GeneralConsultantClinical.M" NullText="M" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                                                                                                                                                                                                                    </DxFormLayoutItem>
                                                                                                                                                                                                                                </Items>
                                                                                                                                                                                                                            </DxFormLayoutGroup>
                                                                                                                                                                                                                        </DxFormLayout>
                                                    }

                                                    @if (ActiveTabIndex == 1)
                                                    {
                                                                                                                                                                                                                        <EditForm Model="@FormInputCPPTGeneralConsultan" Context="EditFormContext2" OnValidSubmit="@HandleValidSubmitCPPT"
                                                                                                                                                                                                                                    OnInvalidSubmit="@HandleInvalidSubmitCPPT">
                                                                                                                                                                                                                            <DataAnnotationsValidator />
                                                            @* Form HAHA  *@
                                                            @if (!FormRegis.StagingStatus.Equals("Finished"))
                                                            {
                                                                                                <DxFormLayout>
                              <DxFormLayoutGroup  Caption="Input CPPT" ColSpanMd="12">
                                  <Items>
                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="User" ColSpanMd="12">
                                          <p>@UserLogin.Name</p>
                                      </DxFormLayoutItem>

                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Subjective" ColSpanMd="12">
                                          <DxTextBox @bind-Text="@FormInputCPPTGeneralConsultan.Subjective" NullText="Subjective"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                      </DxFormLayoutItem>

                                          <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Objective" ColSpanMd="12">
                                          <DxMaskedInput @bind-Value="@FormInputCPPTGeneralConsultan.Objective"
                                                          NullText="Objective"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto">
                                              <Buttons>
                                                  <DxEditorButton CssClass="text-bold btn-primary" Text="Get Objectives" Click="OnClickGetObjectives"/>
                                              </Buttons>
                                          </DxMaskedInput>
                                      </DxFormLayoutItem>

                                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Planning" ColSpanMd="12">
                                          <DxTextBox @bind-Text="@FormInputCPPTGeneralConsultan.Plan" NullText="Planning"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                      </DxFormLayoutItem>

                                          <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Diagnosis" ColSpanMd="12">
                                              <DxComboBox ShowValidationIcon="true" Data="@DiagnosesTemps"
                                                          NullText="Select Diagnosis..."
                                                          @bind-Value="@FormInputCPPTGeneralConsultan.Diagnosis"
                                                          TextFieldName="NameCode"
                                                          ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                          FilteringMode="@DataGridFilteringMode.Contains"
                                                          ValueFieldName="NameCode">
                                              </DxComboBox>
                                          </DxFormLayoutItem>

                                  </Items>
                              </DxFormLayoutGroup>
                          </DxFormLayout>
                             <div class="ml-2 mt-1 mb-2 mr-3">
                                                                                                                                                                                                                                <div class="row justify-content-end">
                                                                                                                                                                                                                                    <div class="col-auto align-self-end">
                                                                                                                                                                                                                                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                                                                                                                                                                                                    Text="Confirm"
                                                                                                                                                                                                                                                    SubmitFormOnClick="true"
                                                                                                                                                                                                                                                    RenderStyle="ButtonRenderStyle.Info"
                                                                                                                                                                                                                                                    IconCssClass="fa-solid fa-floppy-disk"
                                                                                                                                                                                                                                                    CssClass="w-20 ml" />
                                                                                                                                                                                                                                        <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline"
                                                                                                                                                                                                                                                    Text="Clear"
                                                                                                                                                                                                                                                    RenderStyle="ButtonRenderStyle.Danger"
                                                                                                                                                                                                                                                    Click="OnClickCancelConfirmCPPT"
                                                                                                                                                                                                                                                    IconCssClass="fa-solid fa-xmark"
                                                                                                                                                                                                                                                    CssClass="w-20 ml" />
                                                                                                                                                                                                                                    </div>
                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                            </div>
                                                            }

                                                                                                                                                                                                                        </EditForm>

                                                                                                                                                                                                                        <DxFormLayout>
                                                                                                                                                                                                                            <DxFormLayoutGroup Caption="CPPT" ColSpanMd="12">
                                                                                                                                                                                                                                <Items>
                                                                                                                                                                                                                                    <DxLoadingPanel @bind-Visible="PanelVisible"
                                                                                                                                                                                                                                                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                                                                                                                                                                                                                                    IsContentBlocked="true"
                                                                                                                                                                                                                                                    ApplyBackgroundShading="true"
                                                                                                                                                                                                                                                    IndicatorAreaVisible="false"
                                                                                                                                                                                                                                                    Text="Fetching Data...">
                                                                                                                                                                                                                                        <DxGrid @ref="GridTabCPPT" PagerNavigationMode="PagerNavigationMode.InputBox"
                                                                                                                                                                                                                                                Data="GeneralConsultanCPPTs"
                                                                                                                                                                                                                                                PageSize="10"
                                                                                                                                                                                                                                                @bind-SelectedDataItems="@SelectedDataItemsCPPT"
                                                                                                                                                                                                                                                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                                                                                                                                                                                                                                CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                                                                                                                                                                                                                                                EditModelSaving="OnClickConfirmCPPT"
                                                                                                                                                                                                                                                DataItemDeleting="OnDeleteTabCPPTConfirm"
                                                                                                                                                                                                                                                AllowSelectRowByClick="true"
                                                                                                                                                                                                                                                EditMode="GridEditMode.PopupEditForm"
                                                                                                                                                                                                                                                PopupEditFormCssClass="pw-800"
                                                                                                                                                                                                                                                PagerPosition="GridPagerPosition.Bottom"
                                                                                                                                                                                                                                                PageSizeSelectorVisible="true"
                                                                                                                                                                                                                                                PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                                                                                                                                                                                                                                                PageSizeSelectorAllRowsItemVisible="true"
                                                                                                                                                                                                                                                PagerSwitchToInputBoxButtonCount="10"
                                                                                                                                                                                                                                                FocusedRowChanged="GridTabCPPT_FocusedRowChanged"
                                                                                                                                                                                                                                                FocusedRowEnabled="true"
                                                                                                                                                                                                                                                PagerVisibleNumericButtonCount="10"
                                                                                                                                                                                                                                                AutoExpandAllGroupRows="true"
                                                                                                                                                                                                                                                ShowSearchBox="true"
                                                                                                                                                                                                                                                KeyboardNavigationEnabled="true">
                                                                                                                                                                                                                                            <Columns>
                                                                                                                                                                                                                                                <DxGridDataColumn FieldName="Title"  />
                                                                                                                                                                                                                                                <DxGridDataColumn FieldName="Body" />
                                                                                                                                                                                                                                                <DxGridCommandColumn NewButtonVisible="false" EditButtonVisible="false" Width="160px" />
                                                                                                                                                                                                                                            </Columns>
                                                                                                                                                                                                                                        </DxGrid>
                                                                                                                                                                                                                                    </DxLoadingPanel>
                                                                                                                                                                                                                                </Items>
                                                                                                                                                                                                                            </DxFormLayoutGroup>
                                                                                                                                                                                                                        </DxFormLayout>
                                                    }
                                                }
                                                                                                            </div>
                                                            </div>
        </DxLoadingPanel>

                                        @if (!FormRegis.StagingStatus.Equals("Waiting") && !FormRegis.StagingStatus.Equals("Confirmed") && !FormRegis.StagingStatus.Equals("Finished") && !FormRegis.StagingStatus.Equals("Canceled"))
                                        {
                                                                                                            <div class="card-footer">
                                                                                                                <div class="row  justify-content-end">
                                                                                                                    <div class="col-auto align-self-end">
                                                                                                                        <DxButton Enabled="!IsLoading" RenderStyle="ButtonRenderStyle.Primary" RenderStyleMode="@ButtonRenderStyleMode.Contained" IconCssClass="fa-solid fa-floppy-disk" Text="Save" SubmitFormOnClick="true">

                                                                                                                        </DxButton>
                                                                                                                        <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Contained" IconCssClass="fa-solid fa-xmark" Text="Discard" SubmitFormOnClick="true" Click="OnCancel"></DxButton>
                                                                                                                    </div>
                                                                                                                </div>
                                                                                                            </div>
                                        }
                                                    </div>
                                                </EditForm>
                            }
                        }
                            </div>
                        </div>
                    </div>
                </section>
            </div>
}
else
{
    <div class="wrapper">
        <section class="content-header">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-sm-6">
                        <h1>General Consultation Service</h1>
                    </div>
                    <div class="col-sm-6">
                        <ol class="breadcrumb float-sm-right">
                            <li class="breadcrumb-item"><a class="no-underline" href="/">Home</a></li>
                            <li class="breadcrumb-item" @onclick="LoadData"><a class="no-underline" href="/clinic-service/general-consultation-service">General Consultan Service</a></li>
                        </ol>
                    </div>
                </div>
            </div>
        </section>

        <LoadingIndicatorLayout></LoadingIndicatorLayout>
    </div>
}

<DxPopup HeaderText="Refer To" @bind-Visible="@PopUpVisible" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" CloseButtonClick="CloseReferTo" Width="90%">
    <EditForm Model="@FormRegis" Context="EditFormContext2" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
            <DxFormLayout>
                   <DxFormLayout>
                            <DxFormLayoutGroup Caption="General" ColSpanMd="12">
                                <div class="row">

                            <div class="col-md-12">
                                <DxFormLayout  Enabled="false" CssClass="mt ">
                                    <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption normal-caption" Caption="Patient" ColSpanMd="12">
                                        <DxComboBox ReadOnly
                                                    ShowValidationIcon="true"
                                                    Data="@patients"
                                                    NullText="Select Patient..."
                                                    @bind-Value="@FormRegis.PatientId"
                                                    TextFieldName="Name"
                                                    SelectedItemChanged="@((UserDto e) => SelectedItemPatientChanged(e))"
                                                    ValueFieldName="Id">
                                        </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.PatientId)" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@FormRegis.NoRM" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@FormRegis.IdentityNumber" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                                        <Template>
                                            <DxGridLayout>
                                                <Rows>
                                                    <DxGridLayoutRow />
                                                </Rows>
                                                <Columns>
                                                    <DxGridLayoutColumn Width="90%" />
                                                    <DxGridLayoutColumn Width="30%" />
                                                </Columns>
                                                <Items>
                                                    <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                        <Template>
                                                            <DxSpinEdit ShowValidationIcon="true"MinValue="0" @bind-Value="@FormRegis.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                                        </Template>
                                                    </DxGridLayoutItem>
                                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                        <Template>
                                                            <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                                        </Template>
                                                    </DxGridLayoutItem>
                                                </Items>
                                            </DxGridLayout>

                                        </Template>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                                            <DxComboBox
                                                        Data="@RegisType"
                                                        NullText="Select Registration..."
                                                        AllowUserInput="true"
                                                        ShowValidationIcon="true"
                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                        SelectedItemChanged="@((string city) => SelectedItemChanged(city))"
                                                        @bind-Value="@FormRegis.TypeRegistration">
                                            </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.TypeRegistration)" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Visible="@(!string.IsNullOrWhiteSpace(FormRegis.TypeRegistration) && !FormRegis.TypeRegistration.Equals("General Consultation"))"
                                                CaptionCssClass="required-caption normal-caption"
                                                Caption="Medical Type" ColSpanMd="12">
                                        <DxComboBox   ShowValidationIcon="true" Data="@Method"
                                                    NullText="Select Method..."
                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                    @bind-Value="@FormRegis.TypeMedical">
                                        </DxComboBox>
                                    </DxFormLayoutItem>

                                        <DxFormLayoutItem  CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                            <DxCheckBox   @bind-Checked="@FormRegis.IsAlertInformationSpecialCase" />
                                        </DxFormLayoutItem>
                                </DxFormLayout>
                            </div> 
                        </div>
                        </DxFormLayoutGroup>
                        </DxFormLayout>
            </DxFormLayout>
            <div class="row justify-content-end">
                <div class="col-auto align-self-end">
                    <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Submit" SubmitFormOnClick="true"  ></DxButton>
                    <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Discard" Click="OnCancelReferTo"></DxButton>
                </div>
            </div>
    </EditForm>
</DxPopup>

<DxPopup HeaderText="Historical Medical Record Patient" @bind-Visible="@PopUpHistoricalMedical" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" Width="90%">
     <DxLoadingPanel @bind-Visible="PanelVisible"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Fetching Data...">
            <DxGrid @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
                    Data="GeneralConsultanServices.Where(x => x.PatientId == FormRegis.PatientId).OrderBy(x => x.RegistrationDate)"
                    PageSize="10"
                    @bind-SelectedDataItems="@SelectedDataItems"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                    KeyFieldName="Id"
                    TextWrapEnabled="false"
                    CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                    EditMode="GridEditMode.PopupEditForm"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    PagerSwitchToInputBoxButtonCount="10"
                    AllowSelectRowByClick="true"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    FocusedRowEnabled="true"
                    PagerVisibleNumericButtonCount="10"
                    ShowGroupPanel="true"
                    ShowFilterRow="true"
                    CustomizeElement="Grid_CustomizeElement"
                    ShowSearchBox="true"
                    SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                    KeyboardNavigationEnabled="true">
                <Columns>
                    <DxGridDataColumn FieldName="RegistrationDate" DisplayFormat="ddd, dd MMM yyyy" Caption="Registration Date"/>
                    <DxGridDataColumn FieldName="Patient.Name" Caption="Patient" />
                    <DxGridDataColumn FieldName="Payment" Caption="Payment Methode" />
                    <DxGridDataColumn FieldName="Pratitioner.Name" Caption="Doctor" />
                    <DxGridDataColumn FieldName="Service.Name" Caption="Service" />
                    <DxGridDataColumn FieldName="StagingStatus" Caption="Status" />
                    <DxGridDataColumn FieldName="AppoimentDate" Caption="Appoiment" />
                    <DxGridDataColumn FieldName="IsAlertInformationSpecialCase" Caption="Special Case">
                        <CellDisplayTemplate>
                        @GetIssuePriorityIconHtml((context.DataItem as GeneralConsultanServiceDto))
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="StagingStatus"/>
                </GroupSummary>
            </DxGrid>
        </DxLoadingPanel>
</DxPopup>

<DxPopup HeaderText="Appointment pending in patient alert" @bind-Visible="@PopUpAppoimentPending" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" Width="90%">
     <DxLoadingPanel @bind-Visible="PanelVisible"
                        IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                        IsContentBlocked="true"
                        ApplyBackgroundShading="true"
                        IndicatorAreaVisible="false"
                        Text="Fetching Data...">
            <DxGrid @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
                    Data="@(GeneralConsultanServices.Where(x => x.PatientId == FormRegis.PatientId && x.StagingStatus.Equals("Planned")).OrderBy(x => x.RegistrationDate))"
                    PageSize="10"
                    @bind-SelectedDataItems="@SelectedDataItems"
                    FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                    KeyFieldName="Id"
                    TextWrapEnabled="false"
                    CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                    EditMode="GridEditMode.PopupEditForm"
                    PagerPosition="GridPagerPosition.Bottom"
                    PageSizeSelectorVisible="true"
                    PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                    PageSizeSelectorAllRowsItemVisible="true"
                    PagerSwitchToInputBoxButtonCount="10"
                    AllowSelectRowByClick="true"
                    ColumnResizeMode="GridColumnResizeMode.ColumnsContainer"
                    FocusedRowEnabled="true"
                    PagerVisibleNumericButtonCount="10"
                    ShowGroupPanel="true"
                    ShowFilterRow="true"
                    CustomizeElement="Grid_CustomizeElement"
                    ShowSearchBox="true"
                    SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                    KeyboardNavigationEnabled="true">
                <Columns>
                    <DxGridDataColumn FieldName="RegistrationDate" DisplayFormat="ddd, dd MMM yyyy" Caption="Registration Date"/>
                    <DxGridDataColumn FieldName="Patient.Name" Caption="Patient" />
                    <DxGridDataColumn FieldName="Payment" Caption="Payment Methode" />
                    <DxGridDataColumn FieldName="Pratitioner.Name" Caption="Doctor" />
                    <DxGridDataColumn FieldName="Service.Name" Caption="Service" />
                    <DxGridDataColumn FieldName="StagingStatus" Caption="Status" />
                    <DxGridDataColumn FieldName="AppoimentDate" Caption="Appoiment" />
                    <DxGridDataColumn FieldName="IsAlertInformationSpecialCase" Caption="Special Case">
                        <CellDisplayTemplate>
                        @GetIssuePriorityIconHtml((context.DataItem as GeneralConsultanServiceDto))
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="StagingStatus"/>
                </GroupSummary>
            </DxGrid>
        </DxLoadingPanel>
</DxPopup>
<DxPopup HeaderText="Follow Up" @bind-Visible="@PopUpAppoiment" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" Closed="CloseAppoimentPopUp" Width="90%">
    <EditForm Model="@FormRegis" Context="EditFormContext2" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
            <DxFormLayout>
                   <DxFormLayout>
                        <DxFormLayoutGroup Caption="General" ColSpanMd="12">
                            <div class="row">
                                <div class="col-md-6">
                                    <DxFormLayout  Enabled="false" CssClass="mt ">
                                        <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption normal-caption" Caption="Patient" ColSpanMd="12">
                                            <DxComboBox
                                                        ShowValidationIcon="true"
                                                        Data="@patients"
                                                        NullText="Select Patient..."
                                                        @bind-Value="@FormRegis.PatientId"
                                                        TextFieldName="Name"
                                                        SelectedItemChanged="@((UserDto e) => SelectedItemPatientChanged(e))"
                                                        ValueFieldName="Id">
                                            </DxComboBox>
                                                <ValidationMessage For="@(() => FormRegis.PatientId)" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                            <DxTextBox @bind-Text="@FormRegis.NoRM" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                                            <DxTextBox @bind-Text="@FormRegis.IdentityNumber" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                                            <Template>
                                                <DxGridLayout>
                                                    <Rows>
                                                        <DxGridLayoutRow />
                                                    </Rows>
                                                    <Columns>
                                                        <DxGridLayoutColumn Width="90%" />
                                                        <DxGridLayoutColumn Width="30%" />
                                                    </Columns>
                                                    <Items>
                                                        <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                            <Template>
                                                                <DxSpinEdit ShowValidationIcon="true"MinValue="0" @bind-Value="@FormRegis.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                                            </Template>
                                                        </DxGridLayoutItem>
                                                        <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                            <Template>
                                                                <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                                            </Template>
                                                        </DxGridLayoutItem>
                                                    </Items>
                                                </DxGridLayout>

                                            </Template>
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                                                <DxComboBox
                                                            Data="@RegisType"
                                                            NullText="Select Registration..."
                                                            AllowUserInput="true"
                                                            ShowValidationIcon="true"
                                                            ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                            FilteringMode="@DataGridFilteringMode.Contains"
                                                            SelectedItemChanged="@((string city) => SelectedItemChanged(city))"
                                                            @bind-Value="@FormRegis.TypeRegistration">
                                                </DxComboBox>
                                                <ValidationMessage For="@(() => FormRegis.TypeRegistration)" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem Visible="@(!string.IsNullOrWhiteSpace(FormRegis.TypeRegistration) && !FormRegis.TypeRegistration.Equals("General Consultation"))"
                                                    CaptionCssClass="required-caption normal-caption"
                                                    Caption="Medical Type" ColSpanMd="12">
                                            <DxComboBox   ShowValidationIcon="true" Data="@Method"
                                                        NullText="Select Method..."
                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                        @bind-Value="@FormRegis.TypeMedical">
                                            </DxComboBox>
                                        </DxFormLayoutItem>

                                            <DxFormLayoutItem  CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                                <DxCheckBox   @bind-Checked="@FormRegis.IsAlertInformationSpecialCase" />
                                            </DxFormLayoutItem>
                                    </DxFormLayout>
                                </div>
                                <div class="col-md-6">
                                    <DxFormLayout CssClass="mt ">
                                        <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Service" ColSpanMd="12">
                                            <DxComboBox ShowValidationIcon="true"
                                                        Data="@Services"
                                                        NullText="Select Service.."
                                                        SelectedItemChanged="@((ServiceDto e) => SelectedItemServiceChanged(e))"
                                                        @bind-Value="@FormRegis.ServiceId"
                                                        TextFieldName="Name"
                                                        ValueFieldName="Id">
                                            </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.ServiceId)" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Physicion" ColSpanMd="12">
                                            <DxComboBox ShowValidationIcon="true" Data="@IsPratition"
                                                        NullText="Select Physicion..."
                                                        @bind-Value="@FormRegis.PratitionerId"
                                                        TextFieldName="Name"
                                                        ValueFieldName="Id"
                                                        SelectedItemChanged="@((UserDto e) => SelectedItemPhysicianChanged(e))"
                                                        InputId="CbDoctoreName">
                                            </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.PratitionerId)" />
                                        </DxFormLayoutItem>
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Payment Methode" ColSpanMd="12">
                                            <DxComboBox ShowValidationIcon="true" Data="@Payments"
                                                        NullText="Payment Method.."
                                                        SelectedItemChanged="@((string e) => SelectedItemPaymentChanged(e))"
                                                        @bind-Value="@FormRegis.Payment">
                                            </DxComboBox>
                                                <ValidationMessage For="@(() => FormRegis.Payment)" />
                                        </DxFormLayoutItem>
                                    @if (FormRegis.Payment == "Insurance" || FormRegis.Payment == "BPJS")
                                    {
                                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption=" " ColSpanMd="12">
                                                        <DxComboBox ShowValidationIcon="true"
                                                            TextFieldName="ConcatInsurancePolicy"
                                                            ValueFieldName="InsurancePolicyId"
                                                            Data="@Temps"
                                                            @bind-Value="@FormRegis.InsurancePolicyId"
                                                            NullText="Select Insurance ..">
                                                        </DxComboBox>
                                                        <ValidationMessage For="@(() => FormRegis.InsurancePolicyId)" />
                                                    </DxFormLayoutItem>
                                    }
                                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Follow Up Date" ColSpanMd="12">
                                           <DxDateEdit
                                                    DateChanged="@((DateTime e) => SelectedItemRegistrationDateChanged(e))"
                                                    Date="@FormRegis.RegistrationDate"
                                                    DateExpression="@(() => @FormRegis.RegistrationDate)"
                                                    Mask="@DateTimeMask.ShortDate"
                                                    NullText="Select Registration Date">
                                            </DxDateEdit>
                                        </DxFormLayoutItem> 
                                         <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Follow Up" ColSpanMd="12">
                                           <DxDateEdit
                                                    Enabled="false"
                                                    ShowValidationIcon="true"
                                                    @bind-Date="@FormRegis.RegistrationDate"
                                                    Mask="@DateTimeMask.ShortDate"
                                                    NullText="Select Date">
                                            </DxDateEdit>
                                            <ValidationMessage For="@(() => FormRegis.RegistrationDate)" />
                                        </DxFormLayoutItem>
                                    </DxFormLayout>
                                </div>
                            </div>
                        </DxFormLayoutGroup>
                   </DxFormLayout>
            </DxFormLayout>
            <div class="row justify-content-end">
                <div class="col-auto align-self-end">
                    <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Save" SubmitFormOnClick="true"  ></DxButton>
                    <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Discard" Click="OnCancelAppoimentPopup"></DxButton>
                </div>
            </div>
    </EditForm>
</DxPopup>

<DxPopup HeaderText="Procedure Room" @bind-Visible="@PopUpProcedureRoom" HeaderCssClass="fw-bold" HorizontalAlignment="@DevExpress.Blazor.HorizontalAlignment.Center"
         VerticalAlignment="@DevExpress.Blazor.VerticalAlignment.Center" CloseOnOutsideClick="false" Width="auto">
    @*  <div class="row justify-content-end mb-3">
            <div class="col-auto align-self-end">
                <DxTabs>
                    <DxTab Text="Draft" Enabled="@(GeneralConsultanMedicalSupport.Status == "Draft")"></DxTab>
                    <DxTab Text="In-Progress" Enabled="@(GeneralConsultanMedicalSupport.Status == "In-Progress")"></DxTab>
                    <DxTab Text="Finish" Enabled="@(GeneralConsultanMedicalSupport.Status == "Finish")"></DxTab>
                </DxTabs>
            </div>
        </div> *@
    <EditForm Model="@GeneralConsultanMedicalSupport" Context="EditFormContext2" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutGroup ColSpanMd="12" Caption="Lab Result" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                <Items>

                    <DxFormLayoutItem CaptionCssClass="caption normal-caption" Caption="Practitioner" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true" Data="@AllDoctors.Where(x => x.IsPhysicion == true)"
                                    NullText="Select Practitioner..."
                                    @bind-Value="@GeneralConsultanMedicalSupport.PractitionerLabEximinationId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id">
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.PractitionerLabEximinationId)" />
                    </DxFormLayoutItem>

                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                        <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.LabEximinationAttachment"
                            ShowValidationIcon="true"
                            ReadOnly="true"
                            MaskMode="MaskMode.RegEx">
                            <Buttons>
                                <InputFile id="labFile" OnChange="@SelectFilesLab" multiple="false" style="display:none" />
                                <DxEditorButton Click="SelectFileLab" IconCssClass="fa-solid fa-upload" />
                                <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.LabEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                <DxEditorButton Click="RemoveSelectedFileLab" IconCssClass="fa-solid fa-trash" />
                            </Buttons>
                        </DxMaskedInput>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem  ColSpanMd="12">
                        <hr/>
                    </DxFormLayoutItem>

                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Test" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true"
                                    Data="@LabTests"
                                    NullText="Select Test..."
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                    FilteringMode="@DataGridFilteringMode.Contains"
                                    @bind-Value="@GeneralConsultanMedicalSupport.LabTestId"
                                    TextFieldName="Name"
                                    SelectedItemChanged="@((LabTestDto e) => SelectedItemLabTest(e))"
                                    ValueFieldName="Id">
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.LabTestId)" />
                    </DxFormLayoutItem> 
                    <DxFormLayoutGroup ColSpanMd="12" Caption="Lab Test" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                        <Items>
                                 <DxLoadingPanel @bind-Visible="PanelVisible"
                                    IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                    IsContentBlocked="true"
                                    ApplyBackgroundShading="true"
                                    IndicatorAreaVisible="false"
                                    Text="Fetching Data...">
                        <DxGrid @ref="GridLabTest" PagerNavigationMode="PagerNavigationMode.InputBox"
                                PageSize="12"
                                TextWrapEnabled="false"
                                @bind-SelectedDataItems="@SelectedLabTestDataItems"
                                Data="LabResultDetails"
                                KeyFieldName="Id"
                                FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                CustomizeDataRowEditor="Grid_CustomizeDataRowEditor"
                                AllowSelectRowByClick="true"
                                EditModelSaving="OnSaveLabTest"
                                DataItemDeleting="OnDeleteLabTest"
                                EditMode="GridEditMode.PopupEditForm"
                                PopupEditFormCssClass="pw-800"
                                PagerPosition="GridPagerPosition.Bottom"
                                PageSizeSelectorVisible="true"
                                EditCanceling="CancelEditLabResult"
                                CustomizeElement="Grid_CustomizeElement"
                                PageSizeSelectorItems="@(new int[] { 12, 24, 68, 100 })"
                                PageSizeSelectorAllRowsItemVisible="true"
                                PagerSwitchToInputBoxButtonCount="10"
                                FocusedRowChanged="GridLabTest_FocusedRowChanged"
                                FocusedRowEnabled="true"
                                PagerVisibleNumericButtonCount="10"
                                AutoExpandAllGroupRows="true"
                                ShowSearchBox="true"
                                KeyboardNavigationEnabled="true">
                            <Columns>
                                <DxGridDataColumn FieldName="Parameter" Caption="Parameter" SortIndex="0" />
                                <DxGridDataColumn FieldName="NormalRange" Caption="Normal Range" />
                                <DxGridDataColumn FieldName="LabUom.Name" Caption="UoM" />
                                <DxGridDataColumn FieldName="Result" Caption="Result" />
                                <DxGridDataColumn FieldName="ResultType" Caption="Result Type" />
                                <DxGridDataColumn FieldName="Remark" Caption="Remark" />
                                <DxGridCommandColumn MinWidth="100" FixedPosition="GridColumnFixedPosition.Right">
                                    <HeaderTemplate>
                                        <a class="fa-solid fa-plus" @onclick="@(async () => await AddNewLabResult())" style="text-decoration: none;" href="javascript:void(0);"></a>
                                    </HeaderTemplate>
                                    <CellDisplayTemplate>
                                        <a class="fa-solid fa-pen-to-square text-warning" @onclick="@(async () => await EditLabResult(context))" style="text-decoration: none;" href="javascript:void(0);"></a>
                                        <a class="ml-1 fa-solid fa-trash text-danger" @onclick="@(() => GridLabTest.ShowDataItemDeleteConfirmation(context.DataItem))" style="text-decoration: none;" href="javascript:void(0);"></a>
                                    </CellDisplayTemplate>
                                </DxGridCommandColumn>
                            </Columns>
                            <EditFormTemplate Context="EditFormContext22">
                                <DxFormLayout CssClass="w-100">
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Parameter" ColSpanMd="12">
                                        <DxTextBox ReadOnly="LabResultDetail.IsFromDB" ShowValidationIcon="true" @bind-Text="@LabResultDetail.Parameter" NullText="Parameter" InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Normal Range" ColSpanMd="12">
                                        <DxTextBox  ReadOnly="LabResultDetail.IsFromDB"  ShowValidationIcon="true" @bind-Text="@LabResultDetail.NormalRange" NullText="Normal Range" InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="UoM" ColSpanMd="12">
                                        <DxComboBox ShowValidationIcon="true"
                                                    Data="@LabUoms"
                                                     ReadOnly="LabResultDetail.Id != 0"
                                                    NullText="Select UoM..."
                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                    @bind-Value="@LabResultDetail.LabUomId"
                                                    TextFieldName="Name"
                                                    ValueFieldName="Id">
                                        </DxComboBox>
                                        <ValidationMessage For="@(()=> LabResultDetail.LabUomId)"   />
                                    </DxFormLayoutItem>

                                            @{
                                                var showResult = true;

                                                ResultValueTypes = ["Low", "Normal", "High"];

                                                if (LabResultDetail.ResultValueType is not null && LabResultDetail.ResultValueType.Equals("Qualitative"))
                                                {
                                                    showResult = false;
                                                    ResultValueTypes = ["Positive", "Negative"];
                                                }
                                                else
                                                {
                                                    showResult = true;
                                                }
                                            }

                                                                                <DxFormLayoutItem Visible="showResult" CaptionCssClass="normal-caption" Caption="Result" ColSpanMd="12">
                                                                                    <DxTextBox InputDelay="1000" @oninput="OnResultTextChanged" ShowValidationIcon="true" @bind-Text="@LabResultDetail.Result" NullText="Result" InputCssClass="fw-normal" />
                                                                                    <ValidationMessage For="@(() => LabResultDetail.Result)" />
                                                                                </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Result Type" ColSpanMd="12">
                                        <DxComboBox ShowValidationIcon="true"
                                                    Data="@ResultValueTypes"
                                                    NullText="Select Result Type..."
                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                    @bind-Value="@LabResultDetail.ResultType">
                                        </DxComboBox>
                                        <ValidationMessage For="@(()=> LabResultDetail.ResultType)"   />
                                    </DxFormLayoutItem>

                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Remark" ColSpanMd="12">
                                        <DxTextBox ReadOnly="LabResultDetail.IsFromDB"  ShowValidationIcon="true" @bind-Text="@LabResultDetail.Remark" NullText="Remark" InputCssClass="fw-normal" />
                                        <ValidationMessage For="@(() => LabResultDetail.Remark)" />
                                    </DxFormLayoutItem>
                                </DxFormLayout>
                            </EditFormTemplate>
                        </DxGrid>
                    </DxLoadingPanel>
                        </Items>
                    </DxFormLayoutGroup>
                </Items>
            </DxFormLayoutGroup>

            <DxFormLayoutGroup ColSpanMd="12" Caption="Radiology Result" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                <Items>
                    <DxFormLayoutItem CaptionCssClass="caption normal-caption" Caption="Practitioner" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true" Data="@AllDoctors.Where(x => x.IsPhysicion == true)"
                                    NullText="Select Practitioner..."
                                    @bind-Value="@GeneralConsultanMedicalSupport.PractitionerRadiologyEximinationId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id" >
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.PractitionerRadiologyEximinationId)" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                        <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.RadiologyEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                        <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.RadiologyEximinationAttachment"
                            ShowValidationIcon="true"
                            ReadOnly="true"
                            MaskMode="MaskMode.RegEx">
                            <Buttons>
                                <InputFile id="radiologyFile" OnChange="@SelectFilesRadiology" multiple="false" style="display:none" />
                                <DxEditorButton Click="SelectFileRadiology" IconCssClass="fa-solid fa-upload" />
                                <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.RadiologyEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                <DxEditorButton Click="RemoveSelectedFileRadiology" IconCssClass="fa-solid fa-trash" />
                            </Buttons>
                        </DxMaskedInput>
                    </DxFormLayoutItem>
                </Items>
            </DxFormLayoutGroup>

            <DxFormLayoutGroup ColSpanMd="12" Caption="Alcohol Result" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                <Items>
                     <DxFormLayoutItem CaptionCssClass="caption normal-caption" Caption="Practitioner" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true" Data="@AllDoctors.Where(x => x.IsPhysicion == true)"
                                    NullText="Select Practitioner..."
                                    @bind-Value="@GeneralConsultanMedicalSupport.PractitionerAlcoholEximinationId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id" >
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.PractitionerAlcoholEximinationId)" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                        <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.AlcoholEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                            <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.AlcoholEximinationAttachment"
                            ShowValidationIcon="true"
                            ReadOnly="true"
                            MaskMode="MaskMode.RegEx">
                            <Buttons>
                                <InputFile id="alcoholFile" OnChange="@SelectFilesAlcohol" multiple="false" style="display:none" />
                                <DxEditorButton Click="SelectFileAlcohol" IconCssClass="fa-solid fa-upload" />
                                <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.AlcoholEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                <DxEditorButton Click="RemoveSelectedFileAlcohol" IconCssClass="fa-solid fa-trash" />
                            </Buttons>
                        </DxMaskedInput>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Negative">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AlcoholNegative" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Positive">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AlcoholPositive" />
                    </DxFormLayoutItem>
                </Items>
            </DxFormLayoutGroup>

            <DxFormLayoutGroup ColSpanMd="12" Caption="Drug Result" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                <Items>
                     <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Practitioner" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true" Data="@AllDoctors.Where(x => x.IsPhysicion == true)"
                                    NullText="Select Practitioner..."
                                    @bind-Value="@GeneralConsultanMedicalSupport.PractitionerDrugEximinationId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id" >
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.PractitionerDrugEximinationId)" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Examination Name" ColSpanMd="12">
                        <DxTextBox @bind-Text="@GeneralConsultanMedicalSupport.DrugEximinationName" NullText="Examination Name" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                    <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.DrugEximinationAttachment"
                            ShowValidationIcon="true"
                            ReadOnly="true"
                            MaskMode="MaskMode.RegEx">
                            <Buttons>
                                <InputFile id="drugFile" OnChange="@SelectFilesDrug" multiple="false" style="display:none" />
                                <DxEditorButton Click="SelectFileDrug" IconCssClass="fa-solid fa-upload" />
                                <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.DrugEximinationAttachment)" IconCssClass="fa-solid fa-download" />
                                <DxEditorButton Click="RemoveSelectedFileDrug" IconCssClass="fa-solid fa-trash" />
                            </Buttons>
                        </DxMaskedInput>
                    </DxFormLayoutItem> 

                     <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Amphetamines" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AmphetaminesPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.AmphetaminesNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 1000 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>

                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Benzodiazepines" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>  
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.BenzodiazepinesPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.BenzodiazepinesNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 300 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>

                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Cocaine / Metabolites" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.CocaineMetabolitesPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.CocaineMetabolitesNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 300 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>

                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Opiates" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.OpiatesPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.OpiatesNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 50 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>

                      <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Methamphetamines" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.MethamphetaminesPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.MethamphetaminesNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 1000 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>

                     <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="THC / Cannabinoid (Marijuana)" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn  Width="70"/>
                                    <DxGridLayoutColumn Width="50"/>
                                    <DxGridLayoutColumn />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="0" >
                                        <Template>
                                            <h6 class="pt-1">Positive</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem ColumnSpan="2"  Row="0"  Column="1" >
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.THCCannabinoidMarijuanaPositive" />
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2" Row="0"  Column="2">
                                        <Template>
                                            <h6 class="pt-1">Negative</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                        <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="3">
                                        <Template>
                                                <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.THCCannabinoidMarijuanaNegative" />
                                        </Template>
                                    </DxGridLayoutItem>
                                     <DxGridLayoutItem ColumnSpan="2"  Row="0" Column="4" >
                                        <Template>
                                            <h6  class="pt-1">Expect Range 50 ng/ml</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>
                        </Template>
                    </DxFormLayoutItem>
                </Items>

            </DxFormLayoutGroup>
                <DxFormLayoutGroup ColSpanMd="12" Caption="ECG" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                <Items>
                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Practitioner" ColSpanMd="12">
                        <DxComboBox ShowValidationIcon="true" Data="@AllDoctors.Where(x => x.IsPhysicion == true)"
                                    NullText="Select Practitioner..."
                                    @bind-Value="@GeneralConsultanMedicalSupport.PractitionerECGId"
                                    TextFieldName="Name"
                                    ValueFieldName="Id">
                        </DxComboBox>
                        <ValidationMessage For="@(() => GeneralConsultanMedicalSupport.PractitionerECGId)" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Normal Resting ECG" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsNormalRestingECG" />
                    </DxFormLayoutItem>
                     <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Sinus Rhythm" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsSinusRhythm" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Sinus Bradycardia" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsSinusBradycardia" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Sinus Tachycardia" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsSinusTachycardia" />
                    </DxFormLayoutItem> 
                    <DxFormLayoutItem  CaptionCssClass="normal-caption" Caption="HR" ColSpanMd="12">
                        <Template>
                            <DxGridLayout>
                                <Rows>
                                    <DxGridLayoutRow />
                                </Rows>
                                <Columns>
                                    <DxGridLayoutColumn Width="350" />
                                    <DxGridLayoutColumn  />
                                </Columns>
                                <Items>
                                    <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                        <Template>
                                            <DxSpinEdit ShowValidationIcon="true"  MinValue="0" @bind-Value="@GeneralConsultanMedicalSupport.HR" NullText="HR" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                        </Template>
                                    </DxGridLayoutItem>
                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                        <Template>
                                            <h6 class="pl-1 pt-2">BPM</h6>
                                        </Template>
                                    </DxGridLayoutItem>
                                </Items>
                            </DxGridLayout>

                        </Template>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Other" ColSpanMd="12">
                        <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsOtherECG" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanMd="12" Caption=" " Visible="@Convert.ToBoolean(GeneralConsultanMedicalSupport.IsOtherECG)">
                        <DxMemo
                                        @bind-Text="GeneralConsultanMedicalSupport.OtherDesc"
                                        NullText="Other Description..."
                                        ShowValidationIcon="true"
                                        Rows="1" />
                    </DxFormLayoutItem>
                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Attachment" ColSpanMd="12">
                        <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.ECGAttachment"
                            ShowValidationIcon="true"
                            ReadOnly="true"
                            MaskMode="MaskMode.RegEx">
                            <Buttons>
                                <InputFile id="radiologyFile" OnChange="@SelectFilesRadiology" multiple="false" style="display:none" />
                                <DxEditorButton Click="SelectFileRadiology" IconCssClass="fa-solid fa-upload" />
                                <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.ECGAttachment)" IconCssClass="fa-solid fa-download" />
                                <DxEditorButton Click="RemoveSelectedFileRadiology" IconCssClass="fa-solid fa-trash" />
                            </Buttons>
                        </DxMaskedInput>
                    </DxFormLayoutItem>
                
                </Items>
            </DxFormLayoutGroup>
              <DxFormLayoutGroup ColSpanMd="12" Caption="Other Examination" ExpandButtonDisplayMode="GroupExpandButtonDisplayMode.Start" AnimationType="LayoutAnimationType.Slide">
                    <Items>
                        <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Other Examination" ColSpanMd="12">
                            <DxCheckBox @bind-Checked="@GeneralConsultanMedicalSupport.IsOtherExaminationECG" />
                        </DxFormLayoutItem>
                            @if (Convert.ToBoolean(GeneralConsultanMedicalSupport.IsOtherExaminationECG))
                            {
                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption=" " ColSpanMd="12">
                                    <DxMemo @bind-Text="GeneralConsultanMedicalSupport.OtherExaminationTypeECG"
                                            NullText="Examination Type..."
                                            ShowValidationIcon="true"
                                            Rows="1" />
                                </DxFormLayoutItem>
                            }
                            @if (Convert.ToBoolean(GeneralConsultanMedicalSupport.IsOtherExaminationECG))
                            {
                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption=" " ColSpanMd="12">
                                    <DxMemo @bind-Text="GeneralConsultanMedicalSupport.OtherExaminationRemarkECG"
                                            NullText="Remark..."
                                            ShowValidationIcon="true"
                                            Rows="1" />
                                </DxFormLayoutItem>

                            }
                            @if (Convert.ToBoolean(GeneralConsultanMedicalSupport.IsOtherExaminationECG))
                            {
                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption=" " ColSpanMd="12">
                                    <DxMaskedInput @bind-Value="@GeneralConsultanMedicalSupport.OtherExaminationAttachment"
                                                    ShowValidationIcon="true"
                                                    ReadOnly="true"
                                                    MaskMode="MaskMode.RegEx">
                                        <Buttons>
                                            <InputFile id="drugFile" OnChange="@SelectFilesDrug" multiple="false" style="display:none" />
                                            <DxEditorButton Click="SelectFileDrug" IconCssClass="fa-solid fa-upload" />
                                            <DxEditorButton Click="() => DownloadFile(GeneralConsultanMedicalSupport.OtherExaminationAttachment)" IconCssClass="fa-solid fa-download" />
                                            <DxEditorButton Click="RemoveSelectedFileDrug" IconCssClass="fa-solid fa-trash" />
                                        </Buttons>
                                    </DxMaskedInput>
                                </DxFormLayoutItem>
                            }
                    </Items>
                </DxFormLayoutGroup>
        </DxFormLayout>
        <div class="row justify-content-end">
            <div class="col-auto align-self-end">
                <DxButton Enabled="!IsLoading"
                        RenderStyle="ButtonRenderStyle.Info"
                        RenderStyleMode="@ButtonRenderStyleMode.Outline"
                        IconCssClass="fa-solid fa-floppy-disk"
                        Text="Submit" SubmitFormOnClick="true"> 
                </DxButton>
                <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Cancel" Click="OnCancelProcedureRoom"></DxButton>
            </div>
        </div>
    </EditForm>
</DxPopup>

<DxPopup HeaderText="Refer To" @bind-Visible="@PopUpVisible" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" CloseButtonClick="CloseReferTo" Width="90%">
    <EditForm Model="@FormRegis" Context="EditFormContext2" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
            <DxFormLayout>
                   <DxFormLayout>
                            <DxFormLayoutGroup Caption="General" ColSpanMd="12">
                                <div class="row">

                            <div class="col-md-12">
                                <DxFormLayout  Enabled="false" CssClass="mt ">
                                    <DxFormLayoutItem  CaptionCssClass="required-caption normal-caption normal-caption" Caption="Patient" ColSpanMd="12">
                                        <DxComboBox ReadOnly
                                                    ShowValidationIcon="true"
                                                    Data="@patients"
                                                    NullText="Select Patient..."
                                                    @bind-Value="@FormRegis.PatientId"
                                                    TextFieldName="Name"
                                                    SelectedItemChanged="@((UserDto e) => SelectedItemPatientChanged(e))"
                                                    ValueFieldName="Id">
                                        </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.PatientId)" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Medical Record" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@FormRegis.NoRM" NullText="Medical Record Number" ReadOnly InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Identity Number" ColSpanMd="12">
                                        <DxTextBox @bind-Text="@FormRegis.IdentityNumber" NullText="Identity Number" ReadOnly InputCssClass="fw-normal" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Age" ColSpanMd="12">
                                        <Template>
                                            <DxGridLayout>
                                                <Rows>
                                                    <DxGridLayoutRow />
                                                </Rows>
                                                <Columns>
                                                    <DxGridLayoutColumn Width="90%" />
                                                    <DxGridLayoutColumn Width="30%" />
                                                </Columns>
                                                <Items>
                                                    <DxGridLayoutItem Row="0" Column="0" CssClass="mt">
                                                        <Template>
                                                            <DxSpinEdit ShowValidationIcon="true"MinValue="0" @bind-Value="@FormRegis.Age" NullText="Age" ReadOnly InputCssClass="fw-normal" />
                                                        </Template>
                                                    </DxGridLayoutItem>
                                                    <DxGridLayoutItem Row="0" Column="1" CssClass="mt ml">
                                                        <Template>
                                                            <h6 class="pl-1 pt-2 normal-caption">Year</h6>
                                                        </Template>
                                                    </DxGridLayoutItem>
                                                </Items>
                                            </DxGridLayout>

                                        </Template>
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Reg Type" ColSpanMd="12">
                                            <DxComboBox
                                                        Data="@RegisType"
                                                        NullText="Select Registration..."
                                                        AllowUserInput="true"
                                                        ShowValidationIcon="true"
                                                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                        FilteringMode="@DataGridFilteringMode.Contains"
                                                        SelectedItemChanged="@((string city) => SelectedItemChanged(city))"
                                                        @bind-Value="@FormRegis.TypeRegistration">
                                            </DxComboBox>
                                            <ValidationMessage For="@(() => FormRegis.TypeRegistration)" />
                                    </DxFormLayoutItem>
                                    <DxFormLayoutItem Visible="@(!string.IsNullOrWhiteSpace(FormRegis.TypeRegistration) && !FormRegis.TypeRegistration.Equals("General Consultation"))"
                                                CaptionCssClass="required-caption normal-caption"
                                                Caption="Medical Type" ColSpanMd="12">
                                        <DxComboBox   ShowValidationIcon="true" Data="@Method"
                                                    NullText="Select Method..."
                                                    FilteringMode="@DataGridFilteringMode.Contains"
                                                    @bind-Value="@FormRegis.TypeMedical">
                                        </DxComboBox>
                                    </DxFormLayoutItem>

                                        <DxFormLayoutItem  CaptionCssClass="normal-caption" Caption="Alert Information Special Case" ColSpanMd="12">
                                            <DxCheckBox   @bind-Checked="@FormRegis.IsAlertInformationSpecialCase" />
                                        </DxFormLayoutItem>
                                </DxFormLayout>
                            </div> 
                        </div>
                        </DxFormLayoutGroup>
                        </DxFormLayout>
            </DxFormLayout>
            <div class="row justify-content-end">
                <div class="col-auto align-self-end">
                    <DxButton RenderStyle="ButtonRenderStyle.Info" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Submit" SubmitFormOnClick="true"  ></DxButton>
                    <DxButton RenderStyle="ButtonRenderStyle.Danger" RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-xmark" Text="Discard" Click="OnCancelReferTo"></DxButton>
                </div>
            </div>
    </EditForm>
</DxPopup>

<DxPopup HeaderText="Pain Scale" @bind-Visible="@IsPopUpPainScale" HeaderCssClass="fw-bold" CloseOnOutsideClick="false" Width="90%">
    <div class="row ">
       <div class="col-6 d-flex align-items-center justify-content-center">
        <img src="image/pain_scale_chart.jpg" alt="Pain Scale Image" style="height: 450px">
        </div>
        <div class="col-6">
            <ul>
    <li>
        <strong>10 - Unspeakable pain.</strong> Bedridden and possibly despondent. Very few people will ever experience this level of pain.
    </li>
    <li>
        <strong>9 - Excruciating pain.</strong> Unable to converse. Crying out and/or moaning uncontrollably.
    </li>
    <li>
        <strong>8 - Intense pain.</strong> Physical activity is severely limited. Conversing requires great effort.
    </li>
    <li>
        <strong>7 - Severe pain</strong> that dominates your senses and significantly limits your ability to perform normal daily activities or maintain social relationships. Interferes with sleep.
    </li>
    <li>
        <strong>6 - Moderately strong pain</strong> that interferes with normal daily activities. Difficulty concentrating.
    </li>
    <li>
        <strong>5 - Moderately strong pain.</strong> It can’t be ignored for more than a few minutes, but with effort you still can manage to work or participate in some social activities.
    </li>
    <li>
        <strong>4 - Moderate pain.</strong> If you are deeply involved in an activity, it can be ignored for a period of time, but is still distracting.
    </li>
    <li>
        <strong>3 - Pain</strong> is noticeable and distracting, however, you can get used to it and adapt.
    </li>
    <li>
        <strong>2 - Minor pain.</strong> Annoying and may have occasional stronger twinges.
    </li>
    <li>
        <strong>1 - Pain</strong> is very mild, barely noticeable. Most of the time you don’t think about it.
    </li>
    <li>
        <strong>0 - Pain Free</strong>
    </li>
</ul>

        </div>
    </div>
</DxPopup>













========================================================













using QuestPDF.Fluent;
using System.ComponentModel;
using System.Text.RegularExpressions;

namespace McDermott.Web.Components.Pages.Transaction
{
    public partial class GeneralConsultanServicePage
    {
        #region Grid Lab Test

        private IGrid GridLabTest { get; set; }
        private IReadOnlyList<object> SelectedLabTestDataItems { get; set; } = [];
        private List<LabResultDetailDto> LabResultDetails = [];
        private LabResultDetailDto LabResultDetail = new();
        private List<LabUomDto> LabUoms = [];
        private LabTestDetailDto LabTestDetail = new();

        private List<long> DeletedLabTestIds = [];
        private int FocusedRowLabTestVisibleIndex { get; set; }
        private LabUomDto LabUom = new();
        private bool IsAddOrUpdateOrDeleteLabResult = false;

        private class HomeStatusTemp
        {
            public string Code { get; set; } = string.Empty;
            public string Name { get; set; } = string.Empty;
        }

        private List<HomeStatusTemp> _homeStatusTemps = [
                new()
                {
                    Code = "1",
                    Name = "Meninggal",
                },
                new()
                {
                    Code = "3",
                    Name = "Berobat Jalan",
                },
                new()
                {
                    Code = "4",
                    Name = "Rujuk Vertikal",
                },
                new()
                {
                    Code = "6",
                    Name = "Rujuk Horizontal",
                },
            ];

        private List<string> ResultValueTypes =
          [
              "Low",
                "Normal",
                "High",
                "Positive",
                "Negative",
          ];

        private void OnSaveLabTest(GridEditModelSavingEventArgs e)
        {
            //if (LabResultDetail.LabTestDetailId is null || LabResultDetail.LabTestDetailId == 0)
            //    return;

            IsAddOrUpdateOrDeleteLabResult = true;
            var editModel = LabResultDetail;

            //editModel.LabTestDetail = LabTests.FirstOrDefault(l => l.Id == LabResultDetail.LabTestDetailId);

            if (editModel.Id == 0)
            {
                long newId;
                do
                {
                    newId = Helper.RandomNumber;
                } while (LabResultDetails.Any(pfr => pfr.Id == newId));

                editModel.Id = newId;
                LabResultDetails.Add(editModel);
            }
            else
                LabResultDetails[FocusedRowLabTestVisibleIndex] = editModel;

            LabResultDetail = new();
            LabTestDetail = new();
            IsAddOrUpdateOrDeleteLabResult = true;
        }

        private async Task AddNewLabResult()
        {
            LabResultDetail = new();
            LabTestDetail = new();
            LabUom = new();
            await GridLabTest.StartEditNewRowAsync();
        }

        private async Task EditLabResult(GridCommandColumnCellDisplayTemplateContext context)
        {
            var selected = (LabResultDetailDto)context.DataItem;

            var copy = selected.Adapt<LabResultDetailDto>();

            await GridLabTest.StartEditRowAsync(FocusedRowLabTestVisibleIndex);

            var w = LabResultDetails.FirstOrDefault(x => x.Id == copy.Id);

            this.LabResultDetail = copy;
        }

        private void OnResultTextChanged(ChangeEventArgs v)
        {
            if (v.Value is null)
                return;

            var value = v.Value.ToString();

            if (long.TryParse(value, out _))
            {
                if (!Regex.IsMatch(LabResultDetail.NormalRange, @"^\d+-\d+$"))
                    LabResultDetail.ResultType = "Negative";
                else
                {
                    var splits = LabResultDetail.NormalRange.Split("-");
                    if (value.ToLong() <= splits[0].ToLong())
                    {
                        LabResultDetail.ResultType = "Low";
                    }
                    else
                    {
                        LabResultDetail.ResultType = "Normal";

                        if (value.ToLong() > splits[1].ToLong())
                        {
                            LabResultDetail.ResultType = "High";
                        }
                    }
                }
            }
            else
            {
                LabResultDetail.ResultType = "Negative";
            }
        }

        private async Task CancelEditLabResult()
        {
        }

        private void GridLabTest_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
        {
            FocusedRowLabTestVisibleIndex = args.VisibleIndex;
            if (args.DataItem is not null)
                LabResultDetail = args.DataItem as LabResultDetailDto;
            else
                LabResultDetail = new();
        }

        private async Task OnDeleteLabTest()
        {
            IsAddOrUpdateOrDeleteLabResult = true;
            //var aaa = SelectedLabTestDataItems.Adapt<List<LabResultDetailDto>>();

            LabResultDetails.Remove(LabResultDetails.FirstOrDefault(x => x.Id == SelectedLabTestDataItems[0].Adapt<LabResultDetailDto>().Id));

            SelectedLabTestDataItems = [];
        }

        private long selectedLabTestId { get; set; }

        private void SelectedItemParameter(LabTestDetailDto e)
        {
            if (e is null)
                return;

            selectedLabTestId = e.Id;

            var labTest = e;

            if (FormRegis.Patient is not null && FormRegis.Patient.Gender is not null)
            {
                if (FormRegis.Patient.Gender.Equals("Male"))
                    labTest.NormalRangeByGender = labTest.NormalRangeMale;
                else
                    labTest.NormalRangeByGender = labTest.NormalRangeFemale;
            }

            labTest.LabUom ??= new LabUomDto();

            LabTestDetail = labTest;
            LabUom = labTest.LabUom;
        }

        private List<LabTestDetailDto> LabTestDetails = [];

        private async Task SelectedItemLabTest(LabTestDto e)
        {
            if (e is null)
            {
                GeneralConsultanMedicalSupport.LabTestId = null;
                LabTestDetails.Clear();
                LabResultDetails.Clear();
                return;
            }

            //LabResultDetails.Clear();

            var details = await Mediator.Send(new GetLabTestDetailQuery(x => x.LabTestId == e.Id));
            foreach (var item in details)
            {
                LabResultDetails.Add(new LabResultDetailDto
                {
                    IsFromDB = true,
                    Id = Helper.RandomNumber,
                    NormalRange = FormRegis.Patient.Gender.Name.Equals("Male") ? item.NormalRangeMale : item.NormalRangeFemale,
                    Parameter = item.Name,
                    Remark = item.Remark,
                    LabUomId = item.LabUomId,
                    LabUom = item.LabUom,
                    ResultValueType = item.ResultValueType
                });
            }

            //var details = await Mediator.Send(new GetLabTestDetailQuery(x => x.LabTestId == e.Id));
            //if (GeneralConsultanMedicalSupport.Id == 0)
            //{
            //    var temp = new List<LabResultDetailDto>();
            //    foreach (var item in details)
            //    {
            //        temp.Add(new LabResultDetailDto
            //        {
            //            IsFromDB = true,
            //            Id = Helper.RandomNumber,
            //            NormalRange = FormRegis.Patient.Gender.Name.Equals("Male") ? item.NormalRangeMale : item.NormalRangeFemale,
            //            Parameter = item.Name,
            //            Remark = item.Remark,
            //            LabUomId = item.LabUomId,
            //            LabUom = item.LabUom,
            //            ResultValueType = item.ResultValueType
            //        });
            //    }

            //    LabResultDetails.AddRange(temp);
            //}
            //else
            //{
            //    LabResultDetails = await Mediator.Send(new GetLabResultDetailQuery(x => x.GeneralConsultanMedicalSupportId == GeneralConsultanMedicalSupport.Id));
            //}

            //LabResultDetail.LabTestId = e.Id;

            //var a = await Mediator.Send(new GetLabTestDetailQuery(x => x.LabTestId == e.Id));
            //LabTestDetails = [];
            //LabResultDetailsLabTestDetails.AddRange(a);
            GridLabTest.Reload();

            GeneralConsultanMedicalSupport.LabTestId = e.Id;
        }

        #endregion Grid Lab Test

        private async Task OnPrint()
        {
            if (FormRegis.Id == 0)
                return;

            QuestPDF.Settings.License = QuestPDF.Infrastructure.LicenseType.Community;
            var image = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\mcdermott_logo.png");
            var file = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\files\Slip_Registration.pdf");
            QuestPDF.Fluent.Document
                .Create(x =>
                {
                    x.Page(page =>
                    {
                        page.Margin(2, QuestPDF.Infrastructure.Unit.Centimetre);

                        page.Header().Row(row =>
                        {
                            row.ConstantItem(150).Image(File.ReadAllBytes(image));
                            row.RelativeItem().Column(c =>
                            {
                                c.Item().Text("Slip Registration").FontSize(36).SemiBold();
                                c.Item().Text($"MedRec: {FormRegis.Patient?.NoRm}");
                                c.Item().Text($"Patient: {FormRegis.Patient?.Name}");
                                c.Item().Text($"Identity Number: {FormRegis.Patient?.NoId}");
                                c.Item().Text($"Reg Type: {FormRegis.TypeRegistration}");
                                c.Item().Text($"Service: {FormRegis.Service?.Name}");
                                c.Item().Text($"Physicion: {FormRegis.Pratitioner?.Name}");
                                c.Item().Text($"Payment: {FormRegis.Payment}");
                                c.Item().Text($"Registration Date: {FormRegis.RegistrationDate}");
                                c.Item().Text($"Schedule Time: {FormRegis.ScheduleTime}");
                            });
                        });
                        //page.Header().Text("Slip Registration").SemiBold().FontSize(30);
                    });
                })
            .GeneratePdf(file);

            await Helper.DownloadFile("Slip_Registration.pdf", HttpContextAccessor, HttpClient, JsRuntime);

            //NavigationManager.NavigateTo(Path.Combine(Directory.GetCurrentDirectory(), @"Slip_Registration.pdf"), forceLoad: true);
        }

        #region Relation Data

        private PatientAllergyDto PatientAllergy = new();
        private GeneralConsultantClinicalAssesmentDto GeneralConsultantClinical = new();
        private List<GeneralConsultanServiceDto> GeneralConsultanServices = [];
        private List<UserDto> IsPatient = [];
        private List<UserDto> patients = [];

        private List<LabTestDto> LabTests = [];
        private List<UserDto> IsPratition = [];
        private List<UserDto> AllDoctors = [];
        private List<InsuranceDto> Insurances = [];
        private List<InsuranceDto> AllInsurances = [];
        private List<InsurancePolicyDto> InsurancePolicies = [];
        private List<ServiceDto> Services = [];
        private List<PatientAllergyDto> PatientAllergies = [];

        #region Form Regis

        public MarkupString GetStatusIconHtml(GeneralConsultanServiceDto priority)
        {
            if (priority is not null)
            {
                string html = $"<span class='badge bg-dark py-1 px-2' title='{priority.StagingStatus} Priority'>{priority.StagingStatus}</span>";

                return new MarkupString(html);
            }
            return new MarkupString("");
        }

        public MarkupString GetIssuePriorityIconHtml(GeneralConsultanServiceDto priority)
        {
            if (priority is not null)
            {
                if (!priority.IsAlertInformationSpecialCase && priority.ClassType is null)
                    return new MarkupString("");

                string priorytyClass = "danger";
                string title = string.Empty;

                if (priority.IsAlertInformationSpecialCase && priority.ClassType is not null)
                    title = $" Priority, {priority.ClassType.Name}";
                else
                {
                    if (priority.ClassType is not null)
                        title = $"{priority.ClassType.Name}";
                    if (priority.IsAlertInformationSpecialCase)
                        title = $" Priority ";
                }

                string html = string.Format("<span class='badge bg-{0} py-1 px-2' title='{1} Priority'>{1}</span>", priorytyClass, title);

                return new MarkupString(html);
            }
            return new MarkupString("");
        }

        private GeneralConsultanServiceDto FormRegis = new();

        #endregion Form Regis

        #region UserLoginAndAccessRole

        [Inject]
        public UserInfoService UserInfoService { get; set; }

        private GroupMenuDto UserAccessCRUID = new();
        private User UserLogin { get; set; } = new();
        private bool IsAccess = false;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);

            if (firstRender)
            {
                try
                {
                    await GetUserInfo();
                }
                catch { }
            }
        }

        private async Task GetUserInfo()
        {
            try
            {
                var user = await UserInfoService.GetUserInfo();
                IsAccess = user.Item1;
                UserAccessCRUID = user.Item2;
                UserLogin = user.Item3;
            }
            catch { }
        }

        #endregion UserLoginAndAccessRole

        private bool visible = true;
        private bool closeOnClick = true;

        private IEnumerable<DoctorScheduleDto> SelectedSchedules = [];
        private IEnumerable<string> SelectedNames { get; set; } = [];
        private List<string> Names { get; set; } = [];

        #endregion Relation Data

        #region Data Statis

        private string PaymentMethod
        {
            get => _PaymentMethod;
            set
            {
                FormRegis.Payment = value;
                _PaymentMethod = value;

                Insurances.Clear();

                if (PaymentMethod.Equals("BPJS"))
                {
                    var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS == true).ToList();
                    Temps = all.Select(x => new InsuranceTemp
                    {
                        InsurancePolicyId = x.Id,
                        InsuranceId = x.InsuranceId,
                        InsuranceName = x.Insurance.Name,
                        PolicyNumber = x.PolicyNumber
                    }).ToList();
                }
                else
                {
                    var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS != true).ToList();
                    Temps = all.Select(x => new InsuranceTemp
                    {
                        InsurancePolicyId = x.Id,
                        InsuranceId = x.InsuranceId,
                        InsuranceName = x.Insurance.Name,
                        PolicyNumber = x.PolicyNumber
                    }).ToList();
                }

                //GetInsurancePhysician(Value);
            }
        }

        private long Value
        {
            get => PatientsId;
            set
            {
                long PatientsId = value;
                this.PatientsId = value;

                var item = patients.FirstOrDefault(x => x.Id == PatientsId);

                try
                {
                    if (item.DateOfBirth != null)
                    {
                        DateTime currentDate = DateTime.UtcNow;
                        Birthdate = item.DateOfBirth;
                        Age = currentDate.Year - Birthdate!.Value.Year;
                    }

                    FormRegis.NoRM = item.NoRm;
                    FormRegis.IdentityNumber = item.NoId ?? "";
                    FormRegis.PatientId = item.Id;
                }
                catch { }

                var patientAlergy = PatientAllergies.Where(x => x.UserId == item!.Id).FirstOrDefault();

                if (patientAlergy is not null)
                {
                    //FormRegis.IsWeather = patientAlergy.Any(x => !string.IsNullOrWhiteSpace(x.Weather));
                    //FormRegis.IsPharmacology = patientAlergy.Any(x => !string.IsNullOrWhiteSpace(x.Farmacology));
                    //FormRegis.IsFood = patientAlergy.Any(x => !string.IsNullOrWhiteSpace(x.Food));
                    PatientAllergy = patientAlergy;
                    PatientAllergy.Food = patientAlergy.Food;
                    PatientAllergy.Weather = patientAlergy.Weather;
                    PatientAllergy.Farmacology = patientAlergy.Farmacology;
                    FormRegis.IsWeather = !string.IsNullOrWhiteSpace(patientAlergy.Weather);
                    FormRegis.IsPharmacology = !string.IsNullOrWhiteSpace(patientAlergy.Farmacology);
                    FormRegis.IsFood = !string.IsNullOrWhiteSpace(patientAlergy.Food);
                }
                else
                {
                    FormRegis.IsWeather = false;
                    FormRegis.IsPharmacology = false;
                    FormRegis.IsFood = false;
                }
            }
        }

        private string Code { get; set; } = "";
        private long _NursingDiagnosis { get; set; }

        private long NursingDiagnosis
        {
            get => _NursingDiagnosis;
            set
            {
                //FormInputCPPTGeneralConsultan.NursingDiagnosisId = value;
                //_NursingDiagnosis = value;

                //FormInputCPPTGeneralConsultan.Code = NursingDiagnoses.FirstOrDefault(x => x.Id == FormInputCPPTGeneralConsultan.NursingDiagnosisId)!.Code!;
            }
        }

        public class NurseStation
        {
            public long Id { get; set; }
            public string Status { get; set; }
            public long Count { get; set; }
        }

        public IEnumerable<NurseStation> NurseStations { get; set; } = new List<NurseStation>
        {
            new() { Id = 1, Status = "Planned", Count = 10 },
            new() { Id = 2, Status = "Confirmed", Count = 5 },
            new() { Id = 3, Status = "Waiting", Count = 2 },
            new() { Id = 4, Status = "Physician", Count = 1 },
            new() { Id = 5, Status = "Finished", Count = 0 },
        };

        private List<string> Payments = new List<string>
        {
            "Personal",
            "Insurance",
            "BPJS"
        };

        private List<string> RegisType = new List<string>
        {
            "General Consultation",
            "Emergency",
            "MCU"
        };

        private List<ClassTypeDto> ClassTypes = [];

        private List<string> Method = new List<string>
        {
            "MCU",
            "Gas And Oil"
        };

        private List<string> ClinicVisitTypes = new List<string>
        {
            "Healthy",
            "Sick"
        };

        public List<AwarenessDto> Awareness { get; set; } = [];

        private long PatientsId = 0;

        private long PractitionerId = 0;

        private long Age = 0;
        private DateTime? Birthdate { get; set; }
        private string IdentityNum { get; set; }
        private string _PaymentMethod { get; set; }

        private string MedicalTypee { get; set; }
        private List<InsuranceTemp> Temps = [];

        private class InsuranceTemp
        {
            public long InsurancePolicyId { get; set; }
            public long InsuranceId { get; set; }
            public string InsuranceName { get; set; }
            public string PolicyNumber { get; set; }

            public string ConcatInsurancePolicy
            { get { return PolicyNumber + " - " + InsuranceName; } }
        }

        private string StagingText = "Confirmed";

        private List<string> Stagings = new List<string>
        {
            "Planned",
            "Confirmed",
            "Nurse Station",
            "Waiting",
            "In Consultation",
            "Consultation Completed"
        };

        private List<string> Times = [];

        #endregion Data Statis

        #region Grid Setting

        private BaseAuthorizationLayout AuthorizationLayout = new();
        private bool PanelVisible { get; set; } = true;
        private bool showForm { get; set; } = false;
        private string textPopUp = "";
        private string Timeee = "";
        private string DisplayFormat { get; } = string.IsNullOrEmpty(CultureInfo.CurrentCulture.DateTimeFormat.AMDesignator) ? "HH:mm" : "h:mm tt";
        public IGrid Grid { get; set; }
        private int ActiveTabIndex { get; set; } = 0;

        private void OnTabClick(TabClickEventArgs e)
        {
        }

        private IReadOnlyList<object> SelectedDataItems { get; set; } = new ObservableRangeCollection<object>();
        private IReadOnlyList<object> SelectedDataItems2 { get; set; } = new ObservableRangeCollection<object>();
        private int FocusedRowVisibleIndex { get; set; }
        private bool EditItemsEnabled { get; set; }

        private List<Temppp> Temppps { get; set; } = new List<Temppp>
        {
            new Temppp
            {
                Title = "Test",
                Body = "Test Body"
            }
        };

        private class Temppp
        {
            public string Title { get; set; }
            public string Body { get; set; }
        }

        #endregion Grid Setting

        #region File Upload Attachment

        private async Task ExportXlsxItem_Click()
        {
            await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
        }

        private async Task ExportXlsItem_Click()
        {
            await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
        }

        private async Task ExportCsvItem_Click()
        {
            await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
        }

        //private void RemoveSelectedFile()
        //{
        //    UserForm.SipFile = null;
        //}

        //private async void SelectFiles(InputFileChangeEventArgs e)
        //{
        //    long maxFileSize = 1 * 1024 * 1024;
        //    var allowedExtenstions = new string[] { ".png", ".jpg", ".jpeg", ".gif" };

        //    UserForm.SipFile = e.File.Name;

        //    await FileUploadService.UploadFileAsync(e.File, maxFileSize, []);
        //}

        #endregion File Upload Attachment

        #region Tab CPPT

        private IGrid GridTabCPPT { get; set; }
        private long FocusedGridTabCPPTRowVisibleIndex { get; set; }
        private IReadOnlyList<object> SelectedDataItemsCPPT { get; set; } = new ObservableRangeCollection<object>();

        private InputCPPTGeneralConsultanCPPT FormInputCPPTGeneralConsultan = new();
        private GeneralConsultanCPPTDto GeneralConsultanCPPT = new();

        private List<NursingDiagnosesDto> NursingDiagnoses = [];
        private List<NursingDiagnosesTemp> NursingDiagnosesTemps = [];
        private List<DiagnosisDto> Diagnoses = [];
        private List<DiagnosesTemp> DiagnosesTemps = [];
        private List<DiseaseCategoryDto> DiseaseCategories = [];
        private List<DiseaseCategoryDto> AllDiseaseCategories = [];
        private List<GeneralConsultanCPPTDto> AllGeneralConsultanCPPTs = [];
        private List<GeneralConsultanCPPTDto> GeneralConsultanCPPTs = [];

        private class NursingDiagnosesTemp
        {
            public long Id { get; set; }
            public string Problem { get; set; } = string.Empty;
        }

        private class DiagnosesTemp
        {
            public long Id { get; set; }

            public string NameCode { get; set; }
        }

        private class InputCPPTGeneralConsultanCPPT
        {
            public string? Subjective { get; set; }
            public string? Objective { get; set; }

            [DisplayName("Planning")]
            public string? Plan { get; set; }

            public string? Diagnosis { get; set; }

            [DisplayName("Nurse Diagnosis")]
            public string? NursingDiagnosis { get; set; }

            public DateTime Date { get; set; } = DateTime.Now;
        }

        private async Task OnSaveTabCPPTConfirm()
        {
        }

        private void OnDeleteTabCPPTConfirm(GridDataItemDeletingEventArgs e)
        {
            GeneralConsultanCPPTs.Remove((GeneralConsultanCPPTDto)e.DataItem);
            GridTabCPPT.Reload();
        }

        private void OnClickConfirmCPPT()
        {
            var temps = new List<GeneralConsultanCPPTDto>();
            temps.Add(new GeneralConsultanCPPTDto
            {
                Id = new Random().Next(1, 9000000) + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Second,
                Title = UserLogin.Name,
            });
            temps.Add(new GeneralConsultanCPPTDto
            {
                Id = new Random().Next(1, 9000000) + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Second,
                Title = "Date and Time",
                Body = DateTime.Now.ToString("dd-MMM-yyy HH:mm:tt")
            });

            foreach (var key in GetPropertyNames(new InputCPPTGeneralConsultanCPPT()))
            {
                if (key == "Date")
                    continue;

                PropertyInfo property = typeof(InputCPPTGeneralConsultanCPPT).GetProperty(key);
                object? value = property?.GetValue(FormInputCPPTGeneralConsultan);

                if (value != null)
                {
                    string title = key;

                    if (title.Equals("Plan"))
                        title = "Planning";
                    else if (title.Equals("NursingDiagnosis"))
                        title = "Nurse Diagnosis";

                    temps.Add(new GeneralConsultanCPPTDto
                    {
                        Id = new Random().Next(1, 9000000) + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Second,
                        Title = title,
                        Body = value is null ? "" : value.ToString(), // Ubah ke string sesuai kebutuhan
                    });
                }
            }

            GeneralConsultanCPPTs.AddRange(temps);

            GridTabCPPT.Reload();
            OnClickCancelConfirmCPPT();
        }

        private void GridTabCPPT_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
        {
            FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;
        }

        public static List<string> GetPropertyNames<T>(T obj)
        {
            List<string> propertyNames = new List<string>();
            Type type = typeof(T);

            foreach (PropertyInfo prop in type.GetProperties())
            {
                propertyNames.Add(prop.Name);
            }

            return propertyNames;
        }

        private void OnClickCancelConfirmCPPT()
        {
            //NursingDiagnosis = 0;
            FormInputCPPTGeneralConsultan = new InputCPPTGeneralConsultanCPPT();
        }

        private void OnClickGetObjectives()
        {
            FormInputCPPTGeneralConsultan.Objective = $"Weight: {GeneralConsultantClinical.Weight}, Height: {GeneralConsultantClinical.Height}, RR: {GeneralConsultantClinical.RR}, SpO2: {GeneralConsultantClinical.SpO2}, BMIIndex: {Math.Round(GeneralConsultantClinical.BMIIndex, 2).ToString()}, BMIState: {GeneralConsultantClinical.BMIState}, Temp: {GeneralConsultantClinical.Temp}, HR: {GeneralConsultantClinical.HR}, Systolic: {GeneralConsultantClinical.Systolic}, DiastolicBP: {GeneralConsultantClinical.DiastolicBP}, E: {GeneralConsultantClinical.E}, V: {GeneralConsultantClinical.V}, M: {GeneralConsultantClinical.M}";
        }

        #endregion Tab CPPT

        #region Tab Medical Support

        private GeneralConsultanMedicalSupportDto GeneralConsultanMedicalSupport = new();
        private List<IBrowserFile> BrowserFiles = [];

        #region FileAttachmentLab

        private void RemoveSelectedFileLab()
        {
            GeneralConsultanMedicalSupport.LabEximinationAttachment = null;
        }

        private async void SelectFilesLab(InputFileChangeEventArgs e)
        {
            BrowserFiles.Add(e.File);

            GeneralConsultanMedicalSupport.LabEximinationAttachment = e.File.Name;

            await FileUploadService.UploadFileAsync(e.File, 1 * 1024 * 1024, []);
        }

        private async Task SelectFileLab()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "labFile");
        }

        private async Task DownloadFile(string fileName)
        {
            if (GeneralConsultanMedicalSupport.Id != 0 && !string.IsNullOrWhiteSpace(fileName))
            {
                await Helper.DownloadFile(fileName, HttpContextAccessor, HttpClient, JsRuntime);
            }
        }

        private async Task DownloadSIPFileLab()
        {
            var a = await FileUploadService.DownloadFile(GeneralConsultanMedicalSupport.LabEximinationAttachment);

            NavigationManager.NavigateTo(a);

            return;

            //using var s = new DotNetStreamReference(stream: a);

            //await JsRuntime.InvokeVoidAsync("downloadFileFromStream", GeneralConsultanMedicalSupport.LabEximinationAttachment, s);
        }

        #endregion FileAttachmentLab

        #region FileAttachmentRadiology

        private void RemoveSelectedFileRadiology()
        {
            GeneralConsultanMedicalSupport.RadiologyEximinationAttachment = null;
        }

        private async void SelectFilesRadiology(InputFileChangeEventArgs e)
        {
            BrowserFiles.Add(e.File);

            GeneralConsultanMedicalSupport.RadiologyEximinationAttachment = e.File.Name;

            //await FileUploadService.UploadFileAsync(e.File, 1 * 1024 * 1024, []);
        }

        private async Task SelectFileRadiology()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "radiologyFile");
        }

        private async Task DownloadSIPFileRadiology()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "radiologyFile");
        }

        #endregion FileAttachmentRadiology

        #region FileAttachmentAlcohol

        private void RemoveSelectedFileAlcohol()
        {
            GeneralConsultanMedicalSupport.AlcoholEximinationAttachment = null;
        }

        private async void SelectFilesAlcohol(InputFileChangeEventArgs e)
        {
            BrowserFiles.Add(e.File);

            GeneralConsultanMedicalSupport.AlcoholEximinationAttachment = e.File.Name;

            //await FileUploadService.UploadFileAsync(e.File, 1 * 1024 * 1024, []);
        }

        private async Task SelectFileAlcohol()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "alcoholFile");
        }

        private async Task DownloadSIPFileAlcohol()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "alcoholFile");
        }

        #endregion FileAttachmentAlcohol

        #region FileAttachmentDrug

        private void RemoveSelectedFileDrug()
        {
            GeneralConsultanMedicalSupport.DrugEximinationAttachment = null;
        }

        private async void SelectFilesDrug(InputFileChangeEventArgs e)
        {
            BrowserFiles.Add(e.File);

            GeneralConsultanMedicalSupport.DrugEximinationAttachment = e.File.Name;
            //await FileUploadService.UploadFileAsync(e.File, 1 * 1024 * 1024, []);
        }

        private async Task SelectFileDrug()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "drugFile");
        }

        private async Task DownloadSIPFileDrug()
        {
            await JsRuntime.InvokeVoidAsync("clickInputFile", "drugFile");
        }

        #endregion FileAttachmentDrug

        #endregion Tab Medical Support

        protected override async Task OnInitializedAsync()
        {
            PanelVisible = true;

            ClassTypes = await Mediator.Send(new GetClassTypeQuery());
            Awareness = await Mediator.Send(new GetAwarenessQuery());

            InsurancePolicies = await Mediator.Send(new GetInsurancePolicyQuery());
            NursingDiagnoses = await Mediator.Send(new GetNursingDiagnosesQuery());
            //LabTests = await Mediator.Send(new GetLabTestQuery());

            var nursingDiagnosesTemps = NursingDiagnoses.Select(x => new NursingDiagnosesTemp
            {
                Id = x.Id,
                Problem = $"{x.Problem}" // Menggunakan interpolasi string untuk menggabungkan Problem dan Code
            }).ToList();
            NursingDiagnosesTemps.AddRange(nursingDiagnosesTemps);

            Diagnoses = await Mediator.Send(new GetDiagnosisQuery());
            var diagnosesTemps = Diagnoses.Select(x => new DiagnosesTemp
            {
                Id = x.Id,
                NameCode = $"{x.Name}" // Menggunakan interpolasi string untuk menggabungkan Problem dan Code
            }).ToList();
            DiagnosesTemps.AddRange(diagnosesTemps);

            AllDiseaseCategories = await Mediator.Send(new GetDiseaseCategoryQuery());

            await GetUserInfo();
            await LoadData();
        }

        private void GetInsurancePhysician(long value)
        {
            if (string.IsNullOrWhiteSpace(PaymentMethod))
                return;

            InsurancePolicies.Clear();

            if (PaymentMethod.Equals("BPJS"))
            {
                Insurances = AllInsurances.Where(x => InsurancePolicies.Select(z => z.InsuranceId).Contains(x.Id) && x.IsBPJS == true).ToList();
            }
            else
            {
                Insurances = AllInsurances.Where(x => InsurancePolicies.Select(z => z.InsuranceId).Contains(x.Id) && x.IsBPJS == false).ToList();
            }
        }

        private async Task GetScheduleTimesUser(long value)
        {
            var slots = await Mediator.Send(new GetDoctorScheduleSlotQuery(x => x.PhysicianId == value));
        }

        private async Task SetTimeSchedule()
        {
            try
            {
                var slots = await Mediator.Send(new GetDoctorScheduleSlotQuery(x => x.PhysicianId == FormRegis.PratitionerId && x.StartDate.Date == FormRegis.RegistrationDate.Date && x.DoctorSchedule.ServiceId == FormRegis.ServiceId));

                Times.Clear();

                Times.AddRange(slots.Select(x => $"{x.WorkFromFormatString} - {x.WorkToFormatString}"));

                if (slots.Count <= 0)
                    FormRegis.ScheduleTime = null;

                StateHasChanged();

                //if (Times.Count <= 0)
                //    FormRegis.ScheduleTime = null;
            }
            catch { }
        }

        private bool IsLoading { get; set; } = false;
        private bool IsSending { get; set; } = false;

        private async Task Send()
        {
            IsLoading = true;
            ToastService.ShowInfo("Start");
            await Task.Delay(5000);
            IsLoading = false;
        }

        private int NumericValue = 0;
        private bool IsEnabled = true;

        private void OnValueChanged2(int newValue)
        {
            NumericValue = newValue;
            if (newValue != 0)
                IsEnabled = false;
            else IsEnabled = true;
        }

        private void Grid_CustomizeElementCPPT(GridCustomizeElementEventArgs e)
        {
            var title = (System.String)e.Grid.GetRowValue(e.VisibleIndex, "Title");
            var body = (System.String)e.Grid.GetRowValue(e.VisibleIndex, "Body");

            if (title is null)
                return;

            if (!title.Equals("Date and Time") && !title.Equals("Subjective") && !title.Equals("Objective") && !title.Equals("Planning") && !title.Equals("Diagnosis"))
            {
                e.CssClass = "highlighted-item";
            }
        }

        private async Task OnClickConfirm()
        {
            try
            {
                IsLoading = true;
                var currentStatus = FormRegis.StagingStatus;
                ToastService.ClearInfoToasts();
                if (FormRegis.PatientId == null || FormRegis.TypeRegistration == null || FormRegis.ServiceId is null || (!FormRegis.Payment!.Equals("Personal") && (FormRegis.InsurancePolicyId == 0 || FormRegis.InsurancePolicyId is null)))
                {
                    IsLoading = false;
                    ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
                    return;
                }

                if (SelectedBPJSIntegration is not null && SelectedBPJSIntegration.Id != 0)
                {
                    var isSuccess = await SendPcareRequestRegistration();
                    var isSuccessAddKunjungan = await SendPcareRequestKunjungan();

                    if (!isSuccess || !isSuccessAddKunjungan)
                        return;
                }

                if (FormRegis.Id != 0)
                {
                    var text = FormRegis.StagingStatus == "Physician" ? "Consultation Done" : FormRegis.StagingStatus;
                    var index = Stagings.FindIndex(x => x == text);
                    if (text != "Consultation Done")
                    {
                        FormRegis.StagingStatus = Stagings[index + 1];
                        if (index + 1 == 4)
                        {
                            FormRegis.StagingStatus = "Physician";
                        }
                        else if (index + 1 == 5)
                        {
                            FormRegis.StagingStatus = "Finished";
                        }
                        try
                        {
                            StagingText = FormRegis.StagingStatus == "In Consultant" ? "Finished" : Stagings[index + 2];
                        }
                        catch { }
                    }
                    else
                    {
                        FormRegis.StagingStatus = "Finished";
                    }
                    await Mediator.Send(new UpdateGeneralConsultanServiceRequest(FormRegis));
                }
                else
                {
                    var patient = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.PatientId == FormRegis.PatientId && x.StagingStatus!.Equals("Planned") && x.RegistrationDate.GetValueOrDefault().Date <= DateTime.Now.Date));

                    if (patient.Count > 0)
                    {
                        IsLoading = false;
                        ToastService.ShowInfo($"Patient in the name of \"{patient[0].Patient?.Name}\" there is still a pending transaction");
                        return;
                    }

                    FormRegis.StagingStatus = "Confirmed";
                    StagingText = "Nurse Station";
                    FormRegis = await Mediator.Send(new CreateGeneralConsultanServiceRequest(FormRegis));

                    PatientAllergy.UserId = FormRegis.PatientId.GetValueOrDefault();

                    if (PatientAllergy.Id == 0)
                        PatientAllergy = await Mediator.Send(new CreatePatientAllergyRequest(PatientAllergy));
                    else
                        PatientAllergy = await Mediator.Send(new UpdatePatientAllergyRequest(PatientAllergy));
                }

                var result = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.Id == FormRegis.Id));
                FormRegis = result[0];

                FormRegis.IsWeather = !string.IsNullOrWhiteSpace(PatientAllergy.Weather);
                FormRegis.IsPharmacology = !string.IsNullOrWhiteSpace(PatientAllergy.Farmacology);
                FormRegis.IsFood = !string.IsNullOrWhiteSpace(PatientAllergy.Food);

                if (FormRegis.StagingStatus.Equals("Physician"))
                {
                    if (Convert.ToBoolean(UserLogin.IsDoctor) && Convert.ToBoolean(UserLogin.IsPhysicion))
                    {
                        IsPratition = [.. AllDoctors.Where(x => x.Id == UserLogin.Id).ToList()];
                        FormRegis.PratitionerId = IsPratition.Count > 0 ? IsPratition[0].Id : null;
                    }
                    else
                        IsPratition = [.. AllDoctors.Where(x => x.IsDoctor == true && x.IsPhysicion == true).ToList()];
                }

                await ReadHeightWeightPatient();

                IsLoading = false;
            }
            catch (Exception ex)
            {
                IsLoading = false;
                ToastService.ShowError(ex.Message);
            }
        }

        private async Task<bool> SendPcareRequestKunjungan()
        {
            if (FormRegis.StagingStatus is not null && FormRegis.StagingStatus.Equals("Nurse Station") && FormRegis.Payment is not null && FormRegis.Payment.Equals("BPJS") && SelectedBPJSIntegration is not null)
            {
                var ll = GeneralConsultanCPPTs.Where(x => x.Title == "Diagnosis").Select(x => x.Body).ToList();

                string diag1 = null;
                string diag2 = null;
                string diag3 = null;

                if (FormRegis.StagingStatus.Equals("Nurse Station"))
                {
                    //diag1 = GeneralConsultanCPPTs.Count >= 1 ? NursingDiagnoses.FirstOrDefault(x => x.Problem.ToLower().Trim().Contains(ll[0].ToLower().Trim())).Code : null;
                    //diag2 = GeneralConsultanCPPTs.Count >= 2 ? NursingDiagnoses.FirstOrDefault(x => x.Problem.ToLower().Trim().Contains(ll[1].ToLower().Trim())).Code : null;
                    //diag3 = GeneralConsultanCPPTs.Count >= 3 ? NursingDiagnoses.FirstOrDefault(x => x.Problem.ToLower().Trim().Contains(ll[2].ToLower().Trim())).Code : null;
                }
                else
                {
                }

                var kunj = new KunjunganRequest
                {
                    NoKunjungan = FormRegis.SerialNo ?? string.Empty,
                    NoKartu = SelectedBPJSIntegration.NoKartu ?? "",
                    TglDaftar = FormRegis.RegistrationDate.ToString("dd-MM-yyyy"),
                    KdPoli = Services.FirstOrDefault(x => x.Id == FormRegis.ServiceId)!.Code,
                    KdSadar = Awareness.FirstOrDefault(x => x.Id == GeneralConsultantClinical.AwarenessId)!.KdSadar,
                    Sistole = 10,
                    Diastole = 10,
                    BeratBadan = GeneralConsultantClinical.Weight.ToInt32(),
                    TinggiBadan = GeneralConsultantClinical.Height.ToInt32(),
                    RespRate = GeneralConsultantClinical.RR.ToInt32(),
                    HeartRate = GeneralConsultantClinical.HR.ToInt32(),
                    LingkarPerut = 10,
                    KdStatusPulang = "4",
                    TglPulang = "14-05-2024",
                    KdDokter = IsPratition.FirstOrDefault(x => x.Id == FormRegis.PratitionerId).PhysicanCode,
                    KdDiag1 = "A00.0",
                    KdDiag2 = diag2,
                    KdDiag3 = diag3,
                    Suhu = GeneralConsultantClinical.Temp.ToString(),
                };

                var aa = System.Text.Json.JsonSerializer.Serialize(kunj);

                var responseApi = await PcareService.SendPCareService($"kunjungan", HttpMethod.Post, kunj);

                if (responseApi.Item2 != 200)
                {
                    ToastService.ShowError($"{responseApi.Item1}");

                    IsLoading = false;
                    return false;
                }
                else
                {
                    dynamic data = JsonConvert.DeserializeObject<dynamic>(responseApi.Item1);
                    FormRegis.SerialNo = data.response.message;
                }
            }

            return true;
        }

        private async Task<bool> SendPcareRequestRegistration()
        {
            if (FormRegis.StagingStatus is not null && FormRegis.StagingStatus.Equals("Planned") && FormRegis.Payment is not null && FormRegis.Payment.Equals("BPJS") && SelectedBPJSIntegration is not null)
            {
                var regis = new PendaftaranRequest
                {
                    kdProviderPeserta = SelectedBPJSIntegration.KdProviderPstKdProvider ?? "",
                    tglDaftar = FormRegis.RegistrationDate.ToString("dd-MM-yyyy"),
                    noKartu = SelectedBPJSIntegration.NoKartu ?? "",
                    kdPoli = Services.FirstOrDefault(x => x.Id == FormRegis.ServiceId)!.Code,
                    keluhan = null,
                    kunjSakit = true,
                    kdTkp = "10"
                };

                var responseApi = await PcareService.SendPCareService($"pendaftaran", HttpMethod.Post, regis);

                dynamic data = JsonConvert.DeserializeObject<dynamic>(responseApi.Item1);

                if (responseApi.Item2 != 201)
                {
                    if (responseApi.Item2 == 412)
                        ToastService.ShowError($"{data.message}\n Code: {responseApi.Item2}");
                    else
                        ToastService.ShowError($"{data.metaData.message}\n Code: {data.metaData.code}");

                    IsLoading = false;
                    return false;
                }
                else
                    FormRegis.SerialNo = data.message;
            }
            return true;
        }

        public class Khusus
        {
            [JsonProperty("kdKhusus")]
            public string KdKhusus { get; set; }

            [JsonProperty("kdSubSpesialis")]
            public object KdSubSpesialis { get; set; }

            [JsonProperty("catatan")]
            public string Catatan { get; set; }
        }

        public class KunjunganRequest
        {
            [JsonProperty("noKunjungan")]
            public object NoKunjungan { get; set; }

            [JsonProperty("noKartu")]
            public string NoKartu { get; set; }

            [JsonProperty("tglDaftar")]
            public string TglDaftar { get; set; }

            [JsonProperty("kdPoli")]
            public object KdPoli { get; set; }

            [JsonProperty("keluhan")]
            public string Keluhan { get; set; }

            [JsonProperty("kdSadar")]
            public string KdSadar { get; set; }

            [JsonProperty("sistole")]
            public int Sistole { get; set; }

            [JsonProperty("diastole")]
            public int Diastole { get; set; }

            [JsonProperty("beratBadan")]
            public int BeratBadan { get; set; }

            [JsonProperty("tinggiBadan")]
            public int TinggiBadan { get; set; }

            [JsonProperty("respRate")]
            public int RespRate { get; set; }

            [JsonProperty("heartRate")]
            public int HeartRate { get; set; }

            [JsonProperty("lingkarPerut")]
            public int LingkarPerut { get; set; }

            [JsonProperty("kdStatusPulang")]
            public string KdStatusPulang { get; set; }

            [JsonProperty("tglPulang")]
            public string TglPulang { get; set; }

            [JsonProperty("kdDokter")]
            public string KdDokter { get; set; }

            [JsonProperty("kdDiag1")]
            public string KdDiag1 { get; set; }

            [JsonProperty("kdDiag2")]
            public object KdDiag2 { get; set; }

            [JsonProperty("kdDiag3")]
            public object KdDiag3 { get; set; }

            [JsonProperty("kdPoliRujukInternal")]
            public object? KdPoliRujukInternal { get; set; } = null;

            [JsonProperty("rujukLanjut")]
            public RujukLanjut? RujukLanjut { get; set; } = null;

            [JsonProperty("kdTacc")]
            public int KdTacc { get; set; }

            [JsonProperty("alasanTacc")]
            public object? AlasanTacc { get; set; } = null;

            [JsonProperty("anamnesa")]
            public string? Anamnesa { get; set; } = null;

            [JsonProperty("alergiMakan")]
            public string AlergiMakan { get; set; } = "00";

            [JsonProperty("alergiUdara")]
            public string AlergiUdara { get; set; } = "00";

            [JsonProperty("alergiObat")]
            public string AlergiObat { get; set; } = "00";

            [JsonProperty("kdPrognosa")]
            public string KdPrognosa { get; set; } = "01";

            [JsonProperty("terapiObat")]
            public string TerapiObat { get; set; } = null;

            [JsonProperty("terapiNonObat")]
            public string TerapiNonObat { get; set; } = null;

            [JsonProperty("bmhp")]
            public string Bmhp { get; set; } = null;

            [JsonProperty("suhu")]
            public string Suhu { get; set; }
        }

        public class RujukLanjut
        {
            [JsonProperty("tglEstRujuk")]
            public string TglEstRujuk { get; set; }

            [JsonProperty("kdppk")]
            public string Kdppk { get; set; }

            [JsonProperty("subSpesialis")]
            public object SubSpesialis { get; set; }

            [JsonProperty("khusus")]
            public Khusus Khusus { get; set; }
        }

        public class PendaftaranRequest
        {
            public string kdProviderPeserta { get; set; }
            public string tglDaftar { get; set; }
            public string noKartu { get; set; }
            public string kdPoli { get; set; }
            public object? keluhan { get; set; } = null;
            public bool kunjSakit { get; set; } = true;
            public int sistole { get; set; } = 0;
            public int diastole { get; set; } = 0;
            public int beratBadan { get; set; } = 0;
            public int tinggiBadan { get; set; } = 0;
            public int respRate { get; set; } = 0;
            public int lingkarPerut { get; set; } = 0;
            public int heartRate { get; set; } = 0;
            public int rujukBalik { get; set; } = 0;
            public string kdTkp { get; set; } = "10";
        }

        private async Task ReadHeightWeightPatient()
        {
            if (FormRegis.Id == 0)
                return;

            var services = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.PatientId == FormRegis.PatientId));

            if (services.Count <= 0 || services.Count == 1)
                return;

            var ID = services.OrderByDescending(z => z.CreateDate).ToList();

            var secondLastItem = ID.ToList()[ID.Count - 2];

            var assesments = await Mediator.Send(new GetGeneralConsultantClinicalAssesmentQuery(x => x.GeneralConsultanServiceId == secondLastItem.Id));

            if (assesments.Count <= 0)
                return;

            GeneralConsultantClinical.Weight = assesments[0].Weight;
            GeneralConsultantClinical.Height = assesments[0].Height;
        }

        private async Task OnCancel2()
        {
            IsLoading = true;
            if (FormRegis.Id != 0)
            {
                FormRegis.StagingStatus = "Canceled";

                await Mediator.Send(new UpdateGeneralConsultanServiceRequest(FormRegis));

                var result = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.Id == FormRegis.Id));
                FormRegis = result[0];

                ToastService.ShowSuccess("Cancelled..");
            }
            IsLoading = false;
        }

        private void SelectedService(DoctorScheduleDto docter)
        {
            //var selectedServices = DoctorScheduleDto
            //    .Where(service => PhysicionIds.Any(physicionId =>
            //        physicions.Any(physicion => physicion.Id == physicionId && service.PhysicionIds.Contains(physicionId.Id))))
            //    .ToList();
        }

        private async Task SelectData()
        {
            var user = await Mediator.Send(new GetUserQuery());

            //patient
            patients = [.. user.Where(x => x.IsPatient == true || x.IsEmployeeRelation == true).ToList()];

            //IsDocter

            if (Convert.ToBoolean(UserLogin.IsDoctor) && Convert.ToBoolean(UserLogin.IsPhysicion))
            {
                IsPratition = [.. user.Where(x => x.Id == UserLogin.Id).ToList()];
                FormRegis.PratitionerId = IsPratition.Count > 0 ? IsPratition[0].Id : null;
            }
            else
                IsPratition = [.. user.Where(x => x.IsDoctor == true && x.IsPhysicion == true).ToList()];

            AllDoctors = [.. user.Where(x => x.IsDoctor == true).ToList()];

            //Insurance
            AllInsurances = await Mediator.Send(new GetInsuranceQuery());

            //Medical Type
            Services = await Mediator.Send(new GetServiceQuery());
        }

        private bool FormValidationState = true;

        private async Task HandleValidSubmit()
        {
            IsLoading = true;
            FormValidationState = true;

            if (PopUpProcedureRoom)
                await OnSaveProcedureRoom();
            else
                await OnSave();
            IsLoading = false;
        }

        private bool IsPopUpPainScale { get; set; } = false;

        private void OnClickPainScalePopUp()
        {
            IsPopUpPainScale = true;
        }

        private async Task OnSaveProcedureRoom()
        {
            try
            {
                if (GeneralConsultanMedicalSupport.IsOtherECG && string.IsNullOrWhiteSpace(GeneralConsultanMedicalSupport.OtherDesc))
                {
                    ToastService.ShowInfo("Other Description can't be empty!");
                    return;
                }

                PopUpProcedureRoom = false;

                if (FormRegis.Id == 0)
                    return;

                BrowserFiles.Distinct();

                foreach (var item in BrowserFiles)
                {
                    await FileUploadService.UploadFileAsync(item, 0, []);
                }

                FormRegis.StagingStatus = "Procedure Room";
                await Mediator.Send(new UpdateGeneralConsultanServiceRequest(FormRegis));

                if (GeneralConsultanMedicalSupport.Id == 0)
                {
                    GeneralConsultanMedicalSupport.GeneralConsultanServiceId = FormRegis.Id;
                    GeneralConsultanMedicalSupport = await Mediator.Send(new CreateGeneralConsultanMedicalSupportRequest(GeneralConsultanMedicalSupport));
                }
                else
                    GeneralConsultanMedicalSupport = await Mediator.Send(new UpdateGeneralConsultanMedicalSupportRequest(GeneralConsultanMedicalSupport));

                if (GeneralConsultanMedicalSupport.LabTestId is not null && GeneralConsultanMedicalSupport.LabTestId != 0)
                {
                    await Mediator.Send(new DeleteLabResultDetailRequest(ids: DeletedLabTestIds));

                    LabResultDetails.ForEach(x => x.Id = 0);

                    LabResultDetails.ForEach(x =>
                    {
                        x.Id = 0;
                        x.GeneralConsultanMedicalSupportId = GeneralConsultanMedicalSupport.Id;
                    });

                    await Mediator.Send(new CreateListLabResultDetailRequest(LabResultDetails));

                    IsAddOrUpdateOrDeleteLabResult = false;
                }

                ToastService.ShowSuccess("Saved Successfully");
            }
            catch (Exception ex)
            {
                ex.HandleException(ToastService);
            }
        }

        private void GridCPPT_CustomizeElement(GridCustomizeElementEventArgs e)
        {
            if (e.ElementType == GridElementType.DataRow && e.Grid.GetRowValue(e.VisibleIndex, "Body") is "")
            {
                e.CssClass = "highlighted-item";
            }
        }

        private bool FormValidationStateCPPT = true;

        private void HandleValidSubmitCPPT()
        {
            FormValidationStateCPPT = true;

            OnClickConfirmCPPT();
        }

        private void HandleInvalidSubmitCPPT()
        {
            ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
            FormValidationStateCPPT = false;
        }

        private async Task OnSave()
        {
            try
            {
                IsLoading = true;
                ToastService.ClearInfoToasts();

                if (!FormValidationState)
                    return;

                if (!FormRegis.IsWeather)
                    PatientAllergy.Weather = null;
                if (!FormRegis.IsPharmacology)
                    PatientAllergy.Farmacology = null;
                if (!FormRegis.IsFood)
                    PatientAllergy.Food = null;

                GeneralConsultanMedicalSupport.LabResulLabExaminationtIds = SelectedLabTests.Select(x => x.Id).ToList();

                if (FormRegis.Id == 0)
                {
                    var patient = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.ServiceId == FormRegis.ServiceId && x.PatientId == FormRegis.PatientId && x.StagingStatus!.Equals("Planned") && x.RegistrationDate.GetValueOrDefault().Date <= DateTime.Now.Date));

                    if (patient.Count > 0)
                    {
                        ToastService.ShowInfo($"Patient in the name of \"{patient[0].Patient?.Name}\" there is still a pending transaction");
                        return;
                    }
                }

                if (!FormRegis.Payment!.Equals("Personal") && (FormRegis.InsurancePolicyId == 0 || FormRegis.InsurancePolicyId is null))
                {
                    ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
                    return;
                }

                if (IsReferTo)
                {
                    FormRegis.Id = 0;
                    FormRegis.StagingStatus = "Planned";
                    StagingText = "Confirmed";
                    PopUpVisible = false;
                    FormRegis = await Mediator.Send(new CreateGeneralConsultanServiceRequest(FormRegis));
                }
                else if (IsAppoiment)
                {
                    if (FormRegis.AppoimentDate is null)
                    {
                        ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
                        return;
                    }

                    FormRegis.Id = 0;
                    FormRegis.StagingStatus = "Planned";
                    StagingText = "Confirmed";
                    PopUpAppoiment = false;
                    FormRegis = await Mediator.Send(new CreateGeneralConsultanServiceRequest(FormRegis));
                    await LoadData();
                }
                else
                {
                    // Ketika Kondisi New
                    if (FormRegis.Id == 0)
                    {
                        switch (FormRegis.StagingStatus)
                        {
                            case "Planned":
                                FormRegis = await Mediator.Send(new CreateGeneralConsultanServiceRequest(FormRegis));

                                PatientAllergy.UserId = FormRegis.PatientId.GetValueOrDefault();

                                if (PatientAllergy.Id == 0)
                                    PatientAllergy = await Mediator.Send(new CreatePatientAllergyRequest(PatientAllergy));
                                else
                                    PatientAllergy = await Mediator.Send(new UpdatePatientAllergyRequest(PatientAllergy));

                                break;

                            default:
                                break;
                        }
                    }
                    else
                    {
                        switch (FormRegis.StagingStatus)
                        {
                            case "Planned":
                                FormRegis = await Mediator.Send(new UpdateGeneralConsultanServiceRequest(FormRegis));

                                PatientAllergy.UserId = FormRegis.PatientId.GetValueOrDefault();

                                if (PatientAllergy.Id == 0)
                                    PatientAllergy = await Mediator.Send(new CreatePatientAllergyRequest(PatientAllergy));
                                else
                                    PatientAllergy = await Mediator.Send(new UpdatePatientAllergyRequest(PatientAllergy));

                                break;

                            case "Nurse Station":

                                if (GeneralConsultantClinical.Id == 0)
                                {
                                    GeneralConsultantClinical.GeneralConsultanServiceId = FormRegis.Id;
                                    GeneralConsultantClinical = await Mediator.Send(new CreateGeneralConsultantClinicalAssesmentRequest(GeneralConsultantClinical));
                                }
                                else
                                {
                                    GeneralConsultantClinical = await Mediator.Send(new UpdateGeneralConsultantClinicalAssesmentRequest(GeneralConsultantClinical));
                                }

                                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(deleteByGeneralServiceId: FormRegis.Id));

                                GeneralConsultanCPPTs.ForEach(x => { x.GeneralConsultanService = null; x.GeneralConsultanServiceId = FormRegis.Id; x.Id = 0; });
                                await Mediator.Send(new CreateListGeneralConsultanCPPTRequest(GeneralConsultanCPPTs));
                                break;

                            case "Physician":

                                if (GeneralConsultantClinical.Id == 0)
                                {
                                    GeneralConsultantClinical.GeneralConsultanServiceId = FormRegis.Id;
                                    GeneralConsultantClinical = await Mediator.Send(new CreateGeneralConsultantClinicalAssesmentRequest(GeneralConsultantClinical));
                                }
                                else
                                {
                                    GeneralConsultantClinical = await Mediator.Send(new UpdateGeneralConsultantClinicalAssesmentRequest(GeneralConsultantClinical));
                                }

                                FormRegis = await Mediator.Send(new UpdateGeneralConsultanServiceRequest(FormRegis));

                                await Mediator.Send(new DeleteGeneralConsultanCPPTRequest(deleteByGeneralServiceId: FormRegis.Id));

                                GeneralConsultanCPPTs.ForEach(x => { x.GeneralConsultanService = null; x.GeneralConsultanServiceId = FormRegis.Id; x.Id = 0; });
                                await Mediator.Send(new CreateListGeneralConsultanCPPTRequest(GeneralConsultanCPPTs));

                                BrowserFiles.Distinct();

                                foreach (var item in BrowserFiles)
                                {
                                    await FileUploadService.UploadFileAsync(item, 0, []);
                                }

                                //if (GeneralConsultanMedicalSupport.Id == 0)
                                //{
                                //    GeneralConsultanMedicalSupport.GeneralConsultanServiceId = FormRegis.Id;
                                //    GeneralConsultanMedicalSupport = await Mediator.Send(new CreateGeneralConsultanMedicalSupportRequest(GeneralConsultanMedicalSupport));
                                //}
                                //else
                                //{
                                //    GeneralConsultanMedicalSupport = await Mediator.Send(new UpdateGeneralConsultanMedicalSupportRequest(GeneralConsultanMedicalSupport));
                                //}
                                break;

                            default:
                                break;
                        }
                    }
                }

                var result = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.Id == FormRegis.Id));
                FormRegis = result[0];

                FormRegis.IsWeather = !string.IsNullOrWhiteSpace(PatientAllergy.Weather);
                FormRegis.IsPharmacology = !string.IsNullOrWhiteSpace(PatientAllergy.Farmacology);
                FormRegis.IsFood = !string.IsNullOrWhiteSpace(PatientAllergy.Food);

                ToastService.ShowSuccess("Saved Successfully");
                IsLoading = false;
            }
            catch (Exception exx)
            {
                IsLoading = false;
                exx.HandleException(ToastService);
            }
        }

        private void HandleInvalidSubmit()
        {
            ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
            FormValidationState = false;
        }

        private async Task LoadData()
        {
            showForm = false;
            PanelVisible = true;
            PatientAllergy = new();
            SelectedDataItems = [];
            GeneralConsultanServices = await Mediator.Send(new GetGeneralConsultanServiceQuery());
            PatientAllergies = await Mediator.Send(new GetPatientAllergyQuery());
            await SelectData();
            IsReferTo = false;
            PopUpVisible = false;
            PanelVisible = false;
        }

        private void Grid_CustomizeDataRowEditor(GridCustomizeDataRowEditorEventArgs e)
        {
            ((ITextEditSettings)e.EditSettings).ShowValidationIcon = true;
        }

        private void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
        {
            if (e.ElementType == GridElementType.DataRow && e.VisibleIndex % 2 == 1)
            {
                e.CssClass = "alt-item";
            }
            if (e.ElementType == GridElementType.HeaderCell)
            {
                e.Style = "background-color: rgba(0, 0, 0, 0.08)";
                e.CssClass = "header-bold";
            }
        }

        private void UpdateEditItemsEnabled(bool enabled)
        {
            EditItemsEnabled = enabled;
        }

        private bool IsDeletedConsultantService = false;

        private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
        {
            FocusedGridTabCPPTRowVisibleIndex = args.VisibleIndex;

            try
            {
                if ((GeneralConsultanServiceDto)args.DataItem is null)
                    return;

                IsDeletedConsultantService = ((GeneralConsultanServiceDto)args.DataItem)!.StagingStatus!.Equals("Planned") || ((GeneralConsultanServiceDto)args.DataItem)!.StagingStatus!.Equals("Canceled");
            }
            catch { }

            UpdateEditItemsEnabled(true);
        }

        private async Task NewItem_Click()
        {
            StagingText = "Confirmed";
            FormRegis = new GeneralConsultanServiceDto();
            await SelectData();
            showForm = true;
            IsReferTo = false;
            IsAppoiment = false;
            GeneralConsultantClinical = new GeneralConsultantClinicalAssesmentDto();
            FormInputCPPTGeneralConsultan = new InputCPPTGeneralConsultanCPPT();
            GeneralConsultanCPPTs.Clear();
            GeneralConsultanMedicalSupport = new GeneralConsultanMedicalSupportDto();
        }

        private async Task EditItem_Click()
        {
            await EditItemVoid();
            await ReadHeightWeightPatient();
        }

        private bool LoadingForm { get; set; } = false;

        private async Task EditItemVoid()
        {
            try
            {
                LoadingForm = true;
                showForm = true;

                FormRegis = SelectedDataItems[0].Adapt<GeneralConsultanServiceDto>();

                if (FormRegis.Payment is not null && FormRegis.Payment.Equals("BPJS"))
                {
                    var all = InsurancePolicies.Where(x => x.UserId == FormRegis.PatientId && x.Insurance is not null && x.Insurance.IsBPJS == true && x.Active == true).ToList();
                    Temps = all.Select(x => new InsuranceTemp
                    {
                        InsurancePolicyId = x.Id,
                        InsuranceId = x.InsuranceId,
                        InsuranceName = x.Insurance.Name,
                        PolicyNumber = x.PolicyNumber
                    }).ToList();
                }
                else
                {
                    var all = InsurancePolicies.Where(x => x.UserId == FormRegis.PatientId && x.Insurance is not null && x.Insurance.IsBPJS != true && x.Active == true).ToList();
                    Temps = all.Select(x => new InsuranceTemp
                    {
                        InsurancePolicyId = x.Id,
                        InsuranceId = x.InsuranceId,
                        InsuranceName = x.Insurance.Name,
                        PolicyNumber = x.PolicyNumber
                    }).ToList();
                }

                SelectedBPJSIntegration = new();

                var bpjs = await Mediator.Send(new GetBPJSIntegrationQuery(x => x.InsurancePolicyId == FormRegis.InsurancePolicyId));
                if (bpjs.Count > 0)
                {
                    var count = GeneralConsultanServices.Where(x => x.PatientId == FormRegis.PatientId && x.StagingStatus == "Planned").Count();
                    if (!string.IsNullOrWhiteSpace(bpjs[0].KdProviderPstKdProvider))
                    {
                        var parameter = await Mediator.Send(new GetSystemParameterQuery(x => x.Key.Contains("pcare_code_provider")));
                        if (parameter.Count > 0)
                        {
                            if (!parameter[0].Value.Equals(bpjs[0].KdProviderPstKdProvider))
                            {
                            }
                            else
                            {
                                SelectedBPJSIntegration = bpjs[0];
                            }
                        }
                    }
                }

                if (FormRegis.StagingStatus != "Finished")
                {
                    var text = FormRegis.StagingStatus == "Physician" ? "In Consultation" : FormRegis.StagingStatus;
                    if (!string.IsNullOrWhiteSpace(text) && text.Equals("Procedure Room"))
                    {
                        StagingText = "Procedure Room";
                    }
                    else
                    {
                        var index = Stagings.FindIndex(x => x == text);
                        StagingText = Stagings[index + 1];
                    }
                }

                var patientAllergy = PatientAllergies.FirstOrDefault(x => x.UserId == FormRegis!.PatientId);

                if (patientAllergy != null)
                {
                    PatientAllergy = patientAllergy;
                    FormRegis.IsWeather = !string.IsNullOrWhiteSpace(patientAllergy.Weather);
                    FormRegis.IsPharmacology = !string.IsNullOrWhiteSpace(patientAllergy.Farmacology);
                    FormRegis.IsFood = !string.IsNullOrWhiteSpace(patientAllergy.Food);
                }
                else
                {
                    PatientAllergy = new PatientAllergyDto(); // Create a new instance if no allergy is found
                    FormRegis.IsWeather = FormRegis.IsPharmacology = FormRegis.IsFood = false;
                }

                // Assign null to properties if patientAllergy is null or clear them if a new instance was created
                PatientAllergy.Food ??= null;
                PatientAllergy.Weather ??= null;
                PatientAllergy.Farmacology ??= null;

                switch (FormRegis.StagingStatus)
                {
                    case "Nurse Station":
                        var clinical = await Mediator.Send(new GetGeneralConsultantClinicalAssesmentQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        GeneralConsultanCPPTs = await Mediator.Send(new GetGeneralConsultanCPPTQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        AllGeneralConsultanCPPTs = GeneralConsultanCPPTs.Select(item => item).ToList();

                        if (clinical.Count > 0)
                            GeneralConsultantClinical = clinical[0];
                        break;

                    case "Procedure Room":
                        var supportP = await Mediator.Send(new GetGeneralConsultanMedicalSupportQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        if (supportP.Count > 0)
                            GeneralConsultanMedicalSupport = supportP[0];
                        break;

                    case "Physician":
                        var clinicals = await Mediator.Send(new GetGeneralConsultantClinicalAssesmentQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        if (clinicals.Count > 0)
                            GeneralConsultantClinical = clinicals[0];

                        GeneralConsultanCPPTs = await Mediator.Send(new GetGeneralConsultanCPPTQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        AllGeneralConsultanCPPTs = GeneralConsultanCPPTs.Select(item => item).ToList();

                        var support = await Mediator.Send(new GetGeneralConsultanMedicalSupportQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        if (support.Count > 0)
                            GeneralConsultanMedicalSupport = support[0];

                        SelectedLabTests = LabTestDetails.Where(x => GeneralConsultanMedicalSupport.LabResulLabExaminationtIds != null && GeneralConsultanMedicalSupport.LabResulLabExaminationtIds.Contains(x.Id)).ToList();

                        if (Convert.ToBoolean(UserLogin.IsDoctor) && Convert.ToBoolean(UserLogin.IsPhysicion))
                        {
                            IsPratition = [.. AllDoctors.Where(x => x.Id == UserLogin.Id).ToList()];
                            FormRegis.PratitionerId = IsPratition.Count > 0 ? IsPratition[0].Id : null;
                        }
                        else
                            IsPratition = [.. AllDoctors.Where(x => x.IsDoctor == true && x.IsPhysicion == true).ToList()];

                        FormRegis.StartMaternityLeave = DateTime.Now;
                        FormRegis.EndMaternityLeave = DateTime.Now.AddMonths(3);
                        break;

                    case "Waiting":
                        var support1 = await Mediator.Send(new GetGeneralConsultanMedicalSupportQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        if (support1.Count > 0)
                            GeneralConsultanMedicalSupport = support1[0];

                        var clinicals1 = await Mediator.Send(new GetGeneralConsultantClinicalAssesmentQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        if (clinicals1.Count > 0)
                            GeneralConsultantClinical = clinicals1[0];

                        GeneralConsultanCPPTs = await Mediator.Send(new GetGeneralConsultanCPPTQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));
                        AllGeneralConsultanCPPTs = GeneralConsultanCPPTs.Select(item => item).ToList();

                        SelectedLabTests = LabTestDetails.Where(x => GeneralConsultanMedicalSupport.LabResulLabExaminationtIds != null && GeneralConsultanMedicalSupport.LabResulLabExaminationtIds.Contains(x.Id)).ToList();
                        break;

                    default:
                        break;
                }

                LoadingForm = false;
            }
            catch (Exception exx)
            {
                LoadingForm = false;
                exx.HandleException(ToastService);
            }
        }

        private void CheckedChanged(bool value)
        {
            FormRegis.IsMaternityLeave = value;

            if (value)
            {
                FormRegis.StartMaternityLeave = DateTime.Now;
                FormRegis.EndMaternityLeave = DateTime.Now.AddMonths(3);
            }
            else
            {
                FormRegis.EndMaternityLeave = null;
            }
        }

        private async Task OnRowDoubleClick(GridRowClickEventArgs e)
        {
            await EditItemVoid();
        }

        private void ColumnChooserButton_Click()
        {
            Grid.ShowColumnChooser();
        }

        private void DeleteItem_Click()
        {
            Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
        }

        private async Task OnCancel()
        {
            FormRegis = new();
            GeneralConsultantClinical = new GeneralConsultantClinicalAssesmentDto();
            await LoadData();
            showForm = false;
            PopUpVisible = false;
        }

        private void OnCancelReferTo()
        {
            PopUpVisible = false;
        }

        private void OnCancelAppoimentPopup()
        {
            PopUpAppoiment = false;
        }

        private void OnCancelProcedureRoom()
        {
            PopUpProcedureRoom = false;
        }

        private async Task OnDelete(GridDataItemDeletingEventArgs e)
        {
            try
            {
                if (SelectedDataItems is null)
                    return;

                if (SelectedDataItems is not null && SelectedDataItems.Count == 1)
                {
                    await Mediator.Send(new DeleteGeneralConsultanServiceRequest(((GeneralConsultanServiceDto)e.DataItem).Id));
                }
                else
                {
                    var a = SelectedDataItems.Adapt<List<GeneralConsultanServiceDto>>();

                    a = a.Where(x => x.StagingStatus == "Planned" || x.StagingStatus == "Canceled").ToList();

                    await Mediator.Send(new DeleteGeneralConsultanServiceRequest(ids: a.Select(x => x.Id).ToList()));
                }
                await LoadData();
            }
            catch { }
        }

        private async Task Refresh_Click()
        {
            await LoadData();
        }

        #region Function

        private bool IsEnableField()
        {
            if (true)
                return true;

            return false;
        }

        private bool PopUpVisible = false;
        private bool PopUpHistoricalMedical = false;
        private bool PopUpAppoimentPending = false;
        private bool PopUpAppoiment = false;
        private bool PopUpProcedureRoom = false;
        private bool IsReferTo = false;
        private bool IsAppoiment = false;

        private GeneralConsultanServiceDto GeneralConsultanTemp = new();

        private async Task OnReferToClick()
        {
            GeneralConsultanTemp = FormRegis;
            IsReferTo = true;
            PopUpVisible = true;

            try
            {
                IsPratition = AllDoctors.Where(x => x.DoctorServiceIds is not null && x.DoctorServiceIds.Contains(FormRegis.ServiceId.GetValueOrDefault())).ToList();

                await SetTimeSchedule();
            }
            catch (Exception ex)
            {
                ex.HandleException(ToastService);
            }
        }

        private async Task CloseReferTo()
        {
            PopUpVisible = false;
            var value = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.Id == FormRegis.Id));
            if (value.Count > 0)
                FormRegis = value[0];
        }

        private async Task CloseAppoimentPopUp()
        {
            PopUpAppoiment = false;
            var value = await Mediator.Send(new GetGeneralConsultanServiceQuery(x => x.Id == FormRegis.Id));
            if (value.Count > 0)
                FormRegis = value[0];
        }

        private async Task OnAppoimentPopUpClick()
        {
            IsAppoiment = true;
            PopUpAppoiment = true;

            try
            {
                IsPratition = AllDoctors.Where(x => x.DoctorServiceIds is not null && x.DoctorServiceIds.Contains(FormRegis.ServiceId.GetValueOrDefault())).ToList();

                await SetTimeSchedule();
            }
            catch (Exception ex)
            {
                ex.HandleException(ToastService);
            }
        }

        private void OnClickPopUpHistoricalMedical()
        {
            PopUpHistoricalMedical = true;
        }

        private async Task OnClickPopUpPopUpProcedureRoom()
        {
            LabUoms = await Mediator.Send(new GetLabUomQuery());
            LabTests = await Mediator.Send(new GetLabTestQuery());

            LabResultDetails = await Mediator.Send(new GetLabResultDetailQuery(x => x.GeneralConsultanMedicalSupportId == GeneralConsultanMedicalSupport.Id));

            var support = await Mediator.Send(new GetGeneralConsultanMedicalSupportQuery(x => x.GeneralConsultanServiceId == FormRegis.Id));

            if (support.Count > 0)
                GeneralConsultanMedicalSupport = support[0];

            DeletedLabTestIds.Clear();

            //LabResultDetails = await Mediator.Send(new GetLabResultDetailQuery(x => x.GeneralConsultanMedicalSupportId == GeneralConsultanMedicalSupport.Id));
            DeletedLabTestIds = LabResultDetails.Select(x => x.Id).ToList();

            PopUpProcedureRoom = true;
        }

        private void OnClickPopUpAppoimentPending()
        {
            PopUpAppoimentPending = true;
        }

        private void OnClickReferralPrescriptionConcoction()
        {
            NavigationManager.NavigateTo($"/pharmacy/prescription/{FormRegis.Id}");
        }

        private void SelectedCountryChanged(string country)
        {
            FormRegis.TypeRegistration = country;
            ToastService.ShowInfo(country);
        }

        private async Task SelectedItemServiceChanged(ServiceDto e)
        {
            try
            {
                if (e is null)

                {
                    FormRegis.PratitionerId = null;
                    IsPratition.Clear();
                    return;
                }

                IsPratition = AllDoctors.Where(x => x.DoctorServiceIds is not null && x.DoctorServiceIds.Contains(e.Id)).ToList();

                await SetTimeSchedule();
            }
            catch (Exception ex)
            {
                ex.HandleException(ToastService);
            }
        }

        private async Task SelectedItemPhysicianChanged(UserDto? e)
        {
            try
            {
                await SetTimeSchedule();
            }
            catch (Exception ex)
            {
                ex.HandleException(ToastService);
            }
        }

        private IEnumerable<LabTestDetailDto> SelectedLabTests = [];

        private async Task SelectedItemRegistrationDateChanged(DateTime e)
        {
            FormRegis.RegistrationDate = e;
            FormRegis.AppoimentDate = e;
            await SetTimeSchedule();
        }

        private void SelectedMaternityStartDateChanged(DateTime e)
        {
            FormRegis.StartMaternityLeave = e;
            FormRegis.EndMaternityLeave = FormRegis.StartMaternityLeave.AddMonths(3);
        }

        private void SelectedItemPaymentChanged(string e)
        {
            Insurances.Clear();
            Temps.Clear();

            if (e is null)
                return;

            FormRegis.Payment = e;
            _PaymentMethod = e;

            if (PaymentMethod.Equals("BPJS"))
            {
                var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS == true && x.Active == true).ToList();
                Temps = all.Select(x => new InsuranceTemp
                {
                    InsurancePolicyId = x.Id,
                    InsuranceId = x.InsuranceId,
                    InsuranceName = x.Insurance.Name,
                    PolicyNumber = x.PolicyNumber
                }).ToList();
            }
            else
            {
                var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS != true && x.Active == true).ToList();
                Temps = all.Select(x => new InsuranceTemp
                {
                    InsurancePolicyId = x.Id,
                    InsuranceId = x.InsuranceId,
                    InsuranceName = x.Insurance.Name,
                    PolicyNumber = x.PolicyNumber
                }).ToList();
            }
        }

        private BPJSIntegrationDto SelectedBPJSIntegration { get; set; } = new();

        private async Task SelectedItemInsurancePolicyChanged(InsuranceTemp result)
        {
            ToastService.ClearInfoToasts();

            SelectedBPJSIntegration = new();

            if (result is null)
                return;

            ToastService.ClearWarningToasts();

            var bpjs = await Mediator.Send(new GetBPJSIntegrationQuery(x => x.InsurancePolicyId == result.InsurancePolicyId));
            if (bpjs.Count > 0)
            {
                var count = GeneralConsultanServices.Where(x => x.PatientId == FormRegis.PatientId && x.StagingStatus == "Planned").Count();
                if (!string.IsNullOrWhiteSpace(bpjs[0].KdProviderPstKdProvider))
                {
                    var parameter = await Mediator.Send(new GetSystemParameterQuery(x => x.Key.Contains("pcare_code_provider")));
                    if (parameter.Count > 0)
                    {
                        if (!parameter[0].Value.Equals(bpjs[0].KdProviderPstKdProvider))
                        {
                            ToastService.ShowWarning($"Participants are not registered as your Participants. Participants have visited your FKTP {count} times.");
                        }
                        else
                        {
                            SelectedBPJSIntegration = bpjs[0];
                        }
                    }
                }
                else
                {
                    ToastService.ShowWarning($"Participants are not registered as your Participants. Participants have visited your FKTP {count} times.");
                }
            }
        }

        private void SelectedItemPatientChanged(UserDto e)
        {
            if (e is null)
            {
                FormRegis.InsurancePolicyId = null;
                FormRegis.NoRM = null;
                FormRegis.IdentityNumber = null;
                PatientAllergy.Food = null;
                PatientAllergy.Weather = null;
                PatientAllergy.Farmacology = null;
                FormRegis.IsWeather = false;
                FormRegis.IsPharmacology = false;
                FormRegis.IsFood = false;
                return;
            }

            var value = e.Id;

            long PatientsId = value;
            this.PatientsId = value;

            var item = patients.FirstOrDefault(x => x.Id == PatientsId);
            FormRegis.Patient = item;

            try
            {
                FormRegis.NoRM = item.NoRm ?? null;
                FormRegis.IdentityNumber = item.NoId ?? null;
                FormRegis.PatientId = item.Id;
            }
            catch { }

            if (FormRegis.Payment is not null && FormRegis.Payment.Equals("BPJS"))
            {
                var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS == true).ToList();
                Temps = all.Select(x => new InsuranceTemp
                {
                    InsurancePolicyId = x.Id,
                    InsuranceId = x.InsuranceId,
                    InsuranceName = x.Insurance.Name,
                    PolicyNumber = x.PolicyNumber
                }).ToList();
            }
            else
            {
                var all = InsurancePolicies.Where(x => x.UserId == PatientsId && x.Insurance.IsBPJS != true).ToList();
                Temps = all.Select(x => new InsuranceTemp
                {
                    InsurancePolicyId = x.Id,
                    InsuranceId = x.InsuranceId,
                    InsuranceName = x.Insurance.Name,
                    PolicyNumber = x.PolicyNumber
                }).ToList();
            }

            var patientAlergy = PatientAllergies.Where(x => x.UserId == item!.Id).FirstOrDefault();

            if (patientAlergy is not null)
            {
                PatientAllergy = patientAlergy;
                PatientAllergy.Food = patientAlergy.Food;
                PatientAllergy.Weather = patientAlergy.Weather;
                PatientAllergy.Farmacology = patientAlergy.Farmacology;
                FormRegis.IsWeather = !string.IsNullOrWhiteSpace(patientAlergy.Weather);
                FormRegis.IsPharmacology = !string.IsNullOrWhiteSpace(patientAlergy.Farmacology);
                FormRegis.IsFood = !string.IsNullOrWhiteSpace(patientAlergy.Food);
            }
            else
            {
                PatientAllergy.Food = null;
                PatientAllergy.Weather = null;
                PatientAllergy.Farmacology = null;
                FormRegis.IsWeather = false;
                FormRegis.IsPharmacology = false;
                FormRegis.IsFood = false;
            }
        }

        private void SelectedItemChanged(String e)
        {
            if (e is null)
            {
                return;
            }

            if (e.Equals("Emergency"))
            {
                Method =
                [
                    "General",
                    "Work Related Injury",
                    "Road Accident Injury",
                ];
                FormRegis.TypeMedical = Method[0];
            }
            else if (e.Equals("MCU"))
            {
                Method =
                [
                    "Annual MCU",
                    "Pre Employment MCU",
                    "Oil & Gas UK",
                    "HIV & AIDS",
                    "Covid19*",
                    "Drug & Alcohol Test",
                    "Maternity Checkup"
                ];
                FormRegis.TypeMedical = Method[0];
            }
            else if (e.Equals("General Consultation"))

                FormRegis.TypeMedical = null;
        }
    }

    #endregion Function
}