@page "/clinic-service/accident"
@rendermode InteractiveServer

<PageTitle>@Helper.APP_NAME - Accident</PageTitle>

@if (IsAccess)
{
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-md-6">
                    <div class="row">
                        <div class="col">
                            <h1>Accident</h1>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    @if (!ShowForm)
                    {
                        <div class="card">
                            <DxLoadingPanel @bind-Visible="PanelVisible"
                                            IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                            IsContentBlocked="true"
                                            ApplyBackgroundShading="true"
                                            IndicatorAreaVisible="false"
                                            Text="Fetching Data...">
                                <DxGrid @ref="Grid"
                                        Data="Data"
                                        @bind-SelectedDataItems="@SelectedDataItems"
                                        EditModelSaving="OnSaving"
                                        DataItemDeleting="OnDeleting"
                                        FocusedRowChanged="Grid_FocusedRowChanged"
                                        PagerNavigationMode="PagerNavigationMode.InputBox"
                                        EditorRenderMode="GridEditorRenderMode.Detached"
                                        PageSize="10"
                                        FilterMenuButtonDisplayMode="GridFilterMenuButtonDisplayMode.Always"
                                        KeyFieldName="Id"
                                        CustomizeDataRowEditor="@GridExtention.Grid_CustomizeDataRowEditor"
                                        AllowSelectRowByClick="true"
                                        PagerPosition="GridPagerPosition.Bottom"
                                        PageSizeSelectorVisible="true"
                                        PageSizeSelectorItems="@(new int[] { 10, 20, 50, 100 })"
                                        PageSizeSelectorAllRowsItemVisible="true"
                                        PagerSwitchToInputBoxButtonCount="10"
                                        FocusedRowEnabled="true"
                                        PagerVisibleNumericButtonCount="10"
                                        ShowGroupPanel="true"
                                        AutoExpandAllGroupRows="true"
                                        ShowFilterRow="true"
                                        CustomizeElement="@GridExtention.Grid_CustomizeElement"
                                        ShowSearchBox="true"
                                        SelectAllCheckboxMode="GridSelectAllCheckboxMode.Mixed"
                                        KeyboardNavigationEnabled="true">

                                    <ToolbarTemplate>
                                        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
                                            <DxToolbarItem Visible="@UserAccessCRUID.Create" Text="New" Click="NewItem_Click" IconCssClass="fa-solid fa-plus" />
                                            <DxToolbarItem Visible="@UserAccessCRUID.Update" Text="Edit" Click="EditItem_Click" IconCssClass="fa-solid fa-pen-to-square" Enabled="SelectedDataItems.Count > 0 && Data.Count > 0" />
                                            <DxToolbarItem Visible="@UserAccessCRUID.Delete" Text="Delete" Click="DeleteItem_Click" IconCssClass="fa-solid fa-trash" Enabled="SelectedDataItems.Count > 0 && Data.Count > 0" />
                                            <DxToolbarItem BeginGroup="true" Text="Refresh" Click="Refresh_Click" IconCssClass="fa-solid fa-arrows-rotate" />
                                            <DxToolbarItem Text="Column Chooser" Click="(() => GridExtention.ColumnChooserButton_Click(Grid))" BeginGroup="true" IconCssClass="fa-solid fa-table-columns" />
                                            <DxToolbarItem Text="Export" BeginGroup="true" IconCssClass="fa-solid fa-file-export">
                                                <Items>
                                                    <DxToolbarItem Text="To CSV" Click="(() => GridExtention.ExportCsvItem_Click(Grid))" />
                                                    <DxToolbarItem Text="To XLSX" Click="(() => GridExtention.ExportXlsxItem_Click(Grid))" />
                                                    <DxToolbarItem Text="To XLS" Click="(() => GridExtention.ExportXlsItem_Click(Grid))" />
                                                </Items>
                                            </DxToolbarItem>
                                        </DxToolbar>
                                    </ToolbarTemplate>

                                    <Columns>
                                        <DxGridSelectionColumn Width="15px" />
                                        <DxGridDataColumn MinWidth="200" FieldName="@nameof(AccidentDto.AreaOfYard)" Caption="Test" SortIndex="0" />
                                    </Columns>
                                </DxGrid>
                            </DxLoadingPanel>
                        </div>
                    }
                    else
                    {
                        <div class="row justify-content-end mb-3">
                            <div class="col-auto align-self-end">
                                <DxTabs>
                                    <DxTab Text="@EnumStatusAccident.ReturnToWork.GetDisplayName()"></DxTab>
                                    <DxTab Text="@EnumStatusAccident.RestrictedWorkCase.GetDisplayName()"></DxTab>
                                    <DxTab Text="@EnumStatusAccident.LostWorkDaysCase.GetDisplayName()"></DxTab>
                                    <DxTab Text="@EnumStatusAccident.FatalityCase.GetDisplayName()"></DxTab>
                                </DxTabs>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-body">
                                <div class="w-100">
                                    <div class="col align-self-center">
                                        <DxButton IconCssClass="fa-solid fa-check" Text="@StagingText" RenderStyle="ButtonRenderStyle.Primary"></DxButton>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <span class="fw-bolder">@(Accident.Id == 0 ? "Add Accident" : "Edit Accident")</span>
                            </div>

                            <div class="card-body">
                                <EditForm Model="Accident" Context="EditForm">
                                    <DataAnnotationsValidator />

                                    <div class="row w-100">
                                        @*     <div class="col-md-12">
                                <DxFormLayout CssClass="w-100">
                                @if (Accident.Id != 0)
                                {
                                <DxFormLayoutItem ColSpanMd="12">
                                <h3 class="fw-bolder">@Accident.Test</h3>
                                </DxFormLayoutItem>
                                }
                                </DxFormLayout>
                                </div> *@

                                        <div class="col-md-6">
                                            <DxFormLayout CssClass="w-100">

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Employee" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Employee..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem Caption="Employee No" CaptionCssClass="normal-caption" ColSpanMd="12">
                                                    <DxTextBox ShowValidationIcon="true"
                                                               @bind-Text="Accident.NatureOfInjury"
                                                               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                               NullText="Employee No" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Department" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Department..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Nature Of Injury" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Nature Of Injury..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Cause Of Injury" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Cause Of Injury..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Treatment" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Treatment..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>
                                            </DxFormLayout>
                                        </div>
                                        <div class="col-md-6">
                                            <DxFormLayout CssClass="w-100">
                                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Date Of Occurrence" ColSpanMd="12">
                                                    <DxDateEdit ShowValidationIcon="true"
                                                                @bind-Date="Accident.DateOfFirstTreatment"
                                                                Mask="@DateTimeMask.ShortDate"
                                                                NullText="Select Date Of Occurrence">
                                                    </DxDateEdit>
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Date Of First Treatment" ColSpanMd="12">
                                                    <DxDateEdit ShowValidationIcon="true"
                                                                @bind-Date="Accident.DateOfFirstTreatment"
                                                                Mask="@DateTimeMask.ShortDate"
                                                                NullText="Select Date Of First Treatment">
                                                    </DxDateEdit>
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem Caption="Area Of Yard" CaptionCssClass="normal-caption" ColSpanMd="12">
                                                    <DxTextBox ShowValidationIcon="true"
                                                               @bind-Text="Accident.NatureOfInjury"
                                                               ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                               NullText="Area Of Yard" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Part of Body" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Part Of Body..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>

                                                <DxFormLayoutItem CaptionCssClass="normal-caption" Caption="Class" ColSpanMd="12">
                                                    <DxComboBox ShowValidationIcon="true" Data="@Data"
                                                                NullText="Select Class..."
                                                                ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                                                FilteringMode="@DataGridFilteringMode.Contains"
                                                                @bind-Value="Accident.Id">
                                                    </DxComboBox>
                                                    <ValidationMessage For="@(() => Accident.Id)" />
                                                </DxFormLayoutItem>
                                            </DxFormLayout>
                                        </div>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
}
else
{
    <LoadingIndicatorLayout></LoadingIndicatorLayout>
}

@code {

    #region UserLoginAndAccessRole

    [Inject]
    public UserInfoService UserInfoService { get; set; }

    private GroupMenuDto UserAccessCRUID = new();
    private User UserLogin { get; set; } = new();
    private bool IsAccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                await GetUserInfo();
            }
            catch { }
        }
    }

    private async Task GetUserInfo()
    {
        try
        {
            var user = await UserInfoService.GetUserInfo();
            IsAccess = user.Item1;
            UserAccessCRUID = user.Item2;
            UserLogin = user.Item3;
        }
        catch { }
    }

    #endregion UserLoginAndAccessRole

    private string StagingText = EnumStatusAccident.RestrictedWorkCase.GetDisplayName();

    private bool PanelVisible { get; set; } = true;
    private bool ShowForm { get; set; } = false;
    private int FocusedRowVisibleIndex { get; set; }

    public IGrid Grid { get; set; }
    private IReadOnlyList<object> SelectedDataItems { get; set; } = [];

    private AccidentDto Accident { get; set; } = new();
    private List<AccidentDto> Data = [];

    protected override async Task OnInitializedAsync()
    {
        PanelVisible = true;

        await GetUserInfo();
        await LoadData();
    }

    public async Task OnSaving(GridEditModelSavingEventArgs e)
    {

    }

    private async Task LoadData()
    {
        PanelVisible = true;
        PanelVisible = false;
    }

    public async Task OnDeleting(GridDataItemDeletingEventArgs e)
    {

    }

    private async Task ExportToExcel()
    {

    }

    private async Task Refresh_Click()
    {
        await LoadData();
    }
    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndex = args.VisibleIndex;
    }

    private async Task NewItem_Click()
    {
        ShowForm = true;
        Accident = new();
    }

    private async Task EditItem_Click()
    {
        await Grid.StartEditRowAsync(FocusedRowVisibleIndex);
    }

    private void DeleteItem_Click()
    {
        Grid.ShowRowDeleteConfirmation(FocusedRowVisibleIndex);
    }

}