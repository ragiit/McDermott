@page "/login"
@using McDermott.Application.Features.Services
@using McDermott.Domain.Entities
@using McDermott.Persistence.Context
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@inject CustomAuthenticationStateProvider CustomAuth

<PageTitle>McHealthCare - Login</PageTitle>

<div class="hold-transition login-page">
    <div class="login-box">
        <!-- /.login-logo -->
        @*  <div class="card-header text-center">
        <a href="#" class="h1 no-underline">
        <img src="https://www.ikariera.cz/uploads/companies/file/28129/22192/17871/c1c103e1-56b0-45cf-b02d-f6acbc7276b8/Logo%20-%20mcdermott_symbol_color%20500x500%2C%2050hrana.png" alt="Logo McHealthCare" style="max-width: 100px; height: auto; vertical-align: middle;"> <!-- Ganti url_ke_gambar_anda dengan URL gambar Anda -->
        </a>
        </div> *@
        <div class="card card-outline card-primary">
            @*  <div class="card-header text-center">
            <a href="../../index2.html" class="h1 no-underline"><b>Mc</b>HealthCare</a>
            </div> *@
            <div class="card-header text-center">
                <a href="#" class="h1 no-underline">
                    <img src="https://www.ikariera.cz/uploads/companies/file/28129/22192/17871/c1c103e1-56b0-45cf-b02d-f6acbc7276b8/Logo%20-%20mcdermott_symbol_color%20500x500%2C%2050hrana.png" alt="Logo McHealthCare" style="max-width: 100px; height: auto; vertical-align: middle;"> <!-- Ganti url_ke_gambar_anda dengan URL gambar Anda -->
                </a>
            </div>
            <div class="card-body">
                @* <a href="../../index2.html" class="h1 no-underline"><b>Mc</b>HealthCare</a>
                <b class="login-box-msg">Mc</b>HealthCare *@
                @* <p class="text-center mt-2 mb-2">Sign in to start your session</p> *@
                <h5 class="text-center mt-2"><b>Welcome</b></h5>
                <p class="text-center mt-1 mb-2">Please login using your account to continue</p>

                @*  <div hidden="@isSuccess" class="alert alert-danger alert-dismissible">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <h5><i class="icon fas fa-ban"></i> Alert!</h5>
                @text
                </div> *@

                @*   <form>
                <div class="input-group mb-3">
                <input @bind="User.Email" id="exampleInputEmail1" type="email" class="form-control" placeholder="Email">
                <div class="input-group-append">
                <div class="input-group-text">
                <span class="fas fa-envelope"></span>
                </div>
                </div>

                </div>
                <div class="input-group mb-3">
                <input @bind="User.Password" type="password" class="form-control" placeholder="Password">
                <div class="input-group-append">
                <div class="input-group-text">
                <span class="fas fa-lock"></span>
                </div>
                </div>
                </div>
                <button type="button" @onclick="OnLogin" class="btn btn-block btn-primary">
                Sign in
                </button>

                </form> *@

                <EditForm Model="@LoginForm" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit"
                          OnInvalidSubmit="@HandleInvalidSubmit" FormName="FormUser">
                    <DataAnnotationsValidator />
                    <DxFormLayout CssClass="col-md">
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Email" ColSpanMd="12" BeginRow="true">
                            <DxMaskedInput @bind-Value="LoginForm.Email"
                                           Mask="@EmailMask"
                                           NullText="mail@domain.com"
                                           ShowValidationIcon="true"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           InputId="EmailId"
                                           MaskMode="MaskMode.RegEx">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-envelope" />
                                </Buttons>
                                <ChildContent>
                                    <DxRegExMaskProperties MaskAutoCompleteMode="@MaskAutoCompleteMode.Strong"
                                                           Placeholder="@('_')"
                                                           PlaceholdersVisible="true" />
                                </ChildContent>
                            </DxMaskedInput>
                            <ValidationMessage For="@(()=>LoginForm.Email)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Password" ColSpanMd="12" BeginRow="true">
                            <DxTextBox @bind-Text="@LoginForm.Password"
                                       InputId="PasswordId"
                                       ShowValidationIcon="true"
                                       NullText="Password" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       Password="true">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-lock" />
                                </Buttons>
                            </DxTextBox>
                            <ValidationMessage For="@(()=>LoginForm.Password)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                            <div class="row">
                                <div class="col-12">
                                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Contained" CssClass="rounded-button w-100 mt-3" IconCssClass="fa-solid fa-right-to-bracket" Text="LOGIN" SubmitFormOnClick="true" />
                                </div>
                            </div>
                            @* <DxButton RenderStyleMode="@ButtonRenderStyleMode.Contained" RenderStyle="ButtonRenderStyle.Primary" CssClass="rounded-button mt-2" IconCssClass="fa-solid fa-right-to-bracket" Text="Sign In" SubmitFormOnClick="true" /> *@
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .rounded-button {
        border-radius: 13px; /* Sesuaikan dengan radius yang Anda inginkan */
    }
</style>

@code {
    private LoginTemp LoginForm = new();
    public class LoginTemp
    {
        [Required]
        public string? Email { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    #region MaskedInput
    string EmailMask { get; set; } = @"(\w|[.-])+@(\w|-)+\.(\w|-){2,4}";
    string EmailLink { get; set; } = "mailto:test@example.com";
    void OnEmailChanged(string email)
    {
        User.Email = email;
        EmailLink = $"mailto:{email}";
    }
    #endregion
    private GroupMenuDto UserAccessCRUID = new();
    private bool IsAccess = false;

    private async Task HandleValidSubmit()
    {
        FormValidationState = true;

        await OnLogin();
    }

    private bool FormValidationState = true;
    private void HandleInvalidSubmit()
    {
        if (string.IsNullOrWhiteSpace(LoginForm.Password) || string.IsNullOrWhiteSpace(LoginForm.Email))
        {
            ToastService.ClearInfoToasts();
            FormValidationState = false;
            ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
            return;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Helper.DeleteFile("Hasil-Ronsen.jpg");
        // try
        // {
        //     var result = await NavigationManager.CheckAccessUser(oLocal);
        //     IsAccess = result.Item1;
        //     UserAccessCRUID = result.Item2;
        // }
        // catch { }

    }
    private async Task DownloadFile()
    {
        try
        {
            // await Helper.DownloadFile(HttpContextAccessor, Http, JsRuntime);
            // Replace "api/download/file" with the actual API endpoint for downloading files
            var response = await HttpClient.GetAsync("http://localhost:5000/Uploads/Hasil-Ronsen.jpeg");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStreamAsync();
                var fileName = "Hasil-Ronsen.jpeg"; // Change the file name if necessary

                // Convert file content to Base64 string
                var bytes = new byte[content.Length];
                await content.ReadAsync(bytes, 0, (int)content.Length);
                var base64Content = Convert.ToBase64String(bytes);

                // Trigger file download and specify file name
                await JsRuntime.InvokeVoidAsync("downloadFile", new
                {
                    fileName = fileName,
                    content = base64Content
                });
            }
            else
            {
                // Handle error
                // You might want to show an error message or log the error
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
            // Handle exception
            // You might want to show an error message or log the exception
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {

                await DownloadFile();
            }
            catch { }
        }
    }

    private void ClickLogin()
    {
        NavigationManager.NavigateTo("/", true);
    }

    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    private async Task OnLogin()
    {
        // toastService.ShowSuccess("Success");
        // toastService.ShowInfo("Info");
        // toastService.ShowWarning("Warning");
        // toastService.ShowError("Error");

        try
        {
            ToastService.ClearErrorToasts();

            // var user = await Mediator.Send(new GetUserQuery(x => x.Email == LoginForm.Email && x.Password == LoginForm.Password));
            var user = await Mediator.Send(new GetUserQuery(x => x.Email == LoginForm.Email && x.Password == Helper.HashMD5(LoginForm.Password)));

            if (!FormValidationState)
            {
                ToastService.ClearInfoToasts();
                ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
                return;
            }

            if (user.Count > 0 && !string.IsNullOrWhiteSpace(LoginForm!.Email) && !string.IsNullOrWhiteSpace(LoginForm.Password))
            {
                // Helper.UserLogin = user;

                // var claims = new List<Claim>
                // {
                //     new Claim(ClaimTypes.Name, user.Name),
                //     new Claim(ClaimTypes.Role, Convert.ToBoolean(user.IsEmployee) ? "Employee" : "")
                // };
                // // var claims = new List<Claim>
                // // {
                // //     new Claim(ClaimTypes.Name, "username"),
                // //     new Claim(ClaimTypes.Role, "Admin"),
                // //     // Tambahkan klaim tambahan jika diperlukan
                // // };

                // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                // var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

                // await HttpContextAccessor?.HttpContext?.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);
                // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

                // await oLocal.GetItemAsync<string>("asd");

                // var a = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                // await a.UpdateAuthenticationState(user);

                // await _protectedSessionStorage.SetAsync("UserSession", b);
                // await _protectedSessionStorage.SetAsync("UserMenuSession", DetailMenuDtos);

                string serialize = JsonConvert.SerializeObject(user[0]);
                var encrypt = Helper.Encrypt(serialize);

                // await oLocal.SetItemAsync("dotnet", encrypt);
                await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_INFO, encrypt, 2);

                // if (user[0].GroupId is not null)
                // {
                //     var g = await Mediator.Send(new GetGroupMenuByGroupIdRequest((long)user[0].GroupId));

                //     var encryptMenu = Helper.Encrypt(JsonConvert.SerializeObject(g));

                //     await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_GROUP, encryptMenu, 1);
                //     await oLocal.SetItemAsync("dotnet2", encryptMenu);
                // }
                // else
                // {
                //     await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_GROUP, string.Empty, 1);
                //     await oLocal.SetItemAsync("dotnet2", new List<string>());
                // }

                var a = (CustomAuthenticationStateProvider)CustomAuth;
                await a.UpdateAuthState(encrypt);

                NavigationManager.NavigateTo("", forceLoad: true);

                // var claims = new List<Claim>
                //     {
                //         new Claim("CustomClaimType", "CustomClaimValue")
                //     };

                // var userIdentity = new ClaimsIdentity(claims, "login");

                // ClaimsPrincipal principal = new ClaimsPrincipal(userIdentity);

                // // Serialize principal
                // var authenticationState = new AuthenticationState(principal);
                // AuthenticationStateProvider.NotifyAuthenticationStateChanged(Task.FromResult(authenticationState));

                // isSuccess = true;
            }
            else
            {
                ToastService.ShowError("Invalid Email or Password!");
                // if (string.IsNullOrWhiteSpace(User.Email) || string.IsNullOrWhiteSpace(User.Password))
                // {
                //     text = "Please insert the Email and Password";
                // }
                // isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
        }
    }
}