@page "/login"
@using McDermott.Application.Features.Services
@using McDermott.Domain.Entities
@using McDermott.Persistence.Context
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json
@using System.Security.Claims
@using static McDermott.Application.Features.Commands.GroupCommand
@using static McDermott.Application.Features.Commands.MenuCommand

@inject ApplicationDbContext DataContext
@inject CustomAuthenticationStateProvider CustomAuth

<PageTitle>McDermott - Login</PageTitle>

<div class="hold-transition login-page">
    <div class="login-box">
        <!-- /.login-logo -->
        <div class="card card-outline card-primary">
            <div class="card-header text-center">
                <a href="../../index2.html" class="h1"><b>Mc</b>Dermott</a>
            </div>
            <div class="card-body">
                <p class="login-box-msg">Sign in to start your session</p>

                @*  <div hidden="@isSuccess" class="alert alert-danger alert-dismissible">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <h5><i class="icon fas fa-ban"></i> Alert!</h5>
                @text
                </div> *@

                <form>
                    <div class="input-group mb-3">
                        <input @bind="User.Email" id="exampleInputEmail1" type="email" class="form-control" placeholder="Email">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <input @bind="User.Password" type="password" class="form-control" placeholder="Password">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                    </div>
                    <button type="button" @onclick="OnLogin" class="btn btn-block btn-primary">
                        Sign in
                    </button>
                    <div class="row  justify-content-end">

                        <div class="col-auto align-self-end">
                            <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" IconCssClass="fa-solid fa-floppy-disk" Text="Sign In" SubmitFormOnClick="true" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {

    private GroupMenuDto UserAccessCRUID = new();
    private bool IsAccess = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await NavigationManager.CheckAccessUser(oLocal);
            IsAccess = result.Item1;
            UserAccessCRUID = result.Item2;
        }
        catch { }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                var result = await NavigationManager.CheckAccessUser(oLocal);
                IsAccess = result.Item1;
                UserAccessCRUID = result.Item2;
            }
            catch { }
        }
    }

    private void ClickLogin()
    {
        NavigationManager.NavigateTo("/", true);
    }

    private User? User = new User
        {
            Email = "admin@example.com",
            Password = "123"
        };

    private async Task OnLogin()
    {
        var user = await DataContext.Users.FirstOrDefaultAsync(x => x.Email == User.Email && x.Password == User.Password);
        if (user is not null && !string.IsNullOrWhiteSpace(User!.Email) && !string.IsNullOrWhiteSpace(User.Password))
        {
            // Helper.UserLogin = user;

            // var claims = new List<Claim>
            // {
            //     new Claim(ClaimTypes.Name, user.Name),
            //     new Claim(ClaimTypes.Role, Convert.ToBoolean(user.IsEmployee) ? "Employee" : "")
            // };
            // // var claims = new List<Claim>
            // // {
            // //     new Claim(ClaimTypes.Name, "username"),
            // //     new Claim(ClaimTypes.Role, "Admin"),
            // //     // Tambahkan klaim tambahan jika diperlukan
            // // };

            // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            // var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            // await HttpContextAccessor?.HttpContext?.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);
            // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

            // await oLocal.GetItemAsync<string>("asd");

            // var a = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
            // await a.UpdateAuthenticationState(user);

            // await _protectedSessionStorage.SetAsync("UserSession", b);
            // await _protectedSessionStorage.SetAsync("UserMenuSession", DetailMenuDtos);

            string serialize = JsonConvert.SerializeObject(user);
            var encrypt = Helper.Encrypt(serialize);

            await oLocal.SetItemAsync("dotnet", encrypt);

            if (user.GroupId is not null)
            {
                var g = await Mediator.Send(new GetGroupMenuByGroupIdRequest((int)user.GroupId));

                var encryptMenu = Helper.Encrypt(JsonConvert.SerializeObject(g));

                await oLocal.SetItemAsync("dotnet2", encryptMenu);
            }
            else
            {
                await oLocal.SetItemAsync("dotnet2", new List<string>());
            }

            var a = (CustomAuthenticationStateProvider)CustomAuth;
            await a.UpdateAuthState(user);

            NavigationManager.NavigateTo("", forceLoad: true);

            // var claims = new List<Claim>
            //     {
            //         new Claim("CustomClaimType", "CustomClaimValue")
            //     };

            // var userIdentity = new ClaimsIdentity(claims, "login");

            // ClaimsPrincipal principal = new ClaimsPrincipal(userIdentity);

            // // Serialize principal
            // var authenticationState = new AuthenticationState(principal);
            // AuthenticationStateProvider.NotifyAuthenticationStateChanged(Task.FromResult(authenticationState));

            // isSuccess = true;
        }
        else
        {

            // if (string.IsNullOrWhiteSpace(User.Email) || string.IsNullOrWhiteSpace(User.Password))
            // {
            //     text = "Please insert the Email and Password";
            // }
            // isSuccess = false;
        }
    }

}