@page "/login"
@using DevExtreme.AspNet.Data.ResponseModel
@using McDermott.Application.Features.Services
@using McDermott.Domain.Entities
@using McDermott.Persistence.Context
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using System.Text
@using Newtonsoft.Json
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@inject CustomAuthenticationStateProvider CustomAuth

<PageTitle>McHealthCare - Login</PageTitle>

<div class="hold-transition login-page">
    <div class="login-box">
        <!-- /.login-logo -->
        @*  <div class="card-header text-center">
        <a href="#" class="h1 no-underline">
        <img src="https://www.ikariera.cz/uploads/companies/file/28129/22192/17871/c1c103e1-56b0-45cf-b02d-f6acbc7276b8/Logo%20-%20mcdermott_symbol_color%20500x500%2C%2050hrana.png" alt="Logo McHealthCare" style="max-width: 100px; height: auto; vertical-align: middle;"> <!-- Ganti url_ke_gambar_anda dengan URL gambar Anda -->
        </a>
        </div> *@
        <div class="card card-outline card-primary">
            @*  <div class="card-header text-center">
            <a href="../../index2.html" class="h1 no-underline"><b>Mc</b>HealthCare</a>
            </div> *@
            <div class="card-header text-center">
                <a href="#" class="h1 no-underline">
                    <img src="image/mcdermott_logo.png" alt="Logo McHealthCare" style="max-width: 100px; height: auto; vertical-align: middle;"> <!-- Ganti url_ke_gambar_anda dengan URL gambar Anda -->
                </a>
            </div>
            <div class="card-body">
                @* <a href="../../index2.html" class="h1 no-underline"><b>Mc</b>HealthCare</a>
                <b class="login-box-msg">Mc</b>HealthCare *@
                @* <p class="text-center mt-2 mb-2">Sign in to start your session</p> *@ 
                <h5 class="text-center mt-2"><b>Welcome</b></h5>
                <p class="text-center mt-1 mb-2">Please login using your account to continue</p>

                @*  <div hidden="@isSuccess" class="alert alert-danger alert-dismissible">
                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                <h5><i class="icon fas fa-ban"></i> Alert!</h5>
                @text
                </div> *@

                @*   <form method="POST" action="/login">
                    <div class="input-group mb-3">
                        <input @bind="LoginForm.Email" id="exampleInputEmail1" type="email" class="form-control" placeholder="Email">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-envelope"></span>
                            </div>
                        </div>

                    </div>
                    <div class="input-group mb-3">
                        <input @bind="LoginForm.Password" type="password" class="form-control" placeholder="Password">
                        <div class="input-group-append">
                            <div class="input-group-text">
                                <span class="fas fa-lock"></span>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-block btn-primary">
                        Sign in
                    </button>

                </form>

                <EditForm Model="@LoginForm" Context="EditFormContextt" method="POST" action="/login">
                    <input type="text" name="data" value="test">
                    <input type="submit" value="Submit">
                </EditForm>

                <form method="POST" action="/login">
                    <input type="text" name="data" value="test">
                    <input type="submit" value="Submit">
                </form> *@

                @*  <DxComboBox @bind-Value="SelectedValue"
                            @bind-Text="Hehehe"
                            Data="@Villages"
                            ValueFieldName="Id"
                            FilteringMode="DataGridFilteringMode.Contains"
                            TextFieldName="Name"
                            AllowUserInput="true"
                            ShowValidationIcon="true"
                            ListRenderMode="ListRenderMode.Virtual">
                    <Buttons>
                        <DxEditorButton Click="OnSearch" IconCssClass="fa-solid fa-magnifying-glass" />
                    </Buttons>
                </DxComboBox>
 *@

              @*   @if (IsLoading)

                {
                    <LoadingIndicatorLayout>

                    </LoadingIndicatorLayout>
                }
                else
                {
                    <h1>ID: @selectedVillageId</h1>

                } *@

                <EditForm Model="@LoginForm" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit"
                          OnInvalidSubmit="@HandleInvalidSubmit" FormName="FormUser">
                    <DataAnnotationsValidator />
                    <AntiforgeryToken />
                    <DxFormLayout CssClass="col-md">
                        @* <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Password" ColSpanMd="12" BeginRow="true">
                            <DxComboBox Data="Villages"
                                        TextFieldName="Name"
                                        ValueFieldName="Id"
                                        @oninput="OnInput"
                                        AllowUserInput="true"
                                        @bind-Value="selectedVillageId">
                                <Columns>
                                    <DxListEditorColumn FieldName="@nameof(Village.Name)" Caption="Name" />
                                    <DxListEditorColumn FieldName="Province.Name" Caption="Province" /> 
                                    <DxListEditorColumn FieldName="City.Name" Caption="City" />
                                    <DxListEditorColumn FieldName="District.Name" Caption="District" />
                                </Columns>
                            </DxComboBox>
                        </DxFormLayoutItem> *@

                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Email" ColSpanMd="12" BeginRow="true">
                            <DxMaskedInput Mask="@EmailMask"
                                           NullText="mail@domain.com"
                                           ValueExpression="@(() => LoginForm.Email)"
                                           Value="LoginForm.Email"
                                           TextChanged="PerformSearch"
                                           ValueChanged="@((string s) => OnEmailChanged(s))"
                                           ShowValidationIcon="true"
                                           ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                           InputId="EmailId"
                                           MaskMode="MaskMode.RegEx">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-envelope" />
                                </Buttons>
                                <ChildContent>
                                    <DxRegExMaskProperties MaskAutoCompleteMode="@MaskAutoCompleteMode.Strong"
                                                           Placeholder="@('_')"
                                                           PlaceholdersVisible="true" />
                                </ChildContent>
                            </DxMaskedInput>
                            <ValidationMessage For="@(()=>LoginForm.Email)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem CaptionCssClass="required-caption" CaptionPosition="CaptionPosition.Vertical" Caption="Password" ColSpanMd="12" BeginRow="true">
                            <DxTextBox @bind-Text="@LoginForm.Password"
                                       InputId="PasswordId"
                                       ShowValidationIcon="true"
                                       NullText="Password" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                       Password="true">
                                <Buttons>
                                    <DxEditorButton IconCssClass="fa-solid fa-lock" />
                                </Buttons>
                            </DxTextBox>
                            <ValidationMessage For="@(()=>LoginForm.Password)"   />
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12" BeginRow="true">
                            <div class="row">
                                <div class="col-12">
                                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Contained" CssClass="w-100 mt-3" IconCssClass="fa-solid fa-right-to-bracket" Text="Login" SubmitFormOnClick="true" />
                                </div>
                            </div>
                            @* <DxButton RenderStyleMode="@ButtonRenderStyleMode.Contained" RenderStyle="ButtonRenderStyle.Primary" CssClass="rounded-button mt-2" IconCssClass="fa-solid fa-right-to-bracket" Text="Sign In" SubmitFormOnClick="true" /> *@
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .rounded-button {
        border-radius: 13px; /* Sesuaikan dengan radius yang Anda inginkan */
    }
</style>


@* <DxComboBox Data="@Villages"
            TextFieldName="VillageName"
            ValueFieldName="VillageId"
            ListRenderMode="ListRenderMode.Virtual"
            @bind-Value="@selectedVillageId"
            @ref="comboBoxRef"
            FilteringMode="DataGridFilteringMode.Contains" /> *@

@* <DxComboBox TData="VillageDto" TValue="string" CustomData="this.LoadDataz" ListRenderMode="ListRenderMode.Virtual"> *@


<script>
    //             window.attachComboBoxScrollEvent = (elementId, dotNetHelper) => {
    //     const element = document.getElementById(elementId);
    //     if (element) {
    //         element.addEventListener('scroll', () => {
    //             if (element.scrollTop + element.clientHeight >= element.scrollHeight) {
    //                 dotNetHelper.invokeMethodAsync('OnScrollToBottom');
    //             }
    //         });
    //     }
    // };


</script>
@code {

    private long selectedVillageId;
    private bool IsLoading = false;
    private List<VillageDto> Villages { get; set; } = [];

    private async Task OnInput(ChangeEventArgs e)
    {
        IsLoading = true;
        if (e is not null)
        {
            Villages = (await Mediator.Send(new GetVillageQueryNew
                {
                    Select = x => new Village
                    {
                        Id = x.Id,
                        Name = x.Name
                    },
                    SearchTerm = e.Value.ToString(),
                    PageIndex = 0,
                    PageSize = 10
                })).Item1;
        }
        IsLoading = false;
    }

    private async Task GetVillage()
    {
        IsLoading = true;
        Villages = (await Mediator.Send(new GetVillageQueryNew
            {
                PageIndex = 0,
                PageSize = 10
            })).Item1;
        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await GetVillage();
        IsLoading = false;
        // await LoadData(1, 20);
        //Helper.DeleteFile("Hasil-Ronsen.jpg");
        // try
        // {
        //     var result = await NavigationManager.CheckAccessUser(oLocal);
        //     IsAccess = result.Item1;
        //     UserAccessCRUID = result.Item2;
        // }
        // catch { }

    }
    // private DotNetObjectReference<LoginPage> objRef;
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         objRef = DotNetObjectReference.Create(this);
    //         await JsRuntime.InvokeVoidAsync("attachComboBoxScrollEvent", "comboBoxElement", objRef);
    //     }
    // }
    // public void Dispose()
    // {
    //     objRef?.Dispose();
    // }
    // private int pageSize = 10;
    // private int pageIndex = 0;
    // [JSInvokable]
    // public async Task OnScrollToBottom()
    // {
    //     pageSize += 10; // Tambah PageSize
    //     await LoadDataz(new DevExtreme.AspNet.Data.DataSourceLoadOptionsBase(), CancellationToken.None); // Muat ulang data
    //     StateHasChanged(); // Memicu render ulang
    // }


    // public async Task<LoadResult> LoadDataz(DevExtreme.AspNet.Data.DataSourceLoadOptionsBase optionsBase, CancellationToken cancellationToken)
    // {
    //     var s = Convert.ToInt32(optionsBase.Skip / optionsBase.Take);
    //     var t = optionsBase.Take;
    //     var result = await Mediator.Send(new GetCountryQuery
    //         {
    //             PageIndex = pageIndex,
    //             PageSize = pageSize
    //         }, cancellationToken);

    //     var loadResult = DevExtreme.AspNet.Data.DataSourceLoader.Load(result.Item1, optionsBase);

    //     return loadResult;
    // }

    // private DxComboBox<VillageDto, long> comboBoxRef;
    // private List<VillageDto> Villages = [];
    // private string comboBoxElementId = "comboBoxElement";




    private async Task PerformSearch()
    {
        // ToastService.ShowInfo("dawd");
    }
    private async Task OnEmailChanged(string newValue)
    {
        // Handle the value change, e.g., perform a search or show a toast message
        LoginForm.Email = newValue;
        // ToastService.ShowInfo("Email changed: " + newValue);
    }
    [SupplyParameterFromForm(FormName = "dawda")]
    public LoginTemp LoginForm { get; set; } = new();
    public class LoginTemp
    {
        [Required]
        public string? Email { get; set; }

        [Required]
        public string? Password { get; set; }
    }

    private long? SelectedValue { get; set; }
    private string? Hehehe { get; set; }

    private void HandleInput(ChangeEventArgs e)
    {
        ToastService.ShowInfo(e.Value?.ToString() ?? "Empty");
    }

    #region MaskedInput
    string EmailMask { get; set; } = @"(\w|[.-])+@(\w|-)+\.(\w|-){2,4}";
    string EmailLink { get; set; } = "mailto:test@example.com";
    // void OnEmailChanged(string email)
    // {
    //     User.Email = email;
    //     EmailLink = $"mailto:{email}";
    // }
    #endregion
    private GroupMenuDto UserAccessCRUID = new();
    private bool IsAccess = false;

    [Microsoft.AspNetCore.Mvc.ValidateAntiForgeryToken]
    private async Task HandleValidSubmit()
    {
        FormValidationState = true;

        await OnLogin();
    }

    private bool FormValidationState = true;
    private void HandleInvalidSubmit()
    {
        if (string.IsNullOrWhiteSpace(LoginForm.Password) || string.IsNullOrWhiteSpace(LoginForm.Email))
        {
            ToastService.ClearInfoToasts();
            FormValidationState = false;
            ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
            return;
        }
    }

    private bool PanelVisible { get; set; } = false;
    private string searchTerm = string.Empty;
    private string FilterText { get; set; }

    private async Task OnSearch()
    {
        ToastService.ShowInfo(Hehehe);
        await LoadData(1, 100);
    }
    private async Task OnTextChanged(string text)
    {
        FilterText = text;
        // Optionally update the list based on filter text
        // Villages = await HttpClient.GetFromJsonAsync<IEnumerable<Village>>($"api/villages?search={FilterText}");
    }
    private async Task LoadData(int pageIndex, int pageSize)
    {
        var query = new GetPagedDataQuery
            {
                PageNumber = pageIndex + 1,
                PageSize = pageSize,
                Predicate = BuildSearchPredicate()
            };

        var result = await Mediator.Send(query);
        // Villages = result.Data;
        PanelVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private Expression<Func<Village, bool>> BuildSearchPredicate()
    {
        return string.IsNullOrWhiteSpace(Hehehe)
        ? village => true
        : village => village.Name.Contains(Hehehe);
    }


    private async Task DownloadFile()
    {
        try
        {
            // await Helper.DownloadFile(HttpContextAccessor, Http, JsRuntime);
            // Replace "api/download/file" with the actual API endpoint for downloading files
            return;
            var response = await HttpClient.GetAsync("http://localhost:5000/Uploads/Hasil-Ronsen.jpeg");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStreamAsync();
                var fileName = "Hasil-Ronsen.jpeg"; // Change the file name if necessary

                // Convert file content to Base64 string
                var bytes = new byte[content.Length];
                await content.ReadAsync(bytes, 0, (int)content.Length);
                var base64Content = Convert.ToBase64String(bytes);

                // Trigger file download and specify file name
                await JsRuntime.InvokeVoidAsync("downloadFile", new
                {
                    fileName = fileName,
                    content = base64Content
                });
            }
            else
            {
                // Handle error
                // You might want to show an error message or log the error
            }
        }
        catch (Exception ex)
        {
            ex.HandleException(ToastService);
            // Handle exception
            // You might want to show an error message or log the exception
        }
    }
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await base.OnAfterRenderAsync(firstRender);

    //     if (firstRender)
    //     {
    //         try
    //         {

    //             await DownloadFile();
    //         }
    //         catch { }
    //     }
    // }

    private void ClickLogin()
    {
        NavigationManager.NavigateTo("/", true);
    }

    [SupplyParameterFromForm]
    private User User { get; set; } = new();



    private async Task OnLogin()
    {
        // toastService.ShowSuccess("Success");
        // toastService.ShowInfo("Info");
        // toastService.ShowWarning("Warning");
        // toastService.ShowError("Error");

        try
        {
            var currentUrl = NavigationManager.Uri;
            var request = new HttpRequestMessage(HttpMethod.Post, currentUrl);

            // Get the anti-forgery token
            // var tokens = await HttpContextAccessor.HttpContext.GetTokenAsync("RequestVerificationToken");
            // request.Headers.Add("X-CSRF-TOKEN", tokens.RequestToken);

            // Optionally add content to your request

            // var jsonContent = new StringContent(System.Text.Json.JsonSerializer.Serialize(LoginForm), Encoding.UTF8, "application/json");

            // // request.Content = new StringContent(jsonContent);
            // request.Content = jsonContent;

            // // Send the request
            // var response = await HttpClient.SendAsync(request);

            // // Handle response
            // if (response.IsSuccessStatusCode)
            // {
            //     // Success logic
            // }

            // ToastService.ClearErrorToasts();

            // var user = await Mediator.Send(new GetUserQuery(x => x.Email == LoginForm.Email && x.Password == LoginForm.Password));
            var abvc = Helper.HashMD5(LoginForm.Password);
            // var user = await Mediator.Send(new GetUserQuery(x => x.Email == LoginForm.Email && x.Password == Helper.HashMD5(LoginForm.Password)));
            var user = await Mediator.Send(new GetSingleUserQuery
                {
                    Predicate = x => x.IsUser == true && x.Email == LoginForm.Email && x.Password == Helper.HashMD5(LoginForm.Password),
                    Select = x => new User
                    {
                        Id = x.Id
                    }
                });

            if (!FormValidationState)
            {
                ToastService.ClearInfoToasts();
                ToastService.ShowInfo("Please ensure that all fields marked in red are filled in before submitting the form.");
                return;
            }

            if (user is not null && !string.IsNullOrWhiteSpace(LoginForm!.Email) && !string.IsNullOrWhiteSpace(LoginForm.Password))
            {
                // Helper.UserLogin = user;

                // var claims = new List<Claim>
                // {
                //     new Claim(ClaimTypes.Name, user.Name),
                //     new Claim(ClaimTypes.Role, Convert.ToBoolean(user.IsEmployee) ? "Employee" : "")
                // };
                // // var claims = new List<Claim>
                // // {
                // //     new Claim(ClaimTypes.Name, "username"),
                // //     new Claim(ClaimTypes.Role, "Admin"),
                // //     // Tambahkan klaim tambahan jika diperlukan
                // // };

                // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                // var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

                // await HttpContextAccessor?.HttpContext?.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);
                // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

                // await oLocal.GetItemAsync<string>("asd");

                // var a = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                // await a.UpdateAuthenticationState(user);

                // await _protectedSessionStorage.SetAsync("UserSession", b);
                // await _protectedSessionStorage.SetAsync("UserMenuSession", DetailMenuDtos);

                string serialize = JsonConvert.SerializeObject(user);
                var encrypt = Helper.Encrypt(serialize);

                // await oLocal.SetItemAsync("dotnet", encrypt);
                await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_INFO, encrypt, 2);

                // if (user[0].GroupId is not null)
                // {
                //     var g = await Mediator.Send(new GetGroupMenuByGroupIdRequest((long)user[0].GroupId));

                //     var encryptMenu = Helper.Encrypt(JsonConvert.SerializeObject(g));

                //     await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_GROUP, encryptMenu, 1);
                //     await oLocal.SetItemAsync("dotnet2", encryptMenu);
                // }
                // else
                // {
                //     await JsRuntime.InvokeVoidAsync("setCookie", CookieHelper.USER_GROUP, string.Empty, 1);
                //     await oLocal.SetItemAsync("dotnet2", new List<string>());
                // }

                try
                {
                    var a = (CustomAuthenticationStateProvider)CustomAuth;
                    await a.UpdateAuthState(encrypt);
                }
                catch (Exception)
                {
                    ToastService.ShowInfo("e");
                }

                NavigationManager.NavigateTo("", forceLoad: true);

                // var claims = new List<Claim>
                //     {
                //         new Claim("CustomClaimType", "CustomClaimValue")
                //     };

                // var userIdentity = new ClaimsIdentity(claims, "login");

                // ClaimsPrincipal principal = new ClaimsPrincipal(userIdentity);

                // // Serialize principal
                // var authenticationState = new AuthenticationState(principal);
                // AuthenticationStateProvider.NotifyAuthenticationStateChanged(Task.FromResult(authenticationState));

                // isSuccess = true;
            }
            else
            {
                ToastService.ShowError("Invalid Email or Password!");
                // if (string.IsNullOrWhiteSpace(User.Email) || string.IsNullOrWhiteSpace(User.Password))
                // {
                //     text = "Please insert the Email and Password";
                // }
                // isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowInfo(ex.Message);
            ex.HandleException(ToastService);
        }
    }
}
