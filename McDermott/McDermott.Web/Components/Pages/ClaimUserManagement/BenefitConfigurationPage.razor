@page "/claim-user-management/benefit-configuration"
@using McDermott.Application.Dtos.AwarenessEvent
@using McDermott.Application.Dtos.ClaimUserManagement
@rendermode InteractiveServer
<PageTitle>McHealtCare - Benefit Configuration</PageTitle>

@if (IsAccess && UserAccessCRUID is not null && UserAccessCRUID.IsRead)
{
    <div class="wrapper">
        <BaseHeaderPage Title="Benefit Configuration" OnClickBack="@(async () => await LoadData())" ShowBackButton="false" />

        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        @* @if (PostBenefitConfigurations != null && PostBenefitConfigurations.Id != 0)
                    {
                    <div class="row justify-content-end mb-3">
                    <div class="col-auto align-self-end">
                    <DxTabs RenderMode="TabsRenderMode.AllTabs">
                    <DxTab Text="Draft" Enabled="@(PostBenefitConfigurations.Status == EnumBenefitStatus.Draft)"></DxTab>
                    <DxTab Text="Active" Enabled="@(PostBenefitConfigurations.Status == EnumBenefitStatus.Active)"></DxTab>
                    <DxTab Text="Inactive" Enabled="@(PostBenefitConfigurations.Status == EnumBenefitStatus.InActive)"></DxTab>
                    </DxTabs>
                    </div>
                    </div>
                    } *@

                        @*  <div class="sticky">
                    <div class="card">
                    <div class="card-body">
                    <div class="row justify-content-between">
                    <div class="col-auto align-self-start">
                    @if (PostBenefitConfigurations != null && PostBenefitConfigurations.Id != 0)
                    {
                    @if (PostBenefitConfigurations.Status == EnumBenefitStatus.Draft)
                    {
                    <DxButton Text="Active" RenderStyle="ButtonRenderStyle.Primary" IconCssClass="fa-solid fa-circle-check" Click="onActive"></DxButton>
                    <DxButton Text="InActive" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-circle-xmark" Click="onInActive"></DxButton>
                    }
                    else if (PostBenefitConfigurations.Status == EnumBenefitStatus.Active)
                    {
                    <DxButton Text="InActive" RenderStyle="ButtonRenderStyle.Danger" IconCssClass="fa-solid fa-circle-xmark" Click="onInActive"></DxButton>
                    }
                    else if (PostBenefitConfigurations.Status == EnumBenefitStatus.InActive)
                    {
                    <DxButton Text="Send To Draft" RenderStyle="ButtonRenderStyle.Success" IconCssClass="fa-solid fa-rotate-left" Click="sendToDraft"></DxButton>
                    }
                    }
                    </div>
                    </div>
                    </div>
                    </div>
                    </div> *@


                        <div class="card">
                            <InputFile id="fileInput" style="display:none" OnChange="@ImportExcelFile" accept=".xlsx" multiple="false"></InputFile>

                            <DxLoadingPanel @bind-Visible="PanelVisible"
                                            IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                            IsContentBlocked="true"
                                            ApplyBackgroundShading="true"
                                            IndicatorAreaVisible="false"
                                            Text="Fetching Data...">
                                <MyGridPaginate @ref="Grid"
                                                Data="GetBenefitConfigurations"
                                                @bind-SelectedDataItems="@SelectedDataItems"
                                                EditModelSaving="OnSave"
                                                DataItemDeleting="OnDelete"
                                                FocusedRowChanged="Grid_FocusedRowChanged"
                                                KeyFieldName="Id">

                                    <ToolbarTemplate>
                                        <MyDxToolbarBase TItem="BenefitConfigurationDto"
                                                         Items="@GetBenefitConfigurations"
                                                         Grid="Grid"
                                                         SelectedDataItems="@SelectedDataItems"
                                                         NewItem_Click="@NewItem_Click"
                                                         EditItem_Click="@(async () => await EditItem_Click())"
                                                         DeleteItem_Click="@DeleteItem_Click"
                                                         Refresh_Click="@Refresh_Click"
                                                         ImportFile="ImportFile"
                                                         ExportToExcel="ExportToExcel"
                                                         IsImport="UserAccessCRUID.IsImport"
                                                         VisibleNew="UserAccessCRUID.IsCreate"
                                                         VisibleEdit="UserAccessCRUID.IsUpdate"
                                                         VisibleDelete="UserAccessCRUID.IsDelete" />

                                    </ToolbarTemplate>
                                    <Columns>
                                        <DxGridSelectionColumn Width="30px" />

                                        <DxGridDataColumn MinWidth="150" Width="auto" FieldName="BenefitName" Caption="Name" SortIndex="0" />
                                        <DxGridDataColumn MinWidth="150" FieldName="TypeOfBenefit" Width="auto" Caption="Type Benefit" />

                                        <!-- Set a limited width for BenefitValue column -->
                                        <DxGridDataColumn MinWidth="140" FieldName="BenefitValue" Caption="Benefit Value" Width="auto" />

                                        <DxGridDataColumn MinWidth="140" FieldName="DurationOfBenefit" Width="auto" Caption="Type Duration" />
                                        <DxGridDataColumn MinWidth="100" FieldName="BenefitDuration" Width="auto" Caption="Duration" />

                                        <!-- Set a limited width for IsEmployee column -->
                                        <DxGridDataColumn MinWidth="130" FieldName="IsEmployee" Width="auto" Caption="Is Employee" TextAlignment="GridTextAlignment.Center" />

                                        <!-- Set a limited width for Status column -->
                                        <DxGridDataColumn FieldName="Status" MinWidth="100" Width="auto" Caption="Status">
                                            <CellDisplayTemplate>
                                                @GetIssueStatusIconHtml((context.DataItem as BenefitConfigurationDto).Status)
                                            </CellDisplayTemplate>
                                        </DxGridDataColumn>

                                        <DxGridDataColumn FieldName="Id" MinWidth="200" AllowSort="false" Width="auto" TextAlignment="GridTextAlignment.Center">
                                            <CellDisplayTemplate>
                                                @{
                                                    var dataItem = (context.DataItem as BenefitConfigurationDto);
                                                }

                                                @if (dataItem.Status == EnumBenefitStatus.Draft)
                                                {
                                                    <DxButton RenderStyle="ButtonRenderStyle.Success"
                                                              title="Active"
                                                              Text="Active"
                                                              IconCssClass="fa-solid fa-check"
                                                              Click="@(() => onActive(dataItem))"
                                                              CssClass="btn-icon-undo me-1" />

                                                    <DxButton RenderStyle="ButtonRenderStyle.Danger"
                                                              title="InActive"
                                                              Text="In Active"
                                                              IconCssClass="fa-solid fa-xmark"
                                                              Click="@(() => onInActive(dataItem))"
                                                              IconPosition="ButtonIconPosition.BeforeText"
                                                              CssClass="btn-icon-redo" />
                                                }
                                                else if (dataItem.Status == EnumBenefitStatus.InActive)
                                                {
                                                    <DxButton RenderStyle="ButtonRenderStyle.Warning"
                                                              title="Send To Draft"
                                                              Text="Send To Draft"
                                                              IconCssClass="fa-solid fa-rotate-left"
                                                              Click="@(() => sendToDraft(dataItem))"
                                                              IconPosition="ButtonIconPosition.BeforeText"
                                                              CssClass="btn-icon-draft" />
                                                }
                                                else
                                                {
                                                    <DxButton RenderStyle="ButtonRenderStyle.Danger"
                                                              title="InActive"
                                                              Text="In Active"
                                                              IconCssClass="fa-solid fa-xmark"
                                                              Click="@(() => onInActive(dataItem))"
                                                              IconPosition="ButtonIconPosition.BeforeText"
                                                              CssClass="btn-icon-redo" />
                                                }
                                            </CellDisplayTemplate>
                                            <HeaderCaptionTemplate>Action</HeaderCaptionTemplate>
                                        </DxGridDataColumn>
                                    </Columns>

                                    <TotalSummary>
                                        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                           FieldName="Name"
                                                           Visible="true" />
                                    </TotalSummary>
                                    <EditFormTemplate Context="EditFormContext">
                                        <AntiforgeryToken />
                                        @{
                                            var PostBenefitConfigurations = (BenefitConfigurationDto)EditFormContext.EditModel;
                                        }
                                        <DxFormLayout CssClass="w-100">
                                            <DxFormLayoutItem CaptionCssClass="required-caption normal-caption" Caption="Name" ColSpanMd="12">
                                                <DxTextBox @bind-Text="@PostBenefitConfigurations.BenefitName" ShowValidationIcon="true" ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" NullText="Name" />
                                                <ValidationMessage For="@(()=> PostBenefitConfigurations.BenefitName)"   />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem CaptionCssClass="Required-caption normal-caption" Caption="Benefit Type" ColSpanMd="6">
                                                <MyDxComboBox Data="@BenefitOfType" @bind-Value="@PostBenefitConfigurations.TypeOfBenefit" NullText="Select Benefit Type"></MyDxComboBox>
                                                <ValidationMessage For="@(()=> PostBenefitConfigurations.TypeOfBenefit)"   />
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Benefit Value" CaptionCssClass="normal-caption" ColSpanMd="6">
                                                <DxSpinEdit @bind-Value="@PostBenefitConfigurations.BenefitValue" NullText="Input Benefit Value"></DxSpinEdit>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Duration Of Benefit" CaptionCssClass="normal-caption" ColSpanMd="6">
                                                <MyDxComboBox Data="@RepeatWork" @bind-Value="@PostBenefitConfigurations.DurationOfBenefit" NullText="select Duration"></MyDxComboBox>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Duration Value" CaptionCssClass="normal-caption" ColSpanMd="6">
                                                <DxSpinEdit @bind-Value="@PostBenefitConfigurations.BenefitDuration" NullText="Input Duration value"></DxSpinEdit>
                                            </DxFormLayoutItem>
                                            <DxFormLayoutItem Caption="Is Employee" CaptionCssClass="normal-caption">
                                                <DxCheckBox @bind-Checked="@PostBenefitConfigurations.IsEmployee" CssClass="w-100" />
                                            </DxFormLayoutItem>
                                        </DxFormLayout>
                                    </EditFormTemplate>
                                </MyGridPaginate>
                                <div class="row">
                                    <DxFormLayout>
                                        <div class="col-md-9">
                                            <DxFormLayoutItem>
                                                <DxPager PageCount="totalCount"
                                                         ActivePageIndexChanged="OnPageIndexChanged"
                                                         ActivePageIndex="activePageIndex"
                                                         VisibleNumericButtonCount="10"
                                                         SizeMode="SizeMode.Medium"
                                                         NavigationMode="PagerNavigationMode.Auto">
                                                </DxPager>
                                            </DxFormLayoutItem>
                                        </div>
                                        <div class="col-md-3 d-flex justify-content-end">
                                            <DxFormLayoutItem Caption="Page Size:">
                                                <MyDxComboBox Data="(new[] { 10, 25, 50, 100 })"
                                                              NullText="Select Page Size"
                                                              ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                                              SelectedItemChanged="((int e ) => OnPageSizeIndexChanged(e))"
                                                              @bind-Value="pageSize">
                                                </MyDxComboBox>
                                            </DxFormLayoutItem>
                                        </div>
                                    </DxFormLayout>
                                </div>
                            </DxLoadingPanel>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
}
else if (UserAccessCRUID is not null && !UserAccessCRUID.IsRead)
{
    <InvalidPermissionPage />
}
else
{
    <LoadingIndicatorLayout />
}