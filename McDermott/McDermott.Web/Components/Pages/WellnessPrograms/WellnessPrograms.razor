@page "/wellness" 
@rendermode InteractiveServer

<PageTitle>Wellness Program Enrollment</PageTitle>

 
    <div class="wrapper">
        <BaseHeaderPage Title="Wellness Program Enrollment" OnClickBack="@(async () => await LoadData())" ShowBackButton="ShowForm" />

        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col">
                        <div class="card">
                            @if (!ShowForm)
                            {
                                <DxLoadingPanel @bind-Visible="PanelVisible"
                                                IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                                                IsContentBlocked="true"
                                                ApplyBackgroundShading="true"
                                                IndicatorAreaVisible="false"
                                                Text="Fetching Data...">
                                    <MyGridPaginate @ref="Grid"
                                                    @bind-SelectedDataItems="@SelectedDataItems"
                                                    Data="WellnessProgramss"
                                                    KeyFieldName="Id"
                                                    DataItemDeleting="OnDelete"
                                                    FocusedRowChanged="Grid_FocusedRowChanged"
                                                    RowDoubleClick="EditItem_Click">

                                        <ToolbarTemplate>
                                            <MyDxToolbarBase TItem="WellnessProgramDto"
                                                             Grid="Grid"
                                                             Items="@WellnessProgramss"
                                                             SelectedDataItems="@SelectedDataItems"
                                                             NewItem_Click="@NewItem_Click"
                                                             EditItem_Click="@EditItem_Click"  />
                                        </ToolbarTemplate>

                                        <Columns>
                                            <DxGridSelectionColumn Width="15px" />
                                            <DxGridDataColumn FieldName="ProgramName" MinWidth="200" SortIndex="0" />
                                            <DxGridDataColumn FieldName="Category" MinWidth="200" />
                                            <DxGridDataColumn FieldName="StartDate" MinWidth="100" />
                                            <DxGridDataColumn FieldName="EndDate" MinWidth="100" />
                                        </Columns>
                                        <TotalSummary>
                                            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                                                               FieldName="ProgramName"
                                                               Visible="true" />
                                        </TotalSummary>
                                    </MyGridPaginate>
                                </DxLoadingPanel>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>


@code {
    private int FocusedRowVisibleIndexGroupMenu { get; set; }
    private void Grid_FocusedRowChanged(GridFocusedRowChangedEventArgs args)
    {
        FocusedRowVisibleIndexGroupMenu = args.VisibleIndex; 
    }
    public IGrid Grid { get; set; }
    private bool PanelVisible { get; set; } = true;
    private bool IsLoading { get; set; } = false;
    private bool ShowForm { get; set; } = false;
    private WellnessProgramDto WellnessProgram { get; set; } = new();
    private List<WellnessProgramDto> WellnessProgramss = new();
    private List<string> Categories = new() { "Mental Health", "Dietary Awareness", "Physical Exercise" };
    private List<string> Diagnoses = new() { "Hypertension", "Diabetes", "Depression" };
    private IReadOnlyList<object> SelectedDataItems { get; set; } = new List<object>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Load data from server or database
        PanelVisible = false;
    }

    private void NewItem_Click()
    {
        NavigationManager.NavigateTo($"wellness/{EnumPageMode.Create.GetDisplayName()}");
            return;
    }

    private async Task EditItem_Click()
    {
        try
            {
                WellnessProgram = SelectedDataItems[0].Adapt<WellnessProgramDto>();
                NavigationManager.NavigateTo($"wellness/{EnumPageMode.Update.GetDisplayName()}?Id={WellnessProgram.Id}");
                return;
                
            }
            catch (Exception e)
            {
                var zz = e;
            }
    }

    private async Task HandleValidSubmit()
    {
        // Save data
        ShowForm = false;
        await LoadData();
    }

    private void CancelForm_Click()
    {
        ShowForm = false;
    }

    private async Task OnDelete(GridDataItemDeletingEventArgs e)
    {
        // Delete logic
        await LoadData();
    }

}
    

