@using static McDermott.Application.Features.Commands.Config.GroupMenuCommand

<DxLoadingPanel @bind-Visible="PanelVisible"
                IndicatorAnimationType="WaitIndicatorAnimationType.Pulse"
                IsContentBlocked="true"
                ApplyBackgroundShading="true"
                IndicatorAreaVisible="false"
                Text="Fetching Data...">
    <MyGridPaginate Data="GroupMenus"
                    @ref="Grid"
                    SearchTextChanged="OnSearchBoxChanged"
                    PageSize="10">
        <Columns>
            <DxGridDataColumn MinWidth="200" FieldName="Menu.Name" Caption="Menu" SortIndex="0" />
            <DxGridDataColumn MinWidth="200" FieldName="Menu.Parent.Name" Caption="Parent" SortIndex="0" />
            <DxGridDataColumn MinWidth="50" FieldName="IsCreate" Caption="Create" />
            <DxGridDataColumn MinWidth="50" FieldName="IsRead" Caption="Read" />
            <DxGridDataColumn MinWidth="50" FieldName="IsUpdate" Caption="Update" />
            <DxGridDataColumn MinWidth="50" FieldName="IsDelete" Caption="Delete" />
            @* <DxGridDataColumn FieldName="Import" /> *@
        </Columns>
        <TotalSummary>
            <DxGridSummaryItem SummaryType="GridSummaryItemType.Count"
                               FieldName="Name"
                               Visible="true" />
        </TotalSummary>
    </MyGridPaginate>
    <div class="row">
        <DxFormLayout>
            <div class="col-md-9">
                <DxFormLayoutItem>
                    <DxPager PageCount="totalCount"
                             ActivePageIndexChanged="OnPageIndexChanged"
                             ActivePageIndex="activePageIndex"
                             VisibleNumericButtonCount="10"
                             SizeMode="SizeMode.Medium"
                             NavigationMode="PagerNavigationMode.Auto">
                    </DxPager>
                </DxFormLayoutItem>
            </div>
            <div class="col-md-3 d-flex justify-content-end">
                <DxFormLayoutItem Caption="Page Size:">
                    <MyDxComboBox Data="(new[] { 10, 25, 50, 100 })"
                                  NullText="Select Page Size"
                                  ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"
                                  SelectedItemChanged="((int e ) => OnPageSizeIndexChanged(e))"
                                  @bind-Value="pageSize">
                    </MyDxComboBox>
                </DxFormLayoutItem>
            </div>
        </DxFormLayout>
    </div>
</DxLoadingPanel>

@code {
    [Parameter]
    public GroupDto Group { get; set; }
    private List<GroupMenuDto> GroupMenus = [];
    private IGrid Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(0, 10);
    }
    #region Searching

    private int pageSize { get; set; } = 10;
    private int totalCount = 0;
    private int activePageIndex { get; set; } = 0;
    private string searchTerm { get; set; } = string.Empty;

    private async Task OnSearchBoxChanged(string searchText)
    {
        searchTerm = searchText;
        await LoadData(0, pageSize);
    }

    private async Task OnPageSizeIndexChanged(int newPageSize)
    {
        pageSize = newPageSize;
        await LoadData(0, newPageSize);
    }

    private async Task OnPageIndexChanged(int newPageIndex)
    {
        await LoadData(newPageIndex, pageSize);
    }

    #endregion Searching

    private bool PanelVisible = false;

    private async Task LoadData(int pageIndex = 0, int pageSize = 10)
    {
        PanelVisible = true;
        // var result = await MyQuery.GetGroupMenus(HttpClientFactory, pageIndex, pageSize, searchTerm ?? "", groupId: Group.Id);
        var result = await Mediator.Send(new GetGroupMenuQuery
        {
            SearchTerm = searchTerm ?? "",
            Predicate = x => x.GroupId == Group.Id,
            PageIndex = pageIndex,
            PageSize = pageSize
        });
        GroupMenus = result.Item1;
        totalCount = result.PageCount;
        activePageIndex = pageIndex;
        PanelVisible = false;
    }

    private void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }
    private void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow && e.VisibleIndex % 2 == 1)
        {
            e.CssClass = "alt-item";
        }
        if (e.ElementType == GridElementType.HeaderCell)
        {
            e.Style = "background-color: rgba(0, 0, 0, 0.08)";
            e.CssClass = "header-bold";
        }
    }

    private async Task ExportXlsxItem_Click()
    {
        await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            }); ;
    }

    private async Task ExportCsvItem_Click()
    {
        await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ExportXlsItem_Click()
    {
        await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
    }
}