@using static McDermott.Application.Features.Commands.Config.GroupMenuCommand
<DxGrid Data="GroupMenus"
        @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSize="10"
        ShowSearchBox="true"
        ShowGroupPanel="true"
        CustomizeElement="Grid_CustomizeElement"
        TextWrapEnabled="false"
        AutoExpandAllGroupRows="true" KeyboardNavigationEnabled="true">
    <ToolbarTemplate>
        <DxToolbar ItemRenderStyleMode="ToolbarRenderStyleMode.Contained">
            <DxToolbarItem Text="Column Chooser" Click="ColumnChooserButton_Click" BeginGroup="true" IconCssClass="fa-solid fa-table-columns" />
            <DxToolbarItem Text="Export" BeginGroup="true" IconCssClass="fa-solid fa-file-export">
                <Items>
                    <DxToolbarItem Text="To CSV" Click="ExportCsvItem_Click" />
                    <DxToolbarItem Text="To XLSX" Click="ExportXlsxItem_Click" />
                    <DxToolbarItem Text="To XLS" Click="ExportXlsItem_Click" />
                </Items>
            </DxToolbarItem>
        </DxToolbar>
    </ToolbarTemplate>
    <Columns>
        <DxGridDataColumn MinWidth="200" FieldName="Menu.Name" Caption="Menu" SortIndex="0" />
        <DxGridDataColumn MinWidth="200" FieldName="Create" />
        <DxGridDataColumn MinWidth="200" FieldName="Read" />
        <DxGridDataColumn MinWidth="200" FieldName="Update" />
        <DxGridDataColumn MinWidth="200" FieldName="Delete" />
        @* <DxGridDataColumn FieldName="Import" /> *@
    </Columns>
</DxGrid>

@code {
    [Parameter]
    public GroupDto Group { get; set; }
    private List<GroupMenuDto> GroupMenus = [];
    private IGrid Grid { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (Group != null)
        {
            GroupMenus = await Mediator.Send(new GetGroupMenuQuery(x => x.GroupId == Group.Id));
        }
    }

    private void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }
    private void Grid_CustomizeElement(GridCustomizeElementEventArgs e)
    {
        if (e.ElementType == GridElementType.DataRow && e.VisibleIndex % 2 == 1)
        {
            e.CssClass = "alt-item";
        }
        if (e.ElementType == GridElementType.HeaderCell)
        {
            e.Style = "background-color: rgba(0, 0, 0, 0.08)";
            e.CssClass = "header-bold";
        }
    }

    private async Task ExportXlsxItem_Click()
    {
        await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            }); ;
    }

    private async Task ExportCsvItem_Click()
    {
        await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ExportXlsItem_Click()
    {
        await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
    }
}