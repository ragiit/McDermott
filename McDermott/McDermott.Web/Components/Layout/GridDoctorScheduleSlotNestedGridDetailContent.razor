<DxGrid Data="DoctorSchedules"
        @ref="Grid" PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSize="5"
        ShowSearchBox="true"
        AutoExpandAllGroupRows="true"
        KeyboardNavigationEnabled="true">
    <Columns>
        <DxGridDataColumn FieldName="Name" Caption="Name" SortIndex="0" />
        <DxGridDataColumn FieldName="Service.Name" Caption="Service" SortIndex="0" />
    </Columns>
    <DetailRowTemplate>
        <GridDoctorScheduleSlotNestedGridDetailContent2 DoctorScheduleDtos="(DoctorScheduleDto)context.DataItem" />
    </DetailRowTemplate>
</DxGrid>

@code {
    private IGrid Grid { get; set; }

    [Parameter]
    public int PhysicianId { get; set; } = new();

    [Parameter]
    public List<int> DoctorScheduleIds { get; set; } = [];

    public List<DoctorScheduleDto> DoctorSchedules { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        if (DoctorScheduleIds is not null)
        {
            var result = new List<DoctorScheduleDto>();

            foreach (var id in DoctorScheduleIds)
            {
                var doctorSchedule = await Mediator.Send(new GetDoctorScheduleByIdQuery(id));
                if (doctorSchedule.Id == id && doctorSchedule.PhysicionIds!.Contains(PhysicianId))
                {
                    doctorSchedule.Physicions = PhysicianId.ToString();

                    result.Add(doctorSchedule);
                }
            }

            DoctorSchedules = result;
        }
    }

    #region  MyRegion

    private void ColumnChooserButton_Click()
    {
        Grid.ShowColumnChooser();
    }

    private async Task ExportXlsxItem_Click()
    {
        await Grid.ExportToXlsxAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            }); ;
    }

    private async Task ExportCsvItem_Click()
    {
        await Grid.ExportToCsvAsync("ExportResult", new GridCsvExportOptions
            {
                ExportSelectedRowsOnly = true,
            });
    }

    private async Task ExportXlsItem_Click()
    {
        await Grid.ExportToXlsAsync("ExportResult", new GridXlExportOptions()
            {
                ExportSelectedRowsOnly = true,
            });
    }

    #endregion
}